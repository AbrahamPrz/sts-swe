15.1 ■ análisis estático 397 2. la prueba puede contener errores. las pruebas del programa son extensas y complejas, de manera que, como programas extensos y complejos, por lo general contienen errores. 3. la prueba puede hacer suposiciones incorrectas sobre la forma de utilizar el sistema. si éste no se utiliza como se anticipaba, la prueba podría ser inválida. verificar un sistema de software no trivial requiere gran cantidad de tiempo y expe- riencia matemática, así como herramientas de software especializadas, tales como los demostradores de teoremas. por lo tanto, es un proceso costoso y, conforme aumenta el tamaño del sistema, los costos de la verificación formal se incrementan de manera des-proporcionada. en consecuencia, muchos ingenieros de software consideran que la verifi-cación formal no es efectiva en términos de costo. suponen que puede lograrse el mismo nivel de confianza en el sistema, de manera menos costosa, si se utilizan otras técnicas de validación, tales como las inspecciones y las pruebas del sistema. a pesar de sus desventajas, la posición en este texto es que los métodos formales y la verificación formal desempeñan un importante papel en el desarrollo de los sistemas de software críticos. las especificaciones formales son bastante efectivas para descubrir aquellos problemas de especificación que son las causas más comunes de falla del sis-tema. aunque la verificación formal todavía no es práctica para sistemas grandes, puede usarse en la verificación de los componentes críticos para la protección y la seguridad. 15.1.2 comprobación del modelo verificar de manera formal un programa mediante un enfoque deductivo es difícil y cos-toso, pero se han desarrollado enfoques alternativos al análisis formal que se basan en una noción más restringida de la corrección. el más exitoso de estos enfoques se llama comprobación del modelo (baier y katoen, 2008). éste se usa ampliamente para com-probar diseños de sistemas de hardware y cada vez más en sistemas de software críticos, como el software de control en los vehículos de la nasa para explorar la superficie de marte (regan y hamilton, 2004) y el software de procesamiento de llamadas telefónicas (chandra et al., 2002). la comprobación del modelo implica la creación de un modelo de sistema y la com-probación de la corrección de dicho modelo mediante herramientas especializadas de software. se han desarrollado muchas y diferentes herramientas de comprobación del mo-delo; para software, tal vez la que se utiliza más ampliamente sea spin (holzmann, 2003). en la figura 15.1 se muestran las etapas que comprende la comprobación del modelo. el proceso de comprobación del modelo implica construir un modelo formal de un sistema, por lo general como una máquina de estado finito extendida. los modelos se expresan en el lenguaje de cualquier sistema usado de comprobación del modelo: por ejemplo, el comprobador de modelo spin emplea un lenguaje llamado promela. un con-junto de propiedades deseables del sistema se identifica y escribe en una notación formal, por lo general con base en lógica temporal. un ejemplo de tal propiedad en el sistema de estación meteorológica a campo abierto es que el sistema siempre llegará al estado “trans-mitir” desde el estado “registrar”. en tal caso, el comprobador de modelo explora todas las rutas a lo largo del modelo (es decir, todas las posibles transiciones de estado) y comprueba que se sostenga la pro-piedad para cada ruta. si lo hace, entonces el comprobador de modelo confirma que el modelo es correcto con respecto a dicha propiedad. si no se sostiene para una ruta particular, el comprobador del modelo presenta un contraejemplo que ilustra dónde no es verdadera la propiedad. la comprobación del modelo es particularmente útil en la m15_sommerville_ingenieria_1ed_se_393-422.indd  397m15_sommerville_ingenieria_1ed_se_393-422.indd  397 3/18/11  5:01:19 pm3/18/11  5:01:19 pm