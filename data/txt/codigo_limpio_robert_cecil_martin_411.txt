soluciones no bloqueantes la mv java 5 aprovecha el diseño de los procesadores modernos que admiten actualizaciones fiables y no bloqueantes. imagine una clase que usa sincronización (y por tanto bloqueo) para proporcionar la actualización compatible con subprocesos de un valor: public class objectwithvalue { private int value; public void synchronized incrementvalue() { ++value; } public int getvalue() { return value; } } java 5 dispone de varias clases nuevas para este tipo de situaciones, como por ejemplo atomicboolean , atomicinteger y atomicreference . podemos modificar el código anterior para usar un enfoque no bloqueante: public class objectwithvalue { private atomicinteger value = new atomicinteger(0); public void incrementvalue() { value.incrementandget(); } public int getvalue() { return value.get(); } } aunque use un objeto en lugar de una primitiva y envíe mensajes como incrementandget() en lugar de ++ , el rendimiento de esta clase supera en la mayoría de los casos al de la versión anterior. en algunos casos será ligeramente más rápido pero los casos en los que es más lento son prácticamente inexistentes. ¿cómo es posible? los procesadores modernos disponen de una operación denominada cas (compare and swap, comparar e intercambiar). es una operación similar al bloqueo optimista de una base de datos, mientras que la versión sincronizada es similar al bloqueo pesimista. la palabra clave synchronized siempre adquiere un bloqueo, incluso cuando un segundo subproceso no intenta actualizar el mismo valor. aunque el rendimiento de los bloqueos intrínsecos ha mejorado con respecto a versiones anteriores, sigue siendo muy costoso. la versión no bloqueante asume inicialmente que varios subprocesos no 412