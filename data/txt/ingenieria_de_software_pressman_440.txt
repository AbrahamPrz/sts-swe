CAPÍTULO 17  ESTRATEGIAS DE PRUEBA DE SOFTWARE 409 Las webapps se prueban en forma muy parecida a los sistemas OO. Sin embargo, las pruebas  se diseñan para ejercitar contenido, funcionalidad, interfaz, navegación y aspectos de rendi- miento y seguridad de la webapp. A diferencia de las pruebas (una actividad sistemática planificada), la depuración puede verse  como un arte. Al comenzar con una indicación sintomática de un problema, la actividad de depuración debe rastrear la causa de un error. De los muchos recursos disponibles durante la depuración, el más valioso es el consejo de otros miembros del equipo de ingeniería del soft-ware.   PROBLEMAS  Y PUNTOS  POR EVALUAR 17.1. Con sus palabras, describa la diferencia entre verificación y validación. ¿Ambas usan los métodos de  diseño de casos de prueba y estrategias de pruebas? 17.2. Mencione algunos problemas que pueden asociarse con la creación de un grupo de prueba indepen- diente. ¿Los GPI y el SQA se integran con las mismas personas? 17.3. ¿Siempre es posible desarrollar una estrategia para probar software que usa la secuencia de pasos de  prueba descritos en la sección 17.1.3? ¿Qué posibles complicaciones pueden surgir para sistemas incrusta-dos? 17.4. ¿Por qué un módulo altamente acoplado es difícil para la prueba de unidad?17.5. El concepto de “antierrores” (sección 17.3.1) es una forma extremadamente efectiva de brindar asis- tencia de depuración interna cuando se descubre un error:  a) Desarrolle un conjunto de lineamientos para antierror.  b) Analice las ventajas de usar la técnica.  c) Analice las desventajas. 17.6. ¿Cómo puede la calendarización del proyecto afectar la prueba de integración?17.7. ¿La prueba de unidad es posible o incluso deseable en todas las circunstancias? Proporcione ejemplos  para justificar su respuesta. 17.8. ¿Quién debe realizar la prueba de validación: el desarrollador o el usuario del software? Justifique su  respuesta. 17.9. Desarrolle una estrategia de prueba completa para el sistema CasaSegura que se estudió anterior- mente en este libro. Documéntela en una Especificación de pruebas.17.10. Como proyecto de clase, desarrolle una Guía de depuración para su instalación. ¡La guía debe brindar  lenguaje y sugerencias orientadas a sistemas aprendidos en la escuela de la vida! Comience por destacar los  temas que revisarán la clase y el instructor. Publique la guía para otros en su entorno local.   LECTURAS  Y FUENTES  DE INFORMACIÓN  ADICIONALES Virtualmente todo libro acerca de las pruebas del software analiza estrategias junto con métodos para diseño de casos de prueba. Everett y Raymond (Software Testing,  Wiley-IEEE Computer Society Press, 2007), Black  (Pragmatic Software Testing, Wiley, 2007), Spiller et al. (Software Testing Process: Test Management,  Rocky Nook,  2007), Perry ( Effective Methods for Software Testing, 3a. ed., Wiley, 2005), Lewis (Software Testing and Continuous  Quality Improvement, 2a. ed., Auerbach, 2004), Loveland et al. (Software Testing Techniques, Charles River Me- dia, 2004), Burnstein ( Practical Software Testing, Springer, 2003), Dustin (Effective Software Testing, Addison- Wesley, 2002), Craig y Kaskiel (Systematic Software Testing,  Artech House, 2002), Tamres (Introducing Software  Testing, Addison-Wesley, 2002), Whittaker (How to Break Software,  Addison-Wesley, 2002), y Kaner et al. (Les- sons Learned in Software Testing, Wiley, 2001) son sólo una pequeña muestra de muchos libros que estudian los principios, conceptos, estrategias y métodos de las pruebas. Para aquellos lectores con interés en los métodos de desarrollo de software ágiles, Crispin y House ( Testing  Extreme Programming, Addison-Wesley, 2002) y Beck (Test Driven Development: By Example, Addison-Wesley,  2002) presentan estrategias y tácticas de prueba para programación extrema. Kamer et al. (Lessons Learned  17Pressman(383-410).indd   40917Pressman(383-410).indd   409 21/1/10   10:59:2621/1/10   10:59:26