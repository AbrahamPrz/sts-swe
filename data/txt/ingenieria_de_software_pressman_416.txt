CAPÍTULO 17  ESTRATEGIAS DE PRUEBA DE SOFTWARE 385 pruebas de instalación. Aunque las pruebas juegan un papel extremadamente importante en  V&V, también son necesarias muchas otras actividades. Las pruebas representan el último bastión desde donde puede valorarse la calidad y, de ma- nera más pragmática, descubrirse errores. Pero las pruebas no deben verse como una red de seguridad. Como se dice: “no se puede probar la calidad. Si no está ahí antes de comenzar las pruebas, no estará cuando termine de probar”. La calidad se incorpora en el software a lo largo de todo el proceso de ingeniería del software. La adecuada aplicación de métodos y herramien-tas, revisiones técnicas efectivas, y gestión y medición sólidas conducen a la calidad que se confirma durante las pruebas. Miller [Mil77] relaciona la prueba del software con el aseguramiento de la calidad al afirmar  que “la motivación subyacente de las pruebas de los programas es afirmar la claridad del soft-ware con métodos que puedan aplicarse de manera económica y efectiva a sistemas a gran y pequeña escala”. 17.1.2  Organización de las pruebas del software En todo proyecto de software hay un conflicto inherente de intereses que ocurre conforme co-mienzan las pruebas. Hoy en día, a las personas que construyen el software se les pide probarlo. En sí, esto parece sencillo; después de todo, ¿quién conoce mejor el programa que sus desarro-lladores? Por desgracia, estos mismos desarrolladores tienen mucho interés en demostrar que el programa está libre de errores, que funciona de acuerdo con los requerimientos del cliente y que se completará a tiempo y dentro del presupuesto. Cada uno de estos intereses tienen un efecto negativo sobre las pruebas más cuidadosas. Desde un punto de vista psicológico, el análisis y diseño de software (junto con la codifica- ción) son tareas constructivas. El ingeniero de software analiza, modela y luego crea un pro-grama de computadora y su documentación. Como cualquier constructor, el ingeniero de soft-ware está orgulloso del edificio que construyó y ve con desconfianza a quien intente derrumbarlo. Cuando comienzan las pruebas, hay un sutil, pero definitivo, intento por “romper” lo que cons-truyó el ingeniero de software. Desde el punto de vista del constructor, las pruebas pueden considerarse como (psicológicamente) destructivas. De modo que el constructor actuará con cuidado, y diseñará y ejecutará pruebas que demostrarán que el programa funciona, en lugar de descubrir errores. Desafortunadamente, los errores estarán presentes. Y si el ingeniero de soft-ware no los encuentra, ¡el cliente lo hará! Con frecuencia, existen algunas malas interpretaciones que pueden inferirse de manera erró- nea a partir de la discusión anterior: 1) que el desarrollador de software no debe hacer pruebas en absoluto, 2) que el software debe “ponerse tras una pared” que lo separe de los extraños que lo probarán sin misericordia, 3) que quienes realicen las pruebas deben involucrarse con el proyecto sólo cuando los pasos de las pruebas estén por comenzar. Cada uno de estos enuncia-dos es incorrecto. El desarrollador de software siempre es responsable de probar las unidades individuales  (componentes) del programa y de asegurarse de que cada una desempeña la función o muestra el comportamiento para el cual se diseñó. En muchos casos, el desarrollador también realiza pruebas de integración, una etapa en las pruebas que conduce a la construcción (y prueba) de la arquitectura completa del software. Sólo después de que la arquitectura de software está completa se involucra un grupo de prueba independiente (GPI). El papel de un grupo de prueba independiente (GPI) es remover los problemas inherentes que  están asociados con dejar al constructor probar lo que construyó. Las pruebas independientes remueven el conflicto de intereses que de otro modo puede estar presente. Después de todo, al personal del GPI se le paga por encontrar errores. Sin embargo, el desarrollador no da el software al GPI y se retira. Él y el GPI trabajan de ma- nera cercana a lo largo del proyecto de software para garantizar que se realizarán pruebas ex-Es un error pensar que las pruebas  son una “red de seguridad” que atrapará todos los errores que ocurran como producto de deficientes prácticas de ingeniería de software. No lo hará. Enfatice la calidad y la detección de errores a lo largo del proceso de software.CONSEJO Cita: “El optimismo es el riesgo ocu-pacional de la programación; la prueba es el tratamiento”.  Kent Beck PUNTO CLAVE Un grupo de prueba independiente  no tiene el “conflicto de intereses” que pueden experimentar los constructores del software. 17Pressman(383-410).indd   38517Pressman(383-410).indd   385 21/1/10   10:59:1921/1/10   10:59:19