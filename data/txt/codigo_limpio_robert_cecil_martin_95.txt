predeterminados antes de intentar abrir el archivo? ¿Intentaba el autor consolarse por dejar el bloque catch vacío? Ésta es la posibilidad más temida, ¿se estaba diciendo que volviera más tarde para crear el código para cargar los valores predeterminados? Nuestro único recurso es examinar el código en otras partes del sistema para determinar qué sucede. Cualquier comentario que le obligue a buscar su significado en otro módulo ha fallado en su intento de comunicación y no merece los bits que consume. Comentarios redundantes El Listado 4-1 muestra una sencilla función con un comentario de encabezado totalmente redundante. Seguramente se tarde más en leer que el propio código. Listado 4-1 waitForClose. // Método de utilidad devuelto cuando this.closed es true. Genera una excepción // si se alcanza el tiempo de espera. public synchronized void waitForClose(final long timeoutMillis) throws Exception { if (!closed) { wait(timeoutMillis); if(!closed) throw new Exception (“MockResponseSender could not be closed”); } } ¿Para qué sirve este comentario? No es más informativo que el código. No lo justifica ni transmite la intención ni la lógica. No es más fácil de leer que el código. De hecho, es menos preciso y obliga al lector a aceptar la falta de precisión en lugar de a entenderlo. Es como un vendedor de coches de segunda menos que le asegura que no hace falta revisar el motor. Fíjese ahora en la legión de javadoc inútiles y redundantes del Listado 4- 2, obtenido de Tomcat. Estos comentarios únicamente ensucian y oscurecen el código. No tienen ninguna función documental. Para empeorar las cosas, 96