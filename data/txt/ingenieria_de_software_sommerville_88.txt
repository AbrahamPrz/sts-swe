3.3 ■ programación extrema 71 2. algunas pruebas llegan a ser muy difíciles de escribir de manera incremental. por ejemplo, en una interfaz de usuario compleja, suele ser complicado escribir pruebas de unidad para el código que implementa la “lógica de despliegue” y el flujo de tra-bajo entre pantallas. 3. es difícil juzgar la totalidad de un conjunto de pruebas. aunque tenga muchas prue- bas de sistema, su conjunto de pruebas no ofrece cobertura completa. partes críticas del sistema pueden no ejecutarse y, por ende, permanecerían sin probarse. en consecuencia, aunque un gran conjunto de pruebas ejecutadas regularmente da la impresión de que el sistema está completo y es correcto, esto tal vez no sea el caso. si las pruebas no se revisan y se escriben más pruebas después del desarrollo, entonces pueden entregarse bugs (problemas, errores en el programa) en la liberación del sistema. 3.3.2 programación en pares otra práctica innovadora que se introdujo en xp es que los programadores trabajan en pares para desarrollar el software. en realidad, trabajan juntos en la misma estación de trabajo para desarrollar el software. sin embargo, los mismos pares no siempre progra-man juntos. en vez de ello, los pares se crean dinámicamente, de manera que todos los miembros del equipo trabajen entre sí durante el proceso de desarrollo. el uso de la programación en pares tiene algunas ventajas: 1. apoya la idea de la propiedad y responsabilidad colectivas para el sistema. esto refleja la idea de weinberg (1971) sobre la programación sin ego, donde el software es propiedad del equipo como un todo y los individuos no son responsables por los problemas con el código. en cambio, el equipo tiene responsabilidad colectiva para resolver dichos problemas. 2. actúa como un proceso de revisión informal, porque al menos dos personas obser- van cada línea de código. las inspecciones y revisiones de código (que se explican en el capítulo 24) son muy eficientes para detectar un alto porcentaje de errores de software. sin embargo, consumen tiempo en su organización y, usualmente, pre-sentan demoras en el proceso de desarrollo. aunque la programación en pares es un proceso menos formal que quizá no identifica tantos errores como las inspecciones de código, es un proceso de inspección mucho más económico que las inspeccio-nes formales del programa. 3. ayuda a la refactorización, que es un proceso de mejoramiento del software. la difi- cultad de implementarlo en un entorno de desarrollo normal es que el esfuerzo en la refactorización se utiliza para beneficio a largo plazo. un individuo que practica la re fac-torización podría calificarse como menos eficiente que uno que simplemente realiza desarrollo del código. donde se usan la programación en pares y la propiedad colectiva, otros se benefician inmediatamente de la refactorización, de modo que es probable que apoyen el proceso. al respecto, tal vez se pensaría que la programación en pares es menos eficiente que la programación individual. en un tiempo dado, un par de desarrolladores elaboraría m03_sommerville_ingenieria_1ed_se_056-081.indd  71m03_sommerville_ingenieria_1ed_se_056-081.indd  71 3/18/11  4:46:25 pm3/18/11  4:46:25 pm