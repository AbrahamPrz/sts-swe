383CAPÍTULO 17ESTRATEGIAS  DE PRUEBA DE SOFTWARE CONCEPTOS  CLAVE   depuración  . . . . . . . . . . . . . 404 grupo de prueba  independiente . . . . . . . . . 386 prueba alfa. . . . . . . . . . . . . 400prueba beta  . . . . . . . . . . . . 400prueba de clase. . . . . . . . . . 398prueba de despliegue. . . . . . 403prueba de integración  . . . . . 391prueba de regresión  . . . . . . 398prueba de unidad  . . . . . . . . 389prueba de validación  . . . . . . 399prueba del sistema  . . . . . . . 401revisión de la  configuración  . . . . . . . . . 400 V&V. . . . . . . . . . . . . . . . . . 387 ¿Qué es?  El software se prueba para descu- brir errores que se cometieron de manera inad- vertida conforme se diseñó y construyó. Pero, ¿cómo se realizan las pruebas? ¿Debe realizar- se un plan formal para las mismas? ¿Debe probarse el programa completo, como un todo, o aplicar pruebas sólo sobre una pequeña parte de él? ¿Debe volverse a aplicar las pruebas que ya se realizaron mientras se agregan nuevos componentes a un sistema grande? ¿Cuándo debe involucrarse al cliente? Éstas y muchas otras preguntas se responden cuando se desarrolla una estrategia de prueba de software. ¿Quién lo hace? El gerente de proyecto, los ingenieros de  software y los especialistas en pruebas desarrollan una estrategia para probar el software. ¿Por qué es importante?  Con frecuencia, la prueba  requiere más esfuerzo que cualquiera otra acción de inge-niería del software. Si se realiza sin orden, se desperdicia tiempo, se emplea esfuerzo innecesario y, todavía peor, es posible que algunos errores pasen desapercibidos. Por tanto, parecería razonable establecer una estrategia siste-mática para probar el software. ¿Cuáles son los pasos? La prueba comienza “por lo  pequeño” y avanza “hacia lo grande”. Es decir que las primeras etapas de prueba se enfocan sobre un solo com-ponente o un pequeño grupo de componentes relaciona-dos y se aplican pruebas para descubrir errores en los datos y en la lógica de procesamiento que se encapsularon en los componentes. Después de probar éstos, deben inte-grarse hasta que se construya el sistema completo. En este punto, se ejecuta una serie de pruebas de orden superior para descubrir errores en la satisfacción de los requeri-mientos del cliente. Conforme se descubren, los errores deben diagnosticarse y corregirse usando un proceso que se llama depuración. ¿Cuál es el producto final? Una Especificación pruebas  documenta la forma en la que el equipo de software pre-para la prueba al definir un plan que describe una estra-tegia global y un procedimiento con pasos de prueba específicos y los tipos de pruebas que se realizarán. ¿Cómo me aseguro de que lo hice bien? Al revisar  la Especificación pruebas  antes de realizar las pruebas, es  posible valorar si están completos los casos de prueba y las tareas de la misma. Un plan de prueba y procedimientos efectivos conducirán a la construcción ordenada del soft-ware y al descubrimiento de errores en cada etapa del proceso de construcción. UNA  MIRADA   RÁPIDAUna estrategia de prueba de software proporciona una guía que describe los pasos que  deben realizarse como parte de la prueba, cuándo se planean y se llevan a cabo dichos pasos, y cuánto esfuerzo, tiempo y recursos se requerirán. Por tanto, cualquier estrategia  de prueba debe incorporar la planificación de la prueba, el diseño de casos de prueba, la ejecu-ción de la prueba y la recolección y evaluación de los resultados. Una estrategia de prueba de software debe ser suficientemente flexible para promover un uso  personalizado de la prueba. Al mismo tiempo, debe ser suficientemente rígida para alentar la planificación razonable y el seguimiento de la gestión conforme avanza el proyecto. Shooman [Sho83] analiza estos temas: En muchas formas, la prueba es un proceso de individualización, y el número de tipos diferentes de  pruebas varía tanto como los diferentes acercamientos para su desarrollo. Durante muchos años, la única defensa contra los errores de programación fue el diseño cuidadoso y la inteligencia natural del programador. Ahora estamos en una era en la que modernas técnicas de diseño (y revisiones técnicas) ayudan a reducir el número de errores iniciales que son inherentes al código. De igual modo, diferen-tes métodos de prueba comienzan a agruparse en métodos y filosofías distintos. Estos “enfoques y filosofías” a los que denomino estrategias son el tema que se presenta en  este capítulo. En los capítulos 18, 19 y 20 se exponen los métodos y técnicas de prueba que  permiten desarrollar la estrategia. 17Pressman(383-410).indd   38317Pressman(383-410).indd   383 21/1/10   10:59:1821/1/10   10:59:18