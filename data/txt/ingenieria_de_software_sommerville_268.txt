9.3 ■ mantenimiento del software 251 rice un programa, no se debe agregar funcionalidad, sino que hay que concentrarse en la mejora del programa. por ende, se puede considerar la refactorización como el “manteni-miento preventivo” que reduce los problemas de cambios futuros. aunque la reingeniería y la refactorización tienen la intención de hacer el software más fácil de entender y cambiar, no son lo mismo. la reingeniería se lleva a cabo des-pués de haber mantenido un sistema durante cierto tiempo y, por consiguiente, los costos de mantenimiento aumentan. se usan herramientas automatizadas para procesar y some-ter a reingeniería un sistema heredado y así crear un nuevo sistema que sea más mante-nible. la refactorización es un proceso continuo de mejoramiento debido al proceso de desarrollo y evolución. tiene la intención de evitar la degradación de la estructura y el código que aumentan los costos y las dificultades por mantener un sistema. la refactorización es una parte inherente de los métodos ágiles, como lo es la pro-gramación extrema, porque dichos métodos se basan en el cambio. en consecuencia, la calidad del programa es proclive a degradarse rápidamente, de modo que los desarrolla-dores ágiles con frecuencia refactorizan sus programas para evitar tal degradación. el énfasis en las pruebas de regresión en los métodos ágiles reduce el riesgo de introducir nuevos errores a través de la refactorización. cualquier error que se introduzca debe ser detectable, ya que las pruebas anteriormente exitosas podrían fracasar. sin embargo, la refactorización no depende de otras “actividades ágiles” y se utiliza con cualquier enfo-que al desarrollo. fowler y sus colaboradores (1999) sugieren que existen situaciones estereotípicas (que se llaman “malos olores”), en las cuales el código de un programa es susceptible de mejorarse. los ejemplos de malos olores que pueden mejorarse mediante refactorización incluyen: 1. código duplicado el mismo de código muy similar puede incluirse en diferentes lugares de un programa. éste se descarta o se implementa como un solo método o función que se llame cuando se requiera. 2. métodos largos si un método es demasiado largo, debe rediseñarse en varios métodos más cortos. 3. enunciados de switch (case) con frecuencia éstos implican duplicación, donde el cambio (switch) depende del tipo de algún valor. los enunciados switch pueden dispersarse alrededor de un programa. en los lenguajes orientados a objetos, nor-malmente es posible usar un polimorfismo para lograr lo mismo. 4. aglomeración de datos las aglomeraciones de datos ocurren cuando el mismo grupo de objetos de datos (campos en clases, parámetros en métodos) vuelven a ocurrir en muchos lugares en un programa. generalmente pueden sustituirse con un objeto que encapsule todos los datos. 5. generalidad especulativa esto ocurre cuando los desarrolladores incluyen gene-ralidad en un programa, en caso de que se requiera en el futuro. por lo general, esto simplemente puede eliminarse. fowler, en su libro y sitio web, también sugiere algunas transformaciones primitivas de refactorización que pueden usarse de manera individual o en conjunto para lidiar con los malos olores. los ejemplos de dichas transformaciones incluyen el método extract (extraer), donde se eliminan duplicados y se crea un nuevo método; la expresión condi-cional consolidate (consolidar), donde se sustituye una secuencia de pruebas con una sola prueba; y el método pull up (subir), donde se sustituyen métodos similares en subclases con m09_sommerville_ingenieria_1ed_se_234-260.indd  251m09_sommerville_ingenieria_1ed_se_234-260.indd  251 3/18/11  4:52:25 pm3/18/11  4:52:25 pm