266 PARTE DOS  MODELADO  11.1 L AS REGLAS  DORADAS En su libro sobre el diseño de la interfaz, Theo Mandel [Man97] acuñó tres reglas doradas:  1. Dejar el control al usuario.  2. Reducir la carga de memoria del usuario.  3. Hacer que la interfaz sea consistente. En realidad, estas reglas doradas constituyen la base de un conjunto de principios de diseño de  la interfaz de usuario que guían este aspecto tan importante del diseño del software. 11.1.1  Dejar el control al usuario Durante una sesión para recabar los requerimientos de un nuevo y gran sistema de información, se preguntó a una usuaria clave acerca de los atributos de la interfaz gráfica basada en venta-nas. “Lo que realmente me gustaría”, respondió con solemnidad, “es un sistema que lea mi mente.  Que sepa lo que quiero hacer antes de que necesite hacerlo y que sea fácil para mí obtener eso que quiero. Eso es todo, sólo eso”. Mi primera reacción fue afirmar con la cabeza y sonreír, pero me detuve un momento. No  había absolutamente nada descabellado en la solicitud de la usuaria. Quería un sistema que reaccionara a sus necesidades y la ayudara para que las cosas se hicieran. Deseaba controlar la computadora, no que ésta la controlara a ella. La mayor parte de limitaciones y restricciones que impone un diseñador pretenden simplifi- car el modo de interacción. Pero, ¿para quién? Como diseñador, tal vez se sienta tentado a introducir restricciones y limitantes que simpli- fiquen la implantación de la interfaz. El resultado puede ser una interfaz fácil de construir, pero que sea frustrante utilizar. Mandel [Man97] define cierto número de principios de diseño que permiten que el usuario tenga el control: Definir modos de interacción de manera que no se obligue al usuario a realizar accio- nes innecesarias o no deseadas.   Un modo de interacción es el estado actual de la interfaz.  Por ejemplo, si en el menú de un procesador de textos se selecciona revisar ortogr afía, el soft- ware pasa al modo de revisión de la ortografía. No hay razón para obligar al usuario a perma-necer en este modo si acaso desea hacer una pequeña edición del texto. El usuario debe poder entrar y salir del modo con poco o ningún esfuerzo. Dar una interacción flexible.  Debido a que diferentes usuarios tienen distintas preferencias  para la interacción, debe darse la posibilidad de elegir . Por ejemplo, el software debe permitir  que el usuario interactúe por medio de comandos introducidos con el teclado, el ratón, una pluma digitalizadora, una pantalla sensible al tacto o un mecanismo de reconocimiento de voz. Pero no todas las acciones son accesibles a través de cualquier mecanismo de interacción. Por ejemplo, piénsese en la dificultad de usar comandos del teclado (o entradas con la voz) para hacer un dibujo complicado.nismos de interacción, llamados de manera colectiva interfaz gráfica del usuario (GUI), elimina- ron algunos de los problemas más notables asociados con las interfaces humanas. Pero aun en  un “mundo Windows”, todos hemos encontrado interfaces de usuario que son difíciles de apren-der y usar, que son confusas y van contra la intuición, que no perdonan y, en muchos casos, resultan frustrantes por completo. No obstante, alguien dedicó tiempo y energía a la elaboración de estas interfaces, y no es probable que su constructor haya creado dichos problemas con toda intención. Cita: “Es mejor diseñar la experiencia  del usuario que corregirla.” Jon Meads 11Pressman(265-294).indd   26611Pressman(265-294).indd   266 14/1/10   16:13:4314/1/10   16:13:43