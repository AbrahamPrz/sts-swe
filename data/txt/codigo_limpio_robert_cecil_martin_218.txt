listado 11-4 archivo de configuración de spring 2.x <beans> … <bean id=“appdatasource” class=“org.apache.commons.dbcp.basicdatasource” destroy-method=“close” p:driverclassname=“com.mysql.jdbc.driver” p:url=“jdbc:mysql://localhost:3306/mydb” p:username=“me”/> <bean id=“bankdataaccessobject” class=“com.example.banking.persistence.bankdataaccessobject” p:datasource-ref=“appdatasource”/> <bean id=“bank” class=“com.example.banking.model.bank” p:dataaccessobject-ref=“bankdataaccessobject”/> … </beans> cada bean es como una parte de una muñeca rusa anidada, con un objeto de domino de un proxy bank (envuelto) por un objeto de acceso a datos ( data accessor object , dao), que también se procesa a través de un proxy por medio de un origen de datos de controlador jdbc (véase la figura 11.3). figura 11.3. la “muñeca rusa” de elementos de decoración. el cliente cree que invoca getaccounts() en un objeto bank , pero en realidad se comunica con el objeto decorator [63] más externo de un grupo, un objeto que amplía el comportamiento básico del pojo bank . podríamos añadir otros objetos de decoración para transacciones, almacenamiento en caché y demás. en la aplicación, bastan unas líneas para solicitar al contenedor de id los objetos de nivel superior del sistema, como se especifica en el archivo xml. 219