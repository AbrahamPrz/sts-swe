CAPÍTULO 25  MÉTRICAS DE PROCESO Y DE PROYECTO 579 vidad, lo que hace que las comparaciones entre “manzanas y naranjas” se malinterpreten con  facilidad. Es cierto que los puntos de función y las métricas basadas en LOC son predictores relativa- mente precisos del esfuerzo y del costo en el desarrollo del software. Sin embargo, si se van a usar LOC y PF para estimación (capítulo 26), debe establecerse una línea de referencia de in-formación. Dentro del contexto de las métricas de proceso y proyecto, la preocupación debe estar cen- trada principalmente en la productividad y la calidad, medidas de “salida” del desarrollo del software como función del esfuerzo y el tiempo aplicados y medidas de “aptitud para el uso” de los productos operativos que se producen. Con propósitos de mejorar el proceso y la planifica-ción del proyecto, su interés es histórico. ¿Cuál fue la productividad en el desarrollo del software en proyectos anteriores? ¿Cuál fue la calidad del software que se produjo? ¿Cómo pueden extra-polarse al presente los datos de productividad y calidad anteriores? ¿Cómo puede ayudar a mejorar el proceso y la planificación de nuevos proyectos con más precisión? 25.2.4  Métricas orientadas a objeto Las métricas de proyecto de software convencional (LOC o PF) pueden usarse para estimar pro-yectos de software orientados a objeto. Sin embargo, dichas métricas no proporcionan sufi-ciente granularidad para los ajustes de calendario y esfuerzo que se requieren conforme se re-pite a través de un proceso evolutivo o incremental. Lorenz y Kidd [Lor94] sugieren el siguiente conjunto de métricas para proyectos OO: Número de guiones de escenario.  Un guión de escenario (análogo a los casos de uso estu- diados a través de la parte 2 de este libro) es una secuencia detallada de pasos que describen la  interacción entre el usuario y la aplicación. Cada guión se organiza en tripletas de la forma {iniciador  , acción, participante} donde iniciador es el objeto que solicita cierto servicio (que inicia un mensaje), acción es el  resultado de la solicitud y participante es el objeto servidor que satisface la solicitud. El número  de guiones de escenario se relaciona directamente con el tamaño de la aplicación y con el nú-mero de casos de prueba que deben desarrollarse para ejercitar el sistema una vez construido. Número de clases clave.  Las clases clave son los “componentes enormemente independien- tes” [Lor94] que se definen tempranamente en el análisis orientado a objeto (capítulo 6). 5 Puesto  que las clases clave son centrales en el dominio del problema, el número de tales clases es un indicio de la cantidad de esfuerzo requerido para desarrollar el software y también de la cantidad potencial de reuso por aplicar durante el desarrollo del sistema. Número de clases de apoyo.  Las clases de apo  yo se requieren para implementar el sistema,  pero no se relacionan de inmediato con el dominio del problema. Los ejemplos pueden ser clases de interfaz de usuario (GUI), clases de acceso y manipulación de base de datos y clases de cálcu lo.  Además, es posible desarrollar clases de apoyo para cada una de las clases clave. Las clases de apoyo se definen de manera iterativa a lo largo de un proceso evolutivo. El número de clases de apoyo es un indicio de la cantidad de esfuerzo requerido para desarrollar el software y tam-bién de la potencial cantidad de reuso que se va a aplicar durante el desarrollo del sistema. Número promedio de clases de apoyo por clase clave.  En general, las clases clave se  conocen tempranamente en el proyecto. Las clases de apoyo se definen a todo lo largo del mismo. Si el número promedio de clases de apoyo por clase clave se conoce para un dominio de problema determinado, la estimación (con base en el número total de clases) se simplificará  5 En la parte 2 de este libro, se hace referencia a clases clave como clases de análisis.No es raro para guiones de escenario  múltiple mencionar la misma funcionalidad u objetos de datos. Por tanto, tenga cuidado cuando use conteo de guión. Muchos guiones en ocasiones pueden reducirse a una sola clase o conjunto de código.CONSEJO Las clases pueden variar en tamaño y complejidad. Por tanto, vale la pena considerar la clasificación del conteo de clase por tamaño y complejidad.CONSEJO 25Pressman(571-592).indd   57925Pressman(571-592).indd   579 19/1/10   23:39:5519/1/10   23:39:55