creatividad, han sido capaces de crear sistemas satisfactorios a partir de las sensaciones de sus clientes. En realidad, si la disciplina de la especificación de requisitos nos ha enseñado algo es que los requisitos bien especificados son tan formales como el código y que pueden actuar como pruebas ejecutables de dicho código. Recuerde que el código es básicamente el lenguaje en el que expresamos los requisitos en última instancia. Podemos crear lenguajes que se asemejen a dichos requisitos. Podemos crear herramientas que nos permitan analizar y combinar dichos requisitos en estructuras formales, pero nunca eliminaremos la precisión necesaria; por ello, siempre habrá código. Código Incorrecto Recientemente leí el prólogo del libro Implementation Pattern [1]  de Kent Beck, donde afirmaba que «…este libro se basa en una frágil premisa: que el código correcto es relevante…». ¿Una  frágil  premisa? En absoluto. Considero que es una de las más robustas, admitidas e importantes de nuestro sector (y creo que Kent lo sabe). Sabemos que el código correcto es relevante porque durante mucho tiempo hemos tenido que sufrir su ausencia. Sé de una empresa que, a finales de la década de 1980, creó una  magnífica aplicación, muy popular y que muchos profesionales compraron y utilizaron. Pero los ciclos de publicación empezaron a distanciarse. No se corrigieron los errores entre una versión y la siguiente. Crecieron los tiempos de carga y aumentaron los fallos. Todavía recuerdo el día en que apagué el producto y nunca más lo volví a usar. Poco después, la empresa desapareció. 23