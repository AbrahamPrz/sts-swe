Sensor  le importa si se usan genéricos o no. Esa opción se ha convertido (y siempre debería serlo) en un detalle de implementación. public class Sensors { private Map sensors = new HashMap(); public Sensor getById(String id) { return (Sensor) sensors.get(id); } //corte } La interfaz en el límite  (Map)  está oculta. Ha conseguido evolucionar sin apenas impacto en el resto de la aplicación. El uso de genéricos ya no es un problema ya que la conversión y la administración de tipos se procesa dentro de la clase  Sensors . Esta interfaz también se ha ajustado y limitado a las necesidades de la aplicación. Genera código más fácil de entender y con menor probabilidad de errores. La clase  Sensors  puede aplicar las reglas empresariales y de diseño. No sugerimos que se encapsulen de esta forma todos los usos de Map, sino que no se pase  Map  (ni otras interfaces en el límite) por el sistema. Si usa una interfaz de límite como  Map , manténgala dentro de la clase o la familia de clases en la que se use. Evite devolverla o aceptarla como argumento de API públicas. Explorar y aprender límites El código de terceros nos permite obtener mayor funcionalidad en menos tiempo. ¿Por dónde empezamos cuando queremos utilizar un paquete de terceros? Nuestra labor no es probar el código, pero sí crear pruebas para el código de terceros que utilicemos. Imagine que no es evidente cómo usar una biblioteca de terceros. Podríamos perder uno o varios días en leer la documentación y decidir cómo usarla. Tras ello, podríamos escribir el código para usar el código de terceros y comprobar si se comporta de la forma esperada. No deberíamos sorprendernos por tener que realizar extensas sesiones de depuración intentando localizar errores en nuestro código o en el suyo. 162