510 PARTE TRES  ADMINISTRACIÓN DE LA CALIDAD Por ejemplo, un DesignSpecification es un objeto agregado. Conceptualmente, puede vérsele  como una lista nominada (identificada) de punteros que especifican objetos agregados, como ArchitecturalModel y DataModel, y objetos básicos, como ComponentN y UMLClass- DiagramN. Cada objeto tiene un conjunto de características distintivas que lo identifican de manera  única: un nombre, una descripción, una lista de recursos y una “realización”. El nombre del objeto es una cadena de caracteres que identifica el objeto sin ambigüedades. La descripción del objeto es una lista de ítems de datos que identifican el tipo ICS (por ejemplo, elemento de modelo, programa, datos) representado por el objeto, un identificador de proyecto e información de cambio y/o versión. Los recursos son “entidades que se proporcionan, procesan, referencian o que de algún modo el objeto las requiere” [Cho89]. Por ejemplo, los tipos de datos, las funcio-nes específicas o incluso los nombres de variable pueden considerarse como recursos del ob-jeto. La realización es un puntero hacia la “unidad de texto” para un objeto básico, y nulo para un objeto agregado. La identificación del objeto de configuración también puede considerar las relaciones que  existen entre los objetos nominados. Por ejemplo, al usar la notación simple Diagrama clase <parte de> modelo requerimientos; Modelo requerimientos <parte de> especificación requerimientos; se puede crear una jerarquía de ICS. En muchos casos, los objetos se interrelacionan a través de ramas de la jerarquía de objetos.  Estas relaciones transestructurales pueden representarse en la forma siguiente: ModeloDatos <interrelacionado> ModeloFlujoDatosModeloDatos <interrelacionado> CasoPruebaClaseM En el primer caso, la interrelación se efectúa entre un objeto compuesto, mientras que la se- gunda relación es entre un objeto agregado (ModeloDatos) y un objeto básico ( CasoPrueba- ClaseM). El esquema de identificación para objetos de software debe reconocer que los objetos evolu- cionan a lo largo del proceso de software. Antes de que un objeto se convierta en línea de refe-rencia, puede cambiar muchas veces; incluso, después de establecer una línea de referencia, los cambios pueden ser bastante frecuentes. 22.3.2  Control de versión El control de versión combina procedimientos y herramientas para administrar diferentes ver-siones de objetos de configuración que se crean durante el proceso de software. Un sistema de control de versión implementa o se integra directamente con cuatro grandes capacidades: 1) una base de datos de proyecto (repositorio) que almacena todos los objetos de configuración relevantes, 2) una capacidad de administración de versión que almacena todas las versiones de  un objeto de configuración (o que permite la construcción de cualquier versión usando diferen-cias de las versiones pasadas) y 3) una facilidad para elaboración  que le permite recopilar to- dos los objetos de configuración relevantes y construir una versión específica del software. Además, los sistemas de control de versión y de control de cambio con frecuencia implementan una capacidad de rastreador de conflictos (también llamado rastreador de errores) que permite al  equipo registrar y rastrear el estado de todos los conflictos sobresalientes asociados con cada objeto de configuración. Algunos sistemas de control de versión establecen un conjunto de cambio, una colección de  todos los cambios (en relación con cierta configuración de referencia) que se requieren para crear una versión específica del software. Dart [Dar91] observa que un conjunto de cambio PUNTO CLAVE Las interrelaciones establecidas por  los objetos de configuración le permiten valorar el impacto del cambio. Incluso si la base de datos del proyecto proporciona la capacidad para establecer dichas relaciones, éstas consumen mucho tiempo para su establecimiento y son difíciles de mantener actualizadas. Aunque son muy útiles para el análisis de impacto, no son esenciales para la administración de cambio global.CONSEJO 22Pressman(501-525).indd   51022Pressman(501-525).indd   510 19/1/10   17:12:0919/1/10   17:12:09