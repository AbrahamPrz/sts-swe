se detiene y piensa en las posibles opciones. oh, vuelve al inicio del módulo para comprobar la inicialización de una variable. ahora vuelve a bajar y comienza a escribir. vaya, borra lo que había escrito. vuelve a escribirlo. lo vuelve a borrar. escribe algo diferente pero también lo borra. se desplaza a otra función que invoca la función que está modificando para comprobar cómo se invoca. vuelve a subir y escribe el mismo código que acaba de borrar. se detiene. vuelve a borrar el código. abre otra ventana y examina las subclases. ¿se ha reemplazado esa función? … se hace una idea. en realidad, la proporción entre tiempo dedicado a leer frente a tiempo dedicado a escribir es de más de 10:1. constantemente tenemos que leer código antiguo como parte del esfuerzo de crear código nuevo. al ser una proporción tan elevada, queremos que la lectura del código sea sencilla, aunque eso complique su creación. evidentemente, no se puede escribir código sin leerlo, de modo que si es más fácil de leer será más fácil de escribir . es una lógica sin escapatoria. no se puede escribir código si no se puede leer el código circundante. el código que intente escribir hoy será fácil o difícil de escribir en función de lo fácil o difícil de leer que sea el código circundante. si quiere avanzar rápidamente, terminar cuanto antes y que su código sea fácil de escribir, haga que sea fácil de leer. la regla del boy scout 38