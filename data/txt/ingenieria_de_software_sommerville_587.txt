570  Capítulo 21 ■ Ingeniería de software orientada a aspectos  El enredo (tangling) ocurre cuando un módulo en un sistema incluye código que  implementa diferentes requerimientos de sistema. El ejemplo de la figura 21.2, que es una implementación simplificada de parte del código para un sistema de buffer limitado, ilustra este fenómeno. La figura 21.2 es una implementación de la operación put (poner) que añade un ítem al buffer. Sin embargo, si el buffer está lleno, debe esperar hasta que una correspondiente operación get (conseguir) elimine un ítem del buffer. Los detalles no tienen importancia; en esencia, se usan las llamadas wait() y notify() para sincronizar las operaciones put y get. El código que soporta la principal competencia (en este caso, poner un registro en el buffer) está enredado con código que implementa sincronización. El código de sincronización, que se asocia con la competencia secundaria de asegurar exclusión mutua, debe incluirse en todos los métodos que acceden al buffer compartido. El código asociado con la competencia de sincronización se muestra en la figura 21.2. El fenómeno relacionado de dispersión (scattering) ocurre cuando la implementación de una competencia individual (un requerimiento lógico o un conjunto de requerimien-tos) se dispersa a través de varios componentes del programa. Probablemente esto ocu-rre cuando se implementan requerimientos relacionados con competencias funcionales secundarias o competencias de política. Por ejemplo, suponga que un sistema de gestión de registros médicos, como el MHC-PMS, tiene algunos componentes que se ocupan de gestionar la información del personal, los medicamentos, las consultas, las imágenes médicas, los diagnósticos y tratamien-tos. Es decir, implementan la competencia central del sistema: mantener registros de los pacientes. El sistema puede configurarse para diferentes tipos de clínicas al seleccionar los componentes que proporcionan la funcionalidad necesaria para la clínica. Sin embargo, suponga que existe también una importante competencia secundaria que es el mantenimiento de información estadística; el proveedor de código de salud quiere registrar detalles de cuántos pacientes se admiten y se dan de alta cada mes, cuántos pacientes mueren, qué medicamentos se prescriben, las razones de las consultas, etcétera. Dichos requerimientos tienen que implementarse agregando código que vuelva anóni-mos los datos (para mantener la privacidad de los pacientes) y los escriba en una base de datos estadística. Un componente estadístico procesa los datos estadísticos y genera los reportes que se requieren.Figura 21.2 Enredos  de código de gestión  y sincronización de buffersynchronized void put (SensorRecord rec ) { // Comprueba que haya espacio en el buffer; espera si no if ( numberOfEntries == bufsize) wait () ; // Agrega registro al final del bufferstore [back] = new SensorRecord (rec.sensorId, rec.sensorVal) ; back = back + 1 ;// Si está al final del buffer, la siguiente entrada está al principioif (back == bufsize) back = 0 ; numberOfEntries = numberOfEntries + 1 ;// indica que el buffer está disponible notify () ; } // put  M21_SOMMERVILLE_INGENIERIA_1ED_SE_565-590.indd   570M21_SOMMERVILLE_INGENIERIA_1ED_SE_565-590.indd   570 3/18/11   5:38:58 PM3/18/11   5:38:58 PM