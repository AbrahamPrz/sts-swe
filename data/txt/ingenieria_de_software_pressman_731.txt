700 parte cinco temas avanzados de la demanda impulsan el mercado. en cualquier caso, ¡un ciclo de innovación y demanda avanza de manera que en ocasiones hace difícil determinar cuál viene primero! finalmente, la cultura humana en sí impacta la dirección de la ingeniería del software. toda generación establece su propia huella sobre la cultura y las próximas no serán diferentes. faith popcorn [pop08], un consultor bien conocido que se especializa en tendencias culturales, las caracteriza en la forma siguiente: “nuestras tendencias no son fruslerías. ellas perduran, evolu-cionan. representan fuerzas subyacentes, causas primeras, necesidades humanas básicas, ac-titudes, aspiraciones. nos ayudan a navegar por el mundo, a comprender lo que sucede y por qué, y nos preparan para lo que está por venir”. un análisis detallado de la manera en la que las modernas tendencias culturales tendrán un impacto sobre la ingeniería del software se deja para quienes se especializan en las “ciencias blandas”. 31.3.1 administración de la complejidad cuando se escribió la primera edición de este libro (1982), no existían los productos digitales al consumidor como se conocen en la actualidad, y los sistemas basados en mainframe que con-tenían un millón de líneas de código fuente (loc) se consideraban muy grandes. hoy no es raro que pequeños dispositivos digitales abarquen entre 60 000 y 200 000 líneas de software a la medida, acoplado con algunos millones de loc para características de sistema operativo. los modernos sistemas basados en computadora que contienen de 10 a 50 millones de líneas de código no son raros. 4 en el futuro relativamente cercano, comenzarán a surgir sistemas5 que requieran más de mil millones de loc.6 ¡piense en ello por un momento!considere las interfaces para un sistema de mil millones de loc, tanto en el mundo exterior como en otros sistemas interoperables, para la internet (o su sucesor) y para los millones de componentes internos que deben trabajar en conjunto para hacer que opere exitosamente este monstruo de computación. ¿existe alguna forma confiable de garantizar que todas estas co-nexiones permitirán que la información fluya de manera adecuada? considere el proyecto en sí. ¿cómo se administra el flujo de trabajo y se rastrea el progreso? ¿los enfoques convencionales escalarán hacia arriba en órdenes de magnitud? considere el número de personas (y sus ubicaciones) que harán el trabajo, la coordinación del personal y la tecnología, el imparable flujo de cambios, la probabilidad de una multiplata-forma, en torno de un sistema multioperativo. ¿existe alguna forma de administrar y coordinar al personal que trabaje en un proyecto monstruoso? considere el desafío de ingeniería. ¿cómo pueden analizarse decenas de miles de requeri- mientos, limitaciones y restricciones de manera que se garantice que inconsistencia y ambigüe-dad, omisiones y errores categóricos se descubran y corrijan? ¿cómo puede crearse una arqui-tectura de diseño que sea suficientemente robusta para manejar un sistema de este tamaño? ¿cómo pueden los ingenieros del software establecer un sistema de gestión del cambio que tendrá que manipular cientos de miles de cambios? considere el reto de asegurar la calidad. ¿cómo puede realizarse la verificación y la valida- ción en forma significativa? ¿cómo se pone a prueba un sistema de mil millones de loc? en los primeros días, los ingenieros de software intentaban administrar la complejidad en lo que sólo puede describirse como una forma ad hoc. en la actualidad, se usan procesos, métodos 4 por ejemplo, los modernos sistemas operativos pc (como linux, macos y windows) tienen entre 30 y 60 millones de loc. el software de sistema operativo para dispositivos móviles puede superar 2 millones de loc. 5 en realidad, este “sistema” será un sistema de sistemas: cientos de aplicaciones interoperativas que trabajen en conjunto para lograr algún objetivo global. 6 no todos los sistemas complejos son grandes. una aplicación relativamente pequeña (por ejemplo, menos de 100 000 loc) todavía puede ser excesivamente compleja.cita: “no hay razón por la que alguien quiera una computado-ra en su casa.” ken olson, presidente y fundador de digital equipment corp., 1977 31pressman(695-716).indd  70031pressman(695-716).indd  700 26/1/10  17:33:3826/1/10  17:33:38