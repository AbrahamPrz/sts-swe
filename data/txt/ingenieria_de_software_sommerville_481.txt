464  Capítulo 17 ■ Ingeniería de software basada en componentes en términos de productividad. También existen ganancias de calidad, porque un com- ponente de reutilización debe ser más confiable, y hay ganancias de tiempo de salida al mercado. Se trata de un aumento en los rendimientos que se acrecientan al implementar el software más rápidamente. Mili y sus colaboradores muestran varias fórmulas para estimar dichas ganancias, como el modelo COCOMO que se estudia en el capítulo 23 (Boehm et al., 2000). Sin embargo, los parámetros de tales fórmulas son difíciles de  evaluar con precisión, y las fórmulas deben adaptarse a circunstancias locales, lo que las hace más difíciles de usar. Es posible que pocos administradores de proyecto de software usen estos modelos para estimar el rendimiento sobre la inversión a partir de la reutiliza-ción de componentes. Desde luego, si un componente es susceptible de reutilización, o no, depende de su dominio de aplicación y su funcionalidad. Conforme se agrega generalidad a un com-ponente, aumenta la probabilidad de su reutilización. No obstante, esto por lo regular significa que el componente tiene más operaciones y más complejidades, las cuales lo hacen difícil de entender y emplear. Sin embargo, esto es un intercambio inevitable entre la reutilización y el uso de un componente. Para hacer reutilizable un componente, usted deberá proporcionar un conjunto de interfaces genéricas con operaciones que incluyan todas las formas que el componente podría usar. Hacer un componente utilizable significa ofrecer una interfaz simple y mínima, que sea fácil de entender. La reutilización agrega complejidad y, por eso, se dificulta el hecho de entender un componente. Por consiguiente, es más difícil decidir cuándo y cómo reutilizar dicho componente. En consecuencia, cuando diseñe un componente de reutilización, debe encontrar un compromiso entre la generalidad y comprensibilidad. Una fuente potencial de componentes está constituida por los sistemas heredados existentes. Como se estudió en el capítulo 9, se trata de sistemas que cumplen una impor-tante función empresarial, pero que están escritos con tecnologías de software obsoletas. Por ello, tal vez sea difícil usarlos con sistemas nuevos. Sin embargo, si estos sistemas antiguos se convierten a componentes, su funcionalidad puede reutilizarse en nuevas aplicaciones. Desde luego, estos sistemas heredados no tienen normalmente interfaces “requiere” y “proporciona” bien definidas. Para hacer reutilizables dichos componentes, debe crear una envoltura (wrapper) que defina las interfaces de componente. La envoltura oculta la complejidad del código subyacente y ofrece una interfaz para que los componentes externos accedan a los servicios que se brindan. Aunque esta envoltura es una pieza de software bastante compleja, con frecuencia el costo de desarrollarlo es mucho menor que el costo de volver a implementar el sistema heredado. En el capítulo 19 se examina con más detalle este enfoque, y se explica cómo puede accederse a las características del sistema heredado a través de servicios. Una vez que se ha desarrollado y probado un componente o servicio de reutilización, entonces debe gestionarse para una reutilización en el futuro. La gestión implica decidir cómo clasificar el componente de forma que pueda descubrirse, hacer al componente dis-ponible ya sea en un repositorio o como servicio, mantener información acerca de su uso, y hacer un seguimiento de las diferentes versiones del componente. Si el componente es de fuente abierta, se puede hacer disponible en un repositorio público como Sourceforge. Si se pretende utilizarlo en una compañía, entonces se puede usar un sistema de depósito interno. Una compañía con un programa de reutilización puede realizar alguna forma de cer-tificación de componente antes de que éste se encuentre disponible para su reutilización.  M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   464M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   464 3/18/11   5:03:05 PM3/18/11   5:03:05 PM