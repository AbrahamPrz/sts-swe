capítulo 25 métricas de proceso y de proyecto 591 25.5. el equipo a encontró 342 errores durante el proceso de ingeniería del software antes de la liberación. el equipo b encontró 184 errores. ¿qué medidas adicionales tendrían que realizarse a los proyectos a y b para determinar cuál de los equipos eliminó errores de manera más eficiente? ¿qué métricas propondría para ayudar a realizar esta determinación? ¿qué datos históricos pueden ser útiles? 25.6. presente un argumento contra las líneas de código como medida para la productividad del software. ¿su caso se sostendría cuando se consideren decenas o cientos de proyectos? 25.7. calcule el valor de punto de función para un proyecto con las siguientes características de dominio de información: número de entradas de usuario: 32número de salidas de usuario: 60número de consultas de usuario: 24número de archivos: 8número de interfaces externas: 2 suponga que todos los valores de ajuste de complejidad son promedios. use el algoritmo mencionado en el capítulo 23. 25.8. con la tabla que se presenta en la sección 25.2.3, plantee un argumento contra el uso de lenguaje ensamblador con base en la funcionalidad que entrega por enunciado de código. nuevamente con la tabla, analice por qué c++ representaría una mejor alternativa que c. 25.9. el software que se usa para controlar una fotocopiadora requiere 32 000 líneas de c y 4 200 líneas de smalltalk. estime el número de puntos de función para el software dentro de la fotocopiadora. 25.10. un equipo de ingeniería web construye una webapp de comercio electrónico que contiene 145 pági- nas individuales. de éstas, 65 son dinámicas, es decir, se generan internamente con base en entrada del usuario final. ¿cuál es el índice de personalización para esta aplicación? 25.11. una webapp y su entorno de apoyo no están completamente fortificados contra ataques. los inge- nieros web estiman que la probabilidad de repeler un ataque es de sólo 30 por ciento. el sistema no contiene información sensible o controvertida, de modo que la probabilidad de amenaza es de 25 por ciento. ¿cuál es la integridad de la webapp? 25.12. en la conclusión de un proyecto, se determinó que se encontraron 30 errores durante la actividad de modelado y 12 durante la actividad de construcción, que fueron rastreables en errores que no se descubrie-ron en la actividad de modelado. ¿cuál es la erd para la actividad de modelado? 25.13. un equipo de software entrega un incremento de software a los usuarios finales. éstos descubren ocho defectos durante el primer mes de uso. antes de la liberación, el equipo de software encontró 242 errores durante las revisiones técnicas formales y todas las tareas de prueba. ¿cuál es la erd global para el proyecto después de un mes de uso?  lecturas y fuentes de información adicionales el mejoramiento del proceso de software (mps) recibió una cantidad significativa de atención durante las dos décadas pasadas. dado que la medición y las métricas de software son clave para el mejoramiento exitoso del proceso de software, muchos libros acerca de mps también estudian métricas. rico ( roi of software process improvement, j. ross publishing, 2004) ofrece un análisis a profundidad del mps y de las métricas que pueden ayudar a una organización a lograrlo. ebert et al. ( best practices in software measurement, springer, 2004) abordan el uso de medición dentro del contexto de estándares iso y cmmi. kan (metrics and models in software quality engineering, 2a. ed., addison-wesley, 2002) presenta una colección de métricas relevantes. ebert y dumke (software measurement, springer, 2007) proporcionan un tratamiento útil de medición y métrica para proyectos it. mcgarry et al. ( practical software measurement, addison-wesley, 2001) presentan consejos profundos para valorar el proceso de software. una valiosa colección de ensayos fueron editados por haug y colegas (software process improvement: metrics, measurement, and process modeling, springer- verlag, 2001). florac y carlton ( measuring the software process, addison-wesley, 1999) y fenton y pfleeger (software metrics: a rigorous and practical approach, revised, brooks/cole publishers, 1998) estudian cómo pueden usarse las métricas del software para proporcionar los indicadores necesarios a fin de mejorar el proceso de software. 25pressman(571-592).indd  59125pressman(571-592).indd  591 19/1/10  23:39:5719/1/10  23:39:57