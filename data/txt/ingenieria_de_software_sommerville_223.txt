206 capítulo 8 ■ pruebas de software las pruebas intentan demostrar que un programa hace lo que se intenta que haga, así como descubrir defectos en el programa antes de usarlo. al probar el software, se ejecuta un programa con datos artificiales. hay que verificar los resultados de la prueba que se opera para buscar errores, anomalías o información de atributos no funcionales del programa. el proceso de prueba tiene dos metas distintas: 1. demostrar al desarrollador y al cliente que el software cumple con los requerimien- tos. para el software personalizado, esto significa que en el documento de reque- rimientos debe haber, por lo menos, una prueba por cada requerimiento. para los productos de software genérico, esto quiere decir que tiene que haber pruebas para todas las características del sistema, junto con combinaciones de dichas característi-cas que se incorporarán en la liberación del producto. 2. encontrar situaciones donde el comportamiento del software sea incorrecto, inde-seable o no esté de acuerdo con su especificación. tales situaciones son consecuen-cia de defectos del software. la prueba de defectos tiene la finalidad de erradicar el comportamiento indeseable del sistema, como caídas del sistema, interacciones indeseadas con otros sistemas, cálculos incorrectos y corrupción de datos. la primera meta conduce a la prueba de validación; en ella, se espera que el sistema se desempeñe de manera correcta mediante un conjunto dado de casos de prueba, que refleje el uso previsto del sistema. la segunda meta se orienta a pruebas de defectos, donde los casos de prueba se diseñan para presentar los defectos. los casos de prueba en las pruebas de defecto pueden ser deliberadamente confusos y no necesitan expresar cómo se usa normalmente el sistema. desde luego, no hay frontera definida entre estos dos enfoques de pruebas. durante las pruebas de validación, usted descubrirá defectos en el sistema; en tanto que durante las pruebas de defecto algunas de las pruebas demostra-rán que el programa cumple con sus requerimientos. el diagrama de la figura 8.1 ayuda a explicar las diferencias entre las pruebas de vali-dación y de defecto. piense en el sistema que va a probar como si fuera una caja negra. el sistema acepta entradas desde algún conjunto de entradas i y genera salidas en un con-junto de salidas o. algunas de las salidas serán erróneas. son las salidas en el conjunto o e que el sistema genera en respuesta a las entradas en el conjunto i e. la prioridad en las pruebas de defecto es encontrar dichas entradas en el conjunto i e porque ellas revelan problemas con el sistema. las pruebas de validación involucran pruebas con entradas correctas que están fuera de i e y estimulan al sistema para generar las salidas correc- tas previstas. las pruebas no pueden demostrar que el software esté exento de defectos o que se comportará como se especifica en cualquier circunstancia. siempre es posible que una prueba que usted pase por alto descubra más problemas con el sistema. como afirma de forma elocuente edsger dijkstra, uno de los primeros contribuyentes al desarrollo de la ingeniería de software (dijkstra et al., 1972): las pruebas pueden mostrar sólo la presencia de errores, mas no su ausencia. las pruebas se consideran parte de un proceso más amplio de verificación y validación (v&v) del software. aunque ambas no son lo mismo, se confunden con frecuencia. barry m08_sommerville_ingenieria_1ed_se_205-233.indd  206m08_sommerville_ingenieria_1ed_se_205-233.indd  206 3/18/11  5:39:58 pm3/18/11  5:39:58 pm