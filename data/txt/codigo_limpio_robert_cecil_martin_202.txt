podemos crear una prueba que espere un valor de cartera total de 500 dólares: public class PortfolioTest { private FixedStockExchangeStub exchange; private Portfolio portfolio; @Before protected void setUp() throws Exception { exchange = new FixedStockExchangeStub(); exchange.fix(“MSFT”, 100); portfolio = new Portfolio(exchange); } @Test public void GivenFiveMSFTTotalShouldBe500() throws Exception { portfolio.add(5, “MSFT”); Assert.assertEquals(500, portfolio.value()); } } Si diseccionamos un sistema para poder probarlo de esta forma, resultará más flexible y se podrá reutilizar. La ausencia de conexiones significa que los elementos del sistema se aíslan entre ellos y de otros cambios. Este aislamiento hace que comprendamos mejor los elementos del sistema. Al minimizar las conexiones de esta forma, nuestras clases cumplen otro principio de diseño:  Dependency Inversion Principle  (DIP) o Principio de inversión de dependencias [49] . Básicamente afirma que nuestras clases deben depender de abstracciones, no de detalles concretos. En lugar de depender de los detalles de implementación de la clase TokyoStockExchange , nuestra clase Portfolio depende de la interfaz StockExchange , que representa el concepto abstracto de solicitar el precio actual de una acción. Esta abstracción aísla todos los datos concretos de la obtención de dicho precio, incluyendo de dónde se obtiene. Bibliografía [RDD] :  Object Design: Roles, Responsibilities, and Collaborations , Rebecca Wirfs-Brock et al., Addison-Wesley, 2002. [PPP] :  Agile Software Development: Principles, Patterns, and Practices , Robert C. Martin, Prentice Hall, 2002. 203