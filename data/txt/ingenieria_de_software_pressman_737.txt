706 parte cinco temas avanzados contra de las herramientas y de la automatización, pero, en muchas instancias, la psa no cumple su promesa (vea la sección 31.2). para ser más efectiva, debe enfocarse en actividades sombrilla (capítulo 2), los elementos más estables del proceso de software. 4. se colocar á mayor énfasis en el rendimiento sobre la inversión de las actividades mps . en el capítulo 30 aprendió que el rendimiento sobre la inversión (rsi) puede definirse como: rsi /h11005 /h20858(beneficios) /h11002 /h20858(costos) /h20858(costos) /h11003 100%  a la fecha, las organizaciones de software han luchado por delinear con claridad los “beneficios” en forma cuantitativa. puede argumentarse [con02] que “por tanto, necesi- tamos un modelo estandarizado con valor de mercado, como el que se utiliza en co- como ii (vea el capítulo 26) para explicar las iniciativas de mejoramiento del software”. 5. conforme pasa el tiempo, la com unidad del software puede llegar a entender que la expe- riencia en sociología y antropología puede tener tanto o más que ver con el éxito de mps que otras disciplinas más técnicas. sobre todo, mps cambia la cultura de la organización, y el cambio cultural involucra individuos y grupos de personas. conradi y fuggetta [con02] anotan correctamente que “los desarrolladores de software son trabajadores del conocimiento. tienden a responder negativamente a los dictados de esferas supe-riores acerca de cómo trabajar o cambiar los procesos”. es posible aprender mucho al examinar la sociología de los grupos para entender mejor las formas efectivas de intro- ducir el cambio. 6. nuevos modos de aprendizaje pueden facilitar la tr ansición hacia un proceso de software más efectivo. en este contexto, “aprendizaje” implica aprendizaje de éxitos y errores. una organización de software que recopila métricas (capítulos 23 y 25) se permite en- tender cómo los elementos de un proceso afectan la calidad del producto final. 31.4.2 el gran desafío existe una tendencia que es innegable: los sistemas basados en software sin duda se volverán más gr andes y más complejos conforme pase el tiempo. es la ingeniería de estos grandes sistemas complejos, sin importar la plataforma de entrega o el dominio de aplicación, la que impone el “gran desafío” [bro06] a los ingenieros del software. manfred broy [bro06] sugiere que los inge-nieros del software pueden enfrentar el “intimidante reto de desarrollar sistemas de software complejos” al crear nuevos enfoques para entender los modelos de sistema y usar dichos mo-delos como base para la construcción de software de próxima generación de alta calidad. conforme la comunidad de ingeniería del software desarrolla nuevos enfoques impulsados por modelo (que se estudian más adelante en esta sección) para la representación de los reque-rimientos del sistema y su diseño, pueden abordarse las siguientes características [bro06]: • multifuncionalidad: conforme los dispositivos digitales evolucionan hacia su segunda y tercera generaciones, comienzan a entregar un rico conjunto de, en ocasiones, funciones no relacionadas. el teléfono celular, alguna vez considerado un dispositivo de comunicación, ahora se utiliza para tomar fotografías, conservar un calendario, navegar por un diario y como reproductor de música. si las interfaces de mundo abierto llegan a trascender, estos dispositivos móviles se usarán para mucho más durante los próximos años. como anota broy [bro06], “los ingenieros deben describir el contexto detallado en el que se entregarán las funciones y, más importante, deben identificar las interacciones potencialmente dañinas entre las diferentes características del sistema”. • reactividad y oportunidad: los dispositivos digitales interactúan cada vez más con el mundo real y deben reaccionar a estímulos externos en forma oportuna. deben poner ¿qué características del sistema deben considerar analistas y diseñadores para futuras aplicaciones?? 31pressman(695-716).indd  70631pressman(695-716).indd  706 26/1/10  17:33:3926/1/10  17:33:39