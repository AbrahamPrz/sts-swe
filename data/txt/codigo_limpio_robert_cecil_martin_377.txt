Por un lado, la mayoría usamos instrucciones  switch  por ser una solución de fuerza bruta evidente, no por ser la solución perfecta. Por tanto, esta heurística nos recuerda que debemos considerar el uso de polimorfismo antes de usar  switch . Por otra parte, los casos en que las funciones son más volátiles que los tipos son escasos. Por tanto, toda instrucción  switch  es sospechosa. Suelo aplicar la siguiente regla de una instrucción  switch :  No puede haber más de una instrucción   switch   por cada tipo de selección. Los casos de esa instrucción   switch   deben crear objetos polimórficos que ocupen el lugar de otras instrucciones   switch   similares en el resto del sistema . G24: Seguir las convenciones estándar Todos los equipos deben seguir un estándar de diseño de código basado en normas comunes de la industria. Este estándar debe especificar aspectos como dónde declarar variables de instancia, cómo asignar nombres a clases, métodos y variables, dónde añadir llaves, etc. El equipo no debe necesitar un documento que describa estas convenciones ya que su código proporciona los ejemplos. Todos los miembros del equipo deben seguir estas convenciones, lo que significa que no importa dónde añada cada uno las llaves mientras todos estén de acuerdo en dónde añadirlas. Si desea saber qué convenciones aplico, puede verlas en el código refactorizado de los listados B.7 a B.14 del apéndice B. G25: Sustituir números mágicos por constantes con nombre Es probablemente una de las reglas más antiguas del desarrollo de  software . Recuerdo haberla leído a finales de la década de 1960 en manuales de COBOL, FORTRAN y PL/1. Por lo general, no es recomendable incluir números sin procesar en el código; debe ocultarlos tras constantes con 378