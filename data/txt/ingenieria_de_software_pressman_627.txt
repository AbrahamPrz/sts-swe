596 PARTE CUATRO  ADMINISTRACIÓN DE PROYECTOS DE SOFTWARE  1. Una descripción narrativa del ámbito del software se desarrolla después de la comuni- cación con todos los participantes.  2. Los usuarios finales desarrollan un conjunto de casos de uso.3 Las funciones descritas en el enunciado del ámbito (o dentro de los casos de uso) se evalúan y  en algunos casos se desglosan para proporcionar más detalle, previamente al comienzo de la estimación. Puesto que las estimaciones de costo y calendario están funcionalmente orientadas, con frecuencia es útil cierto grado de descomposición. Las consideraciones de rendimiento abarcan los requisitos de procesamiento y de tiempo de respuesta. Las restricciones identifican los límites colocados en el software por parte de hardware externo, memoria disponible u otros sistemas existentes. Una vez identificado el ámbito (con la concurrencia del cliente), es razonable preguntar:  ¿puede construirse software para satisfacer este ámbito? ¿El proyecto es factible? Con mucha frecuencia, los ingenieros de software rápidamente desechan estas preguntas (o son presiona-dos para desecharlas por gerentes impacientes u otros participantes), sólo para encontrarse enlodados en un proyecto que está condenado desde el principio. Putnam y Myers [Put97a] abordan este conflicto cuando escriben: [No] todo lo imaginable es factible, ni siquiera en software, tan evanescente como pueda aparecer a  los profanos. Por el contrario, la factibilidad del software tiene cuatro dimensiones sólidas: Tecnología:  ¿Un proyecto es técnicamente factible? ¿Está dentro del estado del arte? ¿Pueden reducirse los defec-tos en un nivel que coincida con las necesidades de la aplicación? Finanzas: ¿Es financieramente  factible? ¿El desarrollo puede completarse a un costo que la organización de software, su cliente o el mercado puede pagar? Tiempo: ¿El tiempo del proyecto para llegar al mercado vencerá a la competen-cia? Recursos: ¿La organización tiene los recursos necesarios para triunfar? Putnam y Myers sugieren de manera correcta que establecer el ámbito no es suficiente. Una  vez comprendido éste, debe trabajarse para determinar si puede hacerse dentro de las dimen- siones recién anotadas. Ésta es una parte vital, aunque con frecuencia pasada por alto, del proceso de estimación.  26.4 R ECURSOS La segunda tarea en la planificación es la estimación de los recursos requeridos para lograr el esfuerzo de desarrollo del software. La figura 26.1 muestra las tres principales categorías de los recursos de la ingeniería de software: personal, componentes de software reutilizables y en-torno de desarrollo (herramientas de hardware y software). Cada recurso se especifica con cuatro características: descripción del recurso, un enunciado de disponibilidad, momento en el que se requerirá el recurso y duración del tiempo que se aplicará el recurso. Las últimas dos características pueden verse como una ventana temporal. La disponibilidad del recurso para una  ventana específica debe establecerse en el tiempo práctico más temprano. 26.4.1   Recursos humanos El planificador comienza por evaluar el ámbito del software y seleccionando las habilidades requeridas para completar el desarrollo. Se especifican tanto la posición organizacional (por ejemplo, gerente, ingeniero de software ejecutivo) como la especialidad (por ejemplo, telecomu-nicaciones, base de datos, cliente-servidor). Para proyectos relativamente pequeños (algunos persona-meses), un solo individuo puede realizar todas las tareas de ingeniería de software y  3 Los casos de uso se estudiaron con detalle a lo largo de la parte 2 de este libro. Un caso de uso es una descripción  basada en el escenario de la interacción del usuario con el software desde el punto de vista del usuario.La factibilidad del proyecto es  importante, pero una consideración de la necesidad empresarial lo es incluso más. No es bueno construir un sistema o producto de alta tecnología que nadie quiere.CONSEJO 26Pressman(593-619).indd   59626Pressman(593-619).indd   596 21/1/10   10:55:5521/1/10   10:55:55