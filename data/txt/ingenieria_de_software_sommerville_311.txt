294 capítulo 11 ■ conﬁ abilidad y seguridad la intención de comprometer la disponibilidad de un sistema. si un sistema se infecta con un virus, entonces no se estaría seguro de su fiabilidad o su protección, dado que el virus podría cambiar su comportamiento. por lo tanto, para desarrollar software confiable, es necesario garantizar que: 1. se evite la entrada de errores accidentales en el sistema durante la especificación y el desarrollo del software. 2. se diseñen procesos de verificación y validación que sean efectivos en el descubri-miento de errores residuales que afecten la confiabilidad del sistema. 3. se desarrollen mecanismos de protección contra ataques externos que comprometan la disponibilidad o la seguridad del sistema. 4. se configuren correctamente el sistema utilizado y el software de apoyo para su entorno operacional. además, conviene suponer que el software por lo general no es perfecto y que pue-den ocurrirle fallas. por consiguiente, el software debe incluir mecanismos de recupera-ción que hagan posible la restauración del servicio normal del sistema tan rápido como sea posible. la necesidad para tolerar fallas significa que los sistemas confiables deben incluir un código redundante que los ayude a monitorizarse a sí mismos, detectar estados erró-neos y recuperarse de las fallas en el desarrollo antes de que ocurran fallas en la opera-ción. ello afecta el rendimiento de los sistemas, pues se requiere verificación adicional cada vez que se ejecuta el sistema. por consiguiente, los diseñadores comúnmente deben negociar entre rendimiento y confiabilidad. tal vez se necesite dejar las com-probaciones del sistema porque éstas lo ralentizan. sin embargo, aquí la consecuencia del riesgo es que ocurran algunas fallas en la operación a causa de que no se detectó el error. debido a costos de diseño, implementación y validación adicionales, se incrementa la confiabilidad de un sistema al aumentar significativamente los costos de desarrollo. en particular, los costos de validación son altos para sistemas que deben ser ultracon-fiables, como los sistemas de control críticos para la protección. además de validar que el sistema cumpla con sus requerimientos, el proceso de validación debería ser probado por un regulador externo para que el sistema sea seguro. por ejemplo, los sistemas en las aeronaves tienen que probar a los reguladores, como la federal aviation authority, que la probabilidad de una falla catastrófica del sistema, que afecte la seguridad de la aero-nave, es extremadamente baja. la figura 11.2 muestra la relación entre los costos y las mejoras incrementales en la confiabilidad. si su software no es muy confiable, quizás obtenga mejoras considerables a costos relativamente bajos usando mejor ingeniería de software. sin embargo, si ya usa buenas prácticas, los costos de mejorar son mucho mayores aun cuando los bene-ficios de dicha mejora sean modestos. también está el problema de probar el software para demostrar que es confiable. esto se apoya en ejecutar muchas pruebas y observar el número de fallas que ocurren. conforme su software se vuelva más confiable, verá cada vez menos fallas. en consecuencia, se necesitan cada vez más pruebas para tratar y eva-luar cuántos problemas permanecen en el software. como las pruebas son muy costosas, esto aumenta drásticamente el costo de los sistemas de alta confiabilidad. m11_sommerville_ingenieria_1ed_se_289-308.indd  294m11_sommerville_ingenieria_1ed_se_289-308.indd  294 3/18/11  4:54:18 pm3/18/11  4:54:18 pm