120 parte dos modelado elementos orientados al flujo. la información se transforma cuando fluye a través de un sistema basado en computadora. el sistema acepta entradas en varias formas, aplica funciones para transformarla y produce salidas en distintos modos. la entrada puede ser una señal de control transmitida por un transductor , una serie de números escritos con el teclado por un operador humano, un paquete de información enviado por un enlace de red o un archivo grande de datos recuperado de un almacenamiento secundario. la transformación quizá incluya una sola comparación lógica, un algoritmo numérico complicado o un enfoque de regla de inferen-cia para un sistema experto. la salida quizá encienda un diodo emisor de luz o genere un in-forme de 200 páginas. en efecto, es posible crear un modelo del flujo para cualquier sistema basado en computadora, sin importar su tamaño y complejidad. en el capítulo 7 se hace un análisis más detallado del modelado del flujo. 5.5.2 patrones de análisis cualquiera que haya hecho la ingeniería de los requerimientos en varios proyectos de software ha observado que ciertos problemas son recurrentes en todos ellos dentro de un dominio de aplicación específico. 18 estos patrones de análisis [fow97] sugieren soluciones (por ejemplo, una clase, función o comportamiento) dentro del dominio de la aplicación que pueden volverse a utilizar cuando se modelen muchas aplicaciones. geyer-schulz y hahsler [gey01] sugieren dos beneficios asociados con el uso de patrones de análisis: en primer lugar, los patrones de análisis aceleran el desarrollo de los modelos de análisis abstracto que capturan los principales requerimientos del problema concreto, debido a que proveen modelos de análisis reutilizables con ejemplos, así como una descripción de sus ventajas y limitaciones. en se-la escena: sala de juntas, continúa la reunión de requerimientos. participantes: jamie lazar, integrante del equipo de software; vinod raman, miembro del equipo de software; ed robbins, inte-grante del equipo de software; doug miller, gerente de ingeniería de software; tres trabajadores de mercadotecnia; un representante de ingeniería del producto, y un facilitador. la conversación:facilitador: estamos por terminar de hablar sobre la funcionalidad de seguridad del hogar de casasegura. pero antes, quisiera que analizáramos el comportamiento de la función. persona de mercadotecnia: no entiendo lo que quiere decir con comportamiento. ed (sonríe): es cuando le das un “tiempo fuera” al producto si se porta mal. facilitador: no exactamente. permítanme explicarlo.(el facilitador explica al equipo encargado de recabar los requeri- mientos y los fundamentos de modelado del comportamiento.)persona de mercadotecnia: esto parece un poco técnico. no estoy seguro de ser de ayuda aquí. facilitador: seguro que lo serás. ¿qué comportamiento se obser- va desde el punto de vista de un usuario? persona de mercadotecnia: mmm... bueno, el sistema estará vigilando los sensores. leerá comandos del propietario. mostrará su estado. facilitador: ¿ves?, lo puedes hacer.jamie: también estará interrogando a la pc para determinar si hay alguna entrada desde ella, por ejemplo, un acceso por internet o información sobre la configuración. vinod: sí, en realidad, configurar el sistema es un estado por dere- cho propio. doug: muchachos, lo hacen bien. pensemos un poco más... ¿hay alguna forma de hacer un diagrama de todo esto? facilitador: sí la hay, pero la dejaremos para la próxima reunión.casasegura modelado preliminar del comportamiento 18 en ciertos casos, los problemas vuelven a suceder sin importar el dominio de la aplicación. por ejemplo, son comunes las características y funciones usadas para resolver problemas de la interfaz de usuario sin importar el dominio de la aplicación en consideración. 05pressman(101-125).indd  12005pressman(101-125).indd  120 21/1/10  11:00:2521/1/10  11:00:25