apéndice 1 introducción a uml 741 una propiedad y 4) palabras clave (por ejemplo, if, then, else, and, or, not, implies) que se usan para especificar expresiones condicionales. como ejemplo simple de una expresión lro, considere el sistema de impresión que se estu- dió en el capítulo 10. la condición guardia se coloca en el evento jobcostaccepted que causa una transición entre los estados computingjobcost y formingjob dentro del diagrama de estado para el objeto printjob (figura 10.9). en el diagrama (figura 10.9), la condición guardia se expresa en lenguaje natural e implica que la autorización sólo puede ocurrir si el cliente está autorizado para aprobar el costo del trabajo. en lro, la expresión puede tomar la forma: customer self.authorizationauthority /h11549 ‘yes’ donde un atributo booleano, authorizationauthority, de la clase (en realidad una instancia especí- fica de la clase) llamada customer debe establecerse en “sí” para que se satisfaga la condición guardia. conforme se crea el modelo de diseño, con frecuencia existen instancias en las que deben satisfacerse pre o poscondiciones antes de completar alguna acción especificada por el diseño. lro proporciona una poderosa herramienta para especificar pre y poscondiciones de manera formal. como ejemplo, considere una extensión al sistema local de impresión (que se estudió como ejemplo en el capítulo 10) donde el cliente proporcione un límite de costo superior (upper cost bound) para el trabajo de impresión y una fecha de entrega “fatal”, al mismo tiempo que se especifican otras características del trabajo de impresión. si las estimaciones de costo y entrega superan dichos límites, el trabajo no se presenta y debe notificársele al cliente. en lro, un con-junto de pre y poscondiciones puede especificarse de la forma siguiente: context printjob::validate(uppercostbound : integer, custdeliveryreq : integer) pre: uppercostbound > 0 and custdeliveryreq > 0 and self.jobauthorization /h11549 ‘no’ post: if self.totaljobcost </h11549 uppercostbound  and self.deliverydate </h11549 custdeliveryreq   then  self.jobauthorization = ‘yes’   endif este enunciado lro define una invariante ( inv): condiciones que deben existir antes (pre) y después (pos) de algún comportamiento. inicialmente, una precondición establece que el límite de costo y la fecha de entrega deben especificarse por parte del cliente, y la autorización debe establecerse en “no”. después de determinar costos y entrega, se aplica la poscondición espe-cificada. también debe observarse que la expresión: self.jobauthorization = ‘yes’ no asigna el valor “sí”, sino que declara que jobauthorization debe establecerse en “sí” para cuando la operación termine. una descripción completa del lro está más allá del ámbito de este apéndice. la especificación lro completa puede obtenerse en www.omg.org/techno- logy/documents/formal/ocl.htm  lecturas y fuentes de información adicionales decenas de libros estudian uml. los que abordan la versión más reciente incluyen: miles y hamilton (learn- ing uml 2.0, o’reilly media, inc., 2006); booch, rumbaugh, y jacobson (unified modeling language user 33pressman(725-742)app1.indd  74133pressman(725-742)app1.indd  741 20/1/10  19:01:5220/1/10  19:01:52