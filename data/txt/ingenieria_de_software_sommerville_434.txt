capítulo 15 ■ puntos clave 417 inmediatamente antes de que se ejecute el método administerinsulin. puede ignorar los cálculos, como el enunciado if 1 de la figura 15.10, en el argumento de protección, por-que sus resultados están sobrescritos en posteriores enunciados del programa. en el argumento de protección que se muestra en la figura 15.11, existen tres posi-bles rutas del programa que conducen a la solicitud del método administerinsulin. debe demostrarse que la cantidad de insulina administrada nunca supera maxdose. considere todas las posibles rutas del programa hacia administerdose: 1. ninguna rama del enunciado if 2 se ejecuta. esto sólo puede ocurrir si currentdose es mayor que o igual a minimumdose y menor que o igual a maxdose. ésta es la post-condición: una afirmación que es verdadera después de que se ejecuta el enun-ciado. 2. se ejecuta la rama then del enunciado if 2. en este caso, se ejecuta la asignación establecer currentdose a cero. por lo tanto, su post-condición es currentdose 5 0. 3. se ejecuta la rama else-if del enunciado if 2. en este caso, se ejecuta la asignación establecer currentdose a maxdose. por lo tanto, después de ejecutar este enunciado, se sabe que la post-condición es currentdose 5 maxdose. en los tres casos, las post-condiciones contradicen la precondición insegura de que la dosis administrada es mayor que maxdose. por consiguiente, puede afirmarse que el cálculo es seguro. los argumentos estructurados se usan en la misma forma para demostrar que ciertas propiedades de seguridad de un sistema son verdaderas. por ejemplo, si usted quiere demostrar que un cálculo nunca conducirá al cambio de permisos sobre un recurso, podrá usar un argumento de seguridad estructurado para comprobarlo. sin embargo, la eviden-cia de los argumentos estructurados es menos confiable para la validación de seguridad. se debe a que hay una posibilidad de que el atacante logre corromper el código del sis-tema. en tal caso, el código ejecutado no es el código que usted consideró como seguro. puntos clave ■ el análisis estático es un enfoque de v&v que examina el código fuente (u otra presentación) de un sistema, y que busca errores y anomalías. permite que todas las partes de un programa se verifiquen, no sólo aquellas que se ejercitan mediante pruebas del sistema. ■ la comprobación del modelo es un enfoque formal al análisis estático que comprueba exhaustivamente todos los estados en un sistema en busca de errores potenciales. ■ las pruebas estadísticas se usan para evaluar la fiabilidad del software. se apoyan en probar el sistema con un conjunto de datos de prueba que reflejen el perfil operativo del software. los datos de prueba pueden generarse automáticamente. m15_sommerville_ingenieria_1ed_se_393-422.indd  417m15_sommerville_ingenieria_1ed_se_393-422.indd  417 3/18/11  5:01:20 pm3/18/11  5:01:20 pm