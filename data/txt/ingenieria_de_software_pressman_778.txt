APÉNDICE 2  CONCEPTOS ORIENTADOS A OBJETO 747 menta el nombre del mensaje, ejecutar esta operación y luego regresar el control al solicitante. Los  mensajes ligan el sistema orientado a objeto. Los mensajes proporcionan comprensión acerca del comportamiento de objetos individuales y del sistema OO como un todo. Polimorfismo. El polimorfismo es una característica que reduce enormemente el esfuerzo re- querido para extender el diseño de un sistema orientado a objeto existente. Para entender el  polimorfismo, considere una aplicación con vencional que debe dibujar cuatro tipos diferentes  de gráficas: gráficas de línea, gráficas de pastel, histogramas y diagramas Kiviat. De manera ideal, una vez recopilados los datos para un tipo particular de gráfica, ésta debe dibujarse a sí misma. Para lograrlo en una aplicación convencional (y mantener cohesión de módulo) sería necesario desarrollar módulos de dibujo para cada tipo de gráfica. Entonces, dentro del diseño, debería incrustarse lógica de control similar a la siguiente: caso de gráficatipo: if gráficatipo = graficalinea then DibujarGráficaLinea (datos); if gráficatipo = graficapie then DibujarGráficaPie (datos);if gráficatipo = histograma then DibujarHisto (datos);if gráficatipo = kiviat then DibujarKiviat (datos); termina caso; Aunque este diseño es razonablemente directo, agregar nuevos tipos de gráfica podría ser tru- culento. Tendría que crearse un nuevo módulo de dibujo para cada tipo de gráfica y luego la lógica de control tendría que actualizarse para reflejar el nuevo tipo de gráfica. Para resolver este problema en un sistema orientado a objeto, todas las gráficas se convierten  en subclases de una clase general llamada Gráfica. Usando un concepto llamado sobrecargar  [Tay90], cada subclase define una operación llamada dibujar. Un objeto puede enviar un men-saje dibujar a cualquiera de los objetos instanciados de cualquiera de las subclases. El objeto  que recibe el mensaje invocará su propia operación dibujo para crear la gráfica adecuada. Por  tanto, el diseño se reduce a dibujar <gráficatipo> Cuando un nuevo tipo de gráfica se agrega al sistema, se crea una subclase con su propia ope-ración dibujar. Pero no se requieren cambios dentro de algún objeto que quiera una gráfica di- bujada porque el mensaje dibujar <gráficatipo> sigue invariable. Para resumir, el polimorfismo  permite que algunas operaciones diferentes tengan el mismo nombre. Esto a su vez desacopla objetos uno de otro, lo que los hace más independientes. Clase de diseño. El modelo de requerimientos define un conjunto completo de clases de aná-lisis. Cada una describe algún elemento del dominio de problema, y se enfoca en aspectos del :ObjetoEmisor Mensaje (<parámetros>) :ObjetoReceptorFIGURA A2.2 Mensaje que  pasa entre objetos 34Pressman(743-750)app2.indd   74734Pressman(743-750)app2.indd   747 26/1/10   17:32:2826/1/10   17:32:28