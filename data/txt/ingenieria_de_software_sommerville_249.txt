232 capítulo 8 ■ pruebas de software ejercicios 8.1. explique por qué no es necesario que un programa esté completamente libre de defectos antes de entregarse a sus clientes. 8.2. indique por qué las pruebas sólo pueden detectar la presencia de errores, pero no su ausencia. 8.3. algunas personas argumentan que los desarrolladores no deben intervenir en las pruebas de su propio código, sino que todas las pruebas deben ser responsabilidad de un equipo independiente. exponga argumentos en favor y en contra de las pruebas efectuadas por parte de los mismos desarrolladores. 8.4. se pide al lector poner a prueba un método llamado “catwhitespace” en un objeto “paragraph” que, dentro del párrafo, sustituye secuencias de caracteres blancos con un solo carácter blanco. identifique las particiones de prueba para este ejemplo y derive un conjunto de pruebas para el método “catwhitespace”. 8.5. ¿qué es la prueba de regresión? explique cómo el uso de pruebas automatizadas y un marco de pruebas como junit simplifican las pruebas de regresión. 8.6. el mhc-pms se construyó al adaptar un sistema de información comercial. ¿cuáles considera que son las diferencias entre probar tal sistema y probar el software que se desarrolló usando un lenguaje orientado a objetos como java? 8.7. diseñe un escenario que pueda usar para ayudarse a elaborar pruebas para el sistema de estación meteorológica en campo abierto. 8.8. ¿qué entiende por “pruebas de esfuerzo”? sugiera cómo puede hacer una prueba de esfuerzo del mhc-pms. 8.9. ¿cuáles son los beneficios de hacer participar a usuarios en las pruebas de versión en una etapa temprana del proceso de pruebas? ¿hay desventajas en la implicación del usuario? 8.10. un enfoque común a las pruebas del sistema es probar el sistema hasta que se agote el presupuesto de pruebas y, luego, entregar el sistema a los clientes. discuta la ética de este enfoque para sistemas que se entregan a clientes externos. referencias andrea, j. (2007). “envisioning the next generation of functional testing tools”. ieee software, 24 (3), 58–65. beck, k. (2002). test driven development: by example. boston: addison-wesley.bezier, b. (1990). software testing techniques, 2nd edition. new york: van nostrand rheinhold.boehm, b. w. (1979). “software engineering; r & d trends and defense needs.” in research directions in software technology. wegner, p. (ed.). cambridge, mass.: mit press. 1–9.cusamano, m. y selby, r. w. (1998). microsoft secrets. new york: simon and shuster. m08_sommerville_ingenieria_1ed_se_205-233.indd  232m08_sommerville_ingenieria_1ed_se_205-233.indd  232 3/18/11  5:40:00 pm3/18/11  5:40:00 pm