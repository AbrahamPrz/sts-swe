66 capítulo 3 ■ desarrollo ágil de software sistema de administración de pacientes en atención a la salud mental. ésta es una breve descripción de un escenario para prescribir medicamentos a un paciente. las tarjetas de historia son las entradas principales al proceso de planeación xp o el “juego de planeación”. una vez diseñadas las tarjetas de historia, el equipo de desarrollo las descompone en tareas (figura 3.6) y estima el esfuerzo y los recursos requeridos para implementar cada tarea. esto involucra por lo general discusiones con el cliente para refi-nar los requerimientos. entonces, para su implementación, el cliente prioriza las historias y elige aquellas que pueden usarse inmediatamente para entregar apoyo empresarial útil. la intención es identificar funcionalidad útil que pueda implementarse en aproximadamente dos semanas, cuando la siguiente liberación del sistema esté disponible para el cliente. desde luego, conforme cambian los requerimientos, las historias no implementadas cambian o se desechan. si se demandan cambios para un sistema que ya se entregó, se desarrollan nuevas tarjetas de historia y, otra vez, el cliente decide si dichos cambios tienen prioridad sobre la nueva función.figura 3.4 prácticas de programación extremaprincipio o práctica descripción planeación incremental los requerimientos se registran en tarjetas de historia (story cards) y las historias que se van a incluir en una liberación se determinan por el tiempo disponible y la prioridad relativa. los desarrolladores desglosan dichas historias en “tareas” de desarrollo. vea las figuras 3.5 y 3.6. liberaciones pequeñas al principio se desarrolla el conjunto mínimo de funcionalidad útil, que ofrece valor para el negocio. las liberaciones del sistema son frecuentes y agregan incrementalmente funcionalidad a la primera liberación. diseño simple se realiza un diseño suficiente para cubrir sólo aquellos requerimientos actuales. desarrollo de la primera pruebase usa un marco de referencia de prueba de unidad automatizada al escribir las pruebas para una nueva pieza de funcionalidad, antes de que esta última se implemente. refactorización se espera que todos los desarrolladores refactoricen de manera continua el código y, tan pronto como sea posible, se encuentren mejoras de éste. lo anterior conserva el código simple y mantenible. programación en pares los desarrolladores trabajan en pares, y cada uno comprueba el trabajo del otro; además, ofrecen apoyo para que se realice siempre un buen trabajo. propiedad colectiva los desarrolladores en pares laboran en todas las áreas del sistema, de manera que no se desarrollan islas de experiencia, ya que todos los desarrolladores se responsabilizan por todo el código. cualquiera puede cambiar cualquier función. integración continua tan pronto como esté completa una tarea, se integra en todo el sistema. después de tal integración, deben aprobarse todas las pruebas de unidad en el sistema. ritmo sustentable grandes cantidades de tiempo extra no se consideran aceptables, pues el efecto neto de este tiempo libre con frecuencia es reducir la calidad del código y la productividad de término medio. cliente en sitio un representante del usuario final del sistema (el cliente) tiene que disponer de tiempo completo para formar parte del equipo xp. en un proceso de programación extrema, el cliente es miembro del equipo de desarrollo y responsable de llevar los requerimientos del sistema al grupo para su implementación. m03_sommerville_ingenieria_1ed_se_056-081.indd  66m03_sommerville_ingenieria_1ed_se_056-081.indd  66 3/18/11  4:46:25 pm3/18/11  4:46:25 pm