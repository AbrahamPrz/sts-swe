capítulo 19 prueba de aplicaciones orientadas a objetos 449 al igual que la prueba de clases individuales, la de colaboración de clase puede lograrse aplicando métodos aleatorios y de partición, así como pruebas basadas en escenario y pruebas de comportamiento. 19.6.1 prueba de clase múltiple kirani y tsai [kir94] sugieren la siguiente secuencia de pasos para generar casos de prueba aleatorios de clase múltiple: 1. para cada clase cliente, use la lista de operaciones de clase a fin de generar una serie de secuencias de prueba aleatorias. las operaciones en viarán mensajes a otras clases ser- vidor. 2. para cada mensaje generado, determine la clase colaborador y la correspondiente ope- ración en el objeto servidor . 3. para cada operación en el objeto servidor (invocado por los mensajes enviados desde el objeto cliente), determine los mensajes que transmite. 4. para cada uno de los mensajes, determine el siguiente nivel de operaciones que se in- vocan e incorpore esto en la secuencia de prueba. para ilustrar [kir94], considere una secuencia de operaciones para la clase bank en relación con una clase at m (figura 19.2): verifyacctverifypin[[verifypolicywithdrawreq]|depositreq|acctinforeq]n un caso de prueba aleatorio para la clase bank puede ser caso de prueba r3 /h11005 verifyacctverifypindepositreq para considerar los colaboradores involucrados en esta prueba, se consideran los mensajes asociados con cada una de las operaciones anotadas en el caso de prueba r3. bank debe co- laborar con validationinfo para ejecutar verifyacct( ) y verifypin( ). bank debe colaborar con account para ejecutar depositreq( ) . por tanto, un nuevo caso de prueba que ejercita estas co- laboraciones es caso de prueba r4 /h11005 verifyacct [bank:validacctvalidationinfo]verifypin [bank: validpinvalidationinfo]depositreq [bank: depositaccount]cita: “la frontera que define el ámbi- to de las pruebas de unidad y de integración es diferente para el desarrollo orientado a obje-tos. las pruebas pueden diseñarse y ejercitarse en muchos puntos en el proceso. por tanto, “diseñe un poco, codifique un poco” se convierte en “diseñe un poco, codifique un poco, pruebe un poco”. robert binder atmatm user interface cardinserted passworddepositwithdrawaccntstatusterminate    verifystatusdepositstatus dispensecash printaccntstat readcardinfo getcashamnt bankverifyacctverifypinverifypolicywithdrawreqdepositreqacctinfo creditlimitaccnttype balance withdraw deposit close account validation info validpinvalidacct cashieropenacctinitialdeposit authorizecard deauthorize closeacctfigura 19.2 diagrama de colaboración de clases para aplicación bancariafuente: adaptado de [kir94]. 19pressman(437-452).indd  44919pressman(437-452).indd  449 21/1/10  10:58:3521/1/10  10:58:35