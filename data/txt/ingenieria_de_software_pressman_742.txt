capítulo 31 tendencias emergentes en ingeniería del software 711 entrega el componente. el dip realmente no es una nueva tecnología, sino más bien una ten- dencia que enfatiza el diseño de casos de prueba antes de la creación de código fuente.12 el proceso dip sigue el simple flujo procedural que se ilustra en la figura 31.3. antes de crear el primer pequeño segmento de código, un ingeniero de software crea una prueba para ejerci-tar el código (intentar que fracase el código). entonces el código se escribe para satisfacer la prueba. si la pasa, se crea una nueva prueba para el siguiente segmento de código que se va a desarrollar. el proceso continúa hasta que el componente está completamente codificado y to-das las pruebas se ejecutan sin error. sin embargo, si alguna prueba triunfa al encontrar un error, el código existente se refactoriza (corrige) y todas las pruebas creadas para dicho punto se vuelven a ejecutar. este flujo iterativo continúa hasta que no hay pruebas pendientes de crear, lo que implica que los componentes satisfacen todos los requerimientos definidos para él. durante el dip, el código se desarrolla en incrementos muy pequeños (una subfunción a la vez) y no se escribe código hasta que exista una prueba que lo ejercite. debe observar que cada iteración resulta en una o más pruebas nuevas que se agregan a una suite de pruebas de regre-sión que corren con cada cambio. esto se hace para garantizar que el nuevo código no generó efectos colaterales que causen errores en el código anterior. en dip, las pruebas impulsan el diseño de componentes detallados y el código fuente resul- tante. los resultados de dichas pruebas causan modificaciones inmediatas al diseño de compo-nentes (vía el código) y, más importante, el componente resultante (cuando se completa) se verificó en forma independiente. si tiene más interés en el dip, consulte [bec04b] o [ast04]. 31.5 t endencias relacionadas con herramientas cada año se introducen cientos de herramientas de ingeniería del software de grado industrial. la mayoría las aportan los proveedores de herramientas, quienes afirman que su herramienta 12 recuerde que la programación extrema (capítulo 3) enfatiza este enfoque como parte de su modelo de proceso ágil.faltan pruebas por crearcreación de un caso de prueba escribir nuevo segmento de código correr la(s) prueba(s)refactorizar (corregir) el segmento de códigono quedan pruebas por crear encuentra error no encuentra errorfigura 31.3 flujo de proceso de desarrollo impulsado por pruebas 31pressman(695-716).indd  71131pressman(695-716).indd  711 26/1/10  17:33:4126/1/10  17:33:41