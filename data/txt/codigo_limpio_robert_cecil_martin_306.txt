clase args . también generamos parseexception , que no nos pertenece. por ello, combinamos todas las excepciones en una única clase argsexception y la incluimos en su propio módulo. public class argsexception extends exception { private char errorargumentid = ‘\0’; private string errorparameter = “tilt”; private errorcode errorcode = errorcode.ok; public argsexception() {} public argsexception(string message) { super(message); } public enum errorcode { ok, missing_string, missing_integer, invalid_integer, unexpected_argument, missing_double, invalid_double } } … public class args { … private char errorargumentid = ‘\0’; private string errorparameter = “tilt”; private argsexception .errorcode errorcode = argsexception .errorcode.ok; private list<string> argslist; public args(string schema, string[] args) throws argsexception { this.schema = schema; argslist = arrays.aslist(args); valid = parse(); } private boolean parse() throws argsexception { if (schema.length() == 0 && argslist.size() == 0) return true; parseschema(); try { parsearguments(); } catch ( argsexception e) { } return valid; } private boolean parseschema() throws argsexception { … } private void parseschemaelement(string element) throws argsexception { … else throw new argsexception ( string.format(“argument: %c has invalid format: %s.”, elementid, elementtail)); } 307