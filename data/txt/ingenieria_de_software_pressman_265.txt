234capítulo 10diseño en el nivel de componentes conceptos clave  acoplamiento . . . . . . . . . . . 244 cohesión . . . . . . . . . . . . . . . 243componentes adaptación . . . . . . . . . . . 258 calificación . . . . . . . . . . . 257 clasificación . . . . . . . . . . 260 combinación . . . . . . . . . . 259 orientación a objetos . . . . . . . . . . . . 235 tradicional . . . . . . . . . . . 252 webapp . . . . . . . . . . . . . 251 desarrollo basadoen componentes . . . . . . . . . 256 diseño del contenido . . . . . . 251ingeniería del dominio . . . . . 257lineamientos de diseño . . . . 242notación del diseño tabular . . . . . . . . . . . . . . . . 254 ¿qué es? durante el diseño arquitectónico, se define un conjunto completo de componentes de software. pero las estructuras internas de datos y detalles de procesamiento de cada componente no están representadas en un nivel de abs-tracción cercano al código. el diseño en el nivel de compo-nentes define las estructuras de datos, algoritmos, caracte-rísticas de la interfaz y mecanismos de comunicación asignados a cada componente del software. ¿quién lo hace? un ingeniero de software es quien realiza el diseño en el nivel de componentes. ¿por qué es importante? antes de elaborar el software, se tiene que ser capaz de determinar si funcionará. el diseño en el nivel de componentes lo representa en forma tal que permite revisar los detalles del diseño para garan-tizar su corrección y su consistencia con otras representa-ciones del diseño (por ejemplo, los datos y el diseño de la arquitectura y la interfaz). esto proporciona un medio para evaluar si funcionarán las estructuras de datos, interfaces y algoritmos. ¿cuáles son los pasos? las representaciones de diseño de datos, arquitectura e interfaces constituyen el funda-mento para el diseño en el nivel de componentes. la defi-nición de clase o narrativa de procesamiento de cada componente se traduce a un diseño detallado que utiliza formas de diagrama o basadas en texto que especifican las estructuras de datos internas, los detalles de la interfaz local y la lógica del procesamiento. la notación del diseño incluye diagramas uml y formatos complementarios. se especifica el diseño del procedimiento con el empleo de construcciones de programación estructurada. con fre-cuencia es posible obtener componentes de software reuti-lizable ya existentes, en lugar de construir nuevos. ¿cuál es el producto final? el producto principal que se genera en esta etapa es el diseño de cada componente, representado con notación gráfica, tabular o basada en texto. ¿cómo me aseguro de que lo hice bien? se efectúa la revisión del diseño. esto se hace para determinar duran-te las primeras etapas de diseño si las estructuras de datos, interfaces, secuencias de procesamiento y condiciones lógicas son correctas y si producirán los datos apropiados o la transformación del control asignado al componente. una mirada  rápidael diseño en el nivel de componentes tiene lugar una vez terminado el diseño de la arqui- tectura. en esta etapa se ha establecido la estructura general de los datos y del programa del software. el objetivo es traducir el modelo del diseño a software operativo. pero el nivel de abstracción del modelo de diseño existente es relativamente alto y el del programa operativo es bajo. la traducción es difícil y está abierta a la introducción de errores sutiles que son difíciles de detectar y de corregir en las etapas posteriores del proceso del software. en una conferencia famosa, edsgar dijkstra, investigador importante que ha contribuido mucho a nues-tra comprensión del diseño de software, dijo [dij72]: el software parece ser diferente de muchos otros productos en los que la regla es que a mejor calidad se da un mayor precio. aquellos que desean un software en verdad confiable descubrirán que deben encontrar un medio para evitar de inicio la mayoría de los posibles errores; como resultado, el proceso de programación se hace más barato [...] los programadores eficaces no tienen que perder su tiempo depurando errores: no deben introducirlos al arrancar. aunque estas palabras fueron expresadas hace muchos años, siguen siendo ciertas. al traducir el modelo del diseño a código fuente, deben seguirse principios de diseño que no sólo hagan la traducción sino que también eviten la “introducción de errores desde el principio”. es posible representar el diseño en el nivel del componente con el uso de un lenguaje de programación. en esencia, el programa se crea con el empleo del modelo de diseño arquitectó-nico como guía. un enfoque alternativo consiste en representar el diseño en el nivel de los componentes con alguna representación intermedia (gráfica, tabular o basada en texto) que se traduzca con facilidad a código fuente. sin que importe el mecanismo utilizado para representar 10pressman(234-264).indd  23410pressman(234-264).indd  234 26/1/10  17:33:1626/1/10  17:33:16