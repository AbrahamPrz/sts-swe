542 parte tres administración de la calidad donde las sumas ocurren sobre i = 1 hasta tc y j = 1 hasta tc. la función is_client (es cliente) /h11005 1, si y sólo si existe una relación entre la clase cliente cc y la clase servidor cs, y cc /hs11005 cs /h11005 0, de otro modo aunque muchos factores afectan la complejidad, comprensibilidad y mantenimiento del soft- ware, es razonable concluir que, conforme el valor de fa aumenta, la complejidad del software oo también aumentará, y como resultado pueden sufrir la comprensibilidad, el mantenimiento y el potencial de reuso. harrison et al. [har98b] presentan un análisis detallado de fhm y fa junto con otras métricas, y examinan su validez para usarlas en la valoración de la calidad del diseño. 23.3.5 métricas oo propuestas por lorenz y kidd en su libro acerca de métricas oo, lorenz y kidd [lor94] dividen las métricas basadas en clase en cuatro amplias categorías; cada una tiene una relación en el diseño en el nivel de componen-tes: tamaño, herencia, internos y externos. las métricas orientadas a tamaño para una clase de diseño oo se enfocan en conteos de atributos y operaciones para una clase individual y en va-lores promedio para el sistema oo como un todo. las métricas basadas en herencia se enfocan en la forma en la que las operaciones se reutilizan a lo largo de la jerarquía de clases. las mé-tricas para interiores de clase se fijan en la cohesión (sección 23.3.3) y en los conflictos orienta-dos a código. y las métricas externas examinan el acoplamiento y el reuso. un ejemplo de las métricas propuestas por lorenz y kidd es: tamaño de clase (tdc). el tamaño global de una clase puede determinarse usando las si- guientes medidas: • el número total de operaciones (tanto heredadas como operaciones de instancia privada) que se encapsulan dentro de la clase. • el número de atributos (tanto heredados como de instancia privada) que encapsula la clase. la métrica mpc propuesta por chidamber y kemerer (sección 23.3.3) también es una medida ponderada del tamaño de clase. como se indicó anteriormente, grandes valores para tdc indi-can que una clase puede tener demasiada responsabilidad. esto reducirá la reutilización de la clase y complicará la implementación y las pruebas. en general, las operaciones y atributos heredados o públicos deben ponderarse más para determinar el tamaño de clase [lor94]. las operaciones y atributos privados permiten la especialización y están más localizadas en el di-seño. también pueden calcularse promedios para el número de atributos y operaciones de clase. mientras más bajos sean los valores promedio para el tamaño, hay más probabilidad de que las clases dentro del sistema puedan reutilizarse ampliamente. 23.3.6 métricas de diseño en el nivel de componente las métricas de diseño en el nivel de componente para componentes de software convencional se enfocan en las características internas de un componente de software e incluyen medidas de cohesión de módulo, acoplamiento y complejidad. dichas medidas pueden ayudarlo a juzgar la calidad de un diseño en el nivel de componente. las métricas de diseño en el nivel de componente pueden aplicarse una vez desarrollado el diseño procedural y son “cajas de cristal” en tanto requieren conocimiento del funcionamiento interior del módulo en el que se está trabajando. alternativamente, pueden demorarse hasta que el código fuente esté disponible.durante la revisión del modelo de análisis, las tarjetas índice crc proporcionarán un indicio razonable de los valores esperados para tdc. si encuentra una clase con un gran número de responsabilidades, considere dividirla.consejo 23pressman(526-552).indd  54223pressman(526-552).indd  542 19/1/10  23:29:5619/1/10  23:29:56