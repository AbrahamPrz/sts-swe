384 parte tres administración de la calidad 17.1 u n enfoque estratégico para la prueba de software la prueba es un conjunto de actividades que pueden planearse por adelantado y realizarse de manera sistemática. por esta razón, durante el proceso de software, debe definirse una plantilla para la prueba del software: un conjunto de pasos que incluyen métodos de prueba y técnicas de diseño de casos de prueba específicos. en la literatura sobre el tema, se han propuesto algunas estrategias de prueba de software. todas proporcionan una plantilla para la prueba y tienen las siguientes características genéri-cas: • para realizar una prueba efectiva, debe realizar revisiones técnicas efectivas (capítulo 15). al hacerlo, eliminará muchos errores antes de comenzar la prueba. • la prueba comienza en los componentes y opera “hacia afuera”, hacia la integración de todo el sistema de cómputo. • diferentes técnicas de prueba son adecuadas para distintos enfoques de ingeniería de software y en diferentes momentos en el tiempo. • las pruebas las realiza el desarrollador del software y (para proyectos grandes) un grupo de prueba independiente. • prueba y depuración son actividades diferentes, pero la depuración debe incluirse en cualquier estrategia de prueba. una estrategia para la prueba de software debe incluir pruebas de bajo nivel, que son nece- sarias para verificar que un pequeño segmento de código fuente se implementó correctamente, así como pruebas de alto nivel, que validan las principales funciones del sistema a partir de los requerimientos del cliente. una estrategia debe proporcionar una guía para el profesional y un conjunto de guías para el jefe de proyecto. puesto que los pasos de la estrategia de prueba ocu-rren cuando comienza a aumentar la presión por las fechas límite, el avance debe ser medible y los problemas deben salir a la superficie tan pronto como sea posible. 17.1.1 verificación y validación la prueba de software es un elemento de un tema más amplio que usualmente se conoce como verificación y validación (v&v). la verificación se refiere al conjunto de tareas que garantizan que el software implementa correctamente una función específica. la validación es un conjunto diferente de tareas que aseguran que el software que se construye sigue los requerimientos del cliente. boehm [boe81] afirma esto de esta forma: verificación: “¿construimos el producto correctamente?” validación: “¿construimos el producto correcto?” la definición de v&v abarca muchas actividades de aseguramiento de calidad del software (capítulo 16).1 la verificación y la validación incluyen un amplio arreglo de actividades sqa: revisiones técnicas, auditorías de calidad y configuración, monitoreo de rendimiento, simulación, estudio de factibilidad, revisión de documentación, revisión de base de datos, análisis de algoritmos, pruebas de desarrollo, pruebas de usabilidad, pruebas de calificación, pruebas de aceptación y webref en www.mtsu.edu/~storm pueden encontrarse útiles recursos para la prueba de software. 1 debe notarse que hay una fuerte divergencia de opinión acerca de qué tipos de pruebas constituyen la “valida- ción”. algunas personas creen que todas las pruebas sirven para la verificación y que la validación se lleva a cabo cuando los requerimientos se revisan y aprueban, y, más tarde, por el usuario, cuando el sistema resulta opera-tivo. otras personas ven las pruebas de unidad y de integración (secciones 17.3.1 y 17.3.2) como verificación y las de orden superior (secciones 17.6 y 17.7) como validación.cita: “probar es la parte inevitable de cualquier esfuerzo responsable por desarrollar un sistema de software”. william howden 17pressman(383-410).indd  38417pressman(383-410).indd  384 21/1/10  10:59:1921/1/10  10:59:19