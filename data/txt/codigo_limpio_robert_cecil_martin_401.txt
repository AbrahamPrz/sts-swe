observaciones del servidor el servidor actualizado completa satisfactoriamente la prueba en algo más de un segundo. desafortunadamente, la solución genera ciertos problemas. ¿cuántos subprocesos podría crear nuestro servidor? el código no define límites de modo que podríamos alcanzar el impuesto por la máquina virtual de java (mvj), suficiente en muchos sistemas sencillos. ¿pero y si el sistema tiene que asumir multitud de usuarios de una red pública? si se conectan demasiados usuarios al mismo tiempo, el sistema podría colapsarse. pero dejemos temporalmente este problema de comportamiento. la solución mostrada tiene problemas de limpieza y estructura. ¿cuántas responsabilidades tiene el código del servidor? administración de conexiones. procesamiento de clientes. política de subprocesos. política de cierre del servidor. desafortunadamente, todas estas responsabilidades se encuentran en la función process . además, el código cruza varios niveles diferentes de abstracción. por tanto, a pesar de la reducida función process , es necesario dividirlo. existen varios motivos para cambiar el servidor; por tanto, incumple el principio de responsabilidad única. para mantener la limpieza de un sistema concurrente, la administración de subprocesos debe limitarse a una serie de puntos controlados. es más, el código que gestione los subprocesos únicamente debe encargarse de la gestión de subprocesos. ¿por qué? si no existe otro motivo, el control de problemas de concurrencia ya es lo suficientemente complicado como para generar simultáneamente otros problemas no relacionados con la concurrencia. si creamos una lista independiente para cada una de las responsabilidades anteriores, incluyendo la administración de subprocesos, al cambiar la estrategia de administración de subprocesos, el cambio tiene un menor impacto sobre el código y no contamina a otras responsabilidades. de este 402