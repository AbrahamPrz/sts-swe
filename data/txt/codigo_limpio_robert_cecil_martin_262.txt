es sorprendente la cantidad de código necesario para detallar este sencillo concepto. uno de los motivos es el uso de un lenguaje especialmente profuso. java, al ser un lenguaje de tipos estáticos, requiere muchas palabras para satisfacer el sistema de tipos. en lenguajes como ruby, python o smalltalk, este programa es mucho más reducido [92] . vuelva a leer el código. fíjese especialmente en los nombres de los elementos, el tamaño de las funciones y el formato. si tiene experiencia como programador, partes del estilo o la estructura no le convencerán, pero espero que, desde un punto de vista global, considere que el programa está bien escrito y tiene una estructura limpia. por ejemplo, debería ser evidente cómo añadir un nuevo tipo de argumento, como una fecha o un número complejo, y que dicha inclusión apenas requeriría código. en definitiva, bastaría con una nueva variante de argumentmarshaler , una nueva función getxxx y una nueva instrucción case en la función parseschemaelement . también habría un nuevo código argsexception.errorcode y un nuevo mensaje de error. cómo se ha realizado no diseñé este programa de principio a fin en su forma actual y, sobre todo, no espero que pueda crear programas limpios y elegantes a la primera. si algo hemos aprendido en las dos últimas décadas es que la programación es un arte más que una ciencia. para escribir código limpio, primero debe crear código imperfecto y después limpiarlo. no debería sorprenderle. ya lo aprendimos en el colegio cuando los profesores (normalmente en vano) nos obligaban a crear borradores de nuestras redacciones. el proceso, nos decían, era escribir un primer borrador, después otro, y después otros muchos hasta lograr una versión definitiva. para escribir redacciones limpias, el refinamiento debía ser continuado. muchos programadores noveles (como sucede con los alumnos) no siguen este consejo. creen que el objetivo principal es que el programa funcione. una vez que lo consiguen, pasan a la siguiente tarea, y conservan el estado funcional del programa, sea cual sea. los programadores 263