factual = actual; } public string compact(string message) { if (fexpected == null || factual == null || arestringsequal()) return assert.format(message, fexpected, factual); findcommonprefix(); findcommonsuffix(); string expected = compactstring(fexpected); string actual = compactstring(factual); return assert.format(message, expected, actual); } private string compactstring(string source) { string result = delta_start + source.substring(fprefix, source.length() - fsuffix + 1) + delta_end; if (fprefix > 0) result = computecommonprefix() + result; if (fsuffix > 0) result = result + computecommonsuffix(); return result; } private void findcommonprefix() { fprefix = 0; int end = math.min(fexpected.length(), factual.length()); for (; fprefix < end; fprefix++) { if (fexpected.charat(fprefix) != factual.charat(fprefix)) break; } } private void findcommonsuffix() { int expectedsuffix = fexpected.length() - 1; int actualsuffix = factual.length() - 1; for (; actualsuffix >= fprefix && expectedsuffix >= fprefix; actualsuffix--, expectedsuffix--) { if (fexpected.charat(expectedsuffix) != factual.charat(actualsuffix)) break; } fsuffix = fexpected.length() - expectedsuffix; } private string computecommonprefix() { return (fprefix > fcontextlength ? ellipsis : “”) + fexpected.substring(math.max(0, fprefix - fcontextlength), fprefix); } private string computecommonsuffix() { int end = math.min(fexpected.length() - fsuffix + 1 + fcontextlength, fexpected.length()); 325