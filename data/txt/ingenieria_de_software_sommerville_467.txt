450 capítulo 16 ■ reutilización de software 16.7. ¿por qué numerosas compañías grandes eligieron sistemas erp como la base para su sistema de información organizacional? ¿qué problemas podrían surgir al implementar a gran escala un sistema erp en una organización? 16.8. identifique seis posibles riesgos que puedan surgir cuando los sistemas se construyen usando cots. ¿qué acciones recomendaría emprender a una compañía para reducir esos riesgos? 16.9. exponga por qué se necesitan generalmente adaptadores cuando se construyen sistemas mediante la integración de productos cots. describa tres problemas prácticos que pudieran surgir al escribir software adaptador para vincular dos productos de aplicación cots. 16.10. la reutilización de software plantea algunos conflictos de derechos de autor y propiedad intelectual. si un cliente paga a un contratista de software para desarrollar un sistema, ¿quién tiene el derecho de reutilizar el código desarrollado? ¿el contratista de software tiene el derecho a usar dicho código como base para un componente genérico? ¿qué mecanismos de pago se podrían usar para compensar a los proveedores de componentes reutilizables? analice estos temas y otros conflictos éticos asociados con la reutilización de software. referencias baker, t. (2002). “lessons learned integrating cots into systems”. proc. iccbss 2002 (1st int. conf on cots-based software systems), orlando, fla:: springer, 21–30. balk, l. d. y kedia, a. (2000). “ppt: a cots integration case study”. proc. int. conf. on software eng., limerick, irlanda: acm press, 42–9.baumer, d., gryczan, g., knoll, r., lilienthal, c., riehle, d. y zullighoven, h. (1997). “framework development for large systems”. comm. acm, 40 (10), 52–9. boehm, b. y abts, c. (1999). “cots integration: plug and pray?” ieee computer, 32 (1), 135–38. brownsword, l. y morris, e. (2003). “the good news about cots”. http://www.sei.cmu.edu/news-at-sei/features/2003/1q03/feature-1-1q03.htm cusamano, m. (1989). “the software factory: a historical interpretation”. ieee software, 6 (2), 23–30. fayad, m. e. y schmidt, d. c. (1997). “object-oriented application frameworks”. comm. acm, 40 (10), 32–38.gamma, e., helm, r., johnson, r. y vlissides, j. (1995). design patterns: elements of reusable object-oriented software. reading, mass.: addison-wesley. garlan, d., allen, r. y ockerbloom, j. (1995). “architectural mismatch: why reuse is so hard”. ieee software, 12 (6), 17–26. garlan, d., allen, r. y ockerbloom, j. (2009). “architectural mismatch: why reuse is still so hard”. ieee software, 26 (4), 66–9. griss, m. l. y wosser, m. (1995). “making reuse work at hewlett-packard”. ieee software, 12 (1), 105–7. m16_sommerville_ingenieria_1ed_se_423-451.indd  450m16_sommerville_ingenieria_1ed_se_423-451.indd  450 3/18/11  5:02:14 pm3/18/11  5:02:14 pm