referencias 759 [kra88] krasner, g. y s. pope, “a cookbook for using the model-view-controller user interface paradigm in smalltalk-80”, journal of object-oriented programming , vol. 1, núm. 3, agosto-septiembre 1988, pp. 26- 49. [kra95] kraul, r. y l. streeter, “coordination in software development”, cacm, vol. 38, núm. 3, marzo 1995, pp. 69-81. [kru05] krutchen, p., “software design in a postmodern era”, ieee software, vol. 22, núm. 2, marzo-abril 2005, pp. 16-18. [kru06] kruchten, p., h. obbink y j. stafford (eds.), “software architectural” (número especial), ieee software, vol. 23, núm. 2, marzo-abril, 2006. [kur05] kurzweil, r., the singularity is near, penguin books, 2005. [kyb84] kyburg, h. e., theory and measurement, cambridge university press, 1984.[laa00] laakso, s., et al., “improved scroll bars”, chi 2000 conf. proc. , acm, 2000, pp. 97-98, disponible en www.cs.helsinki.fi/u/salaakso/patterns/. [lai02] laitenberger, a., “a survey of software inspection technologies”, en handbook on software enginee- ring and knowledge engineering, world scientific publishing company, 2002. [lam01] lam, w., “testing e-commerce systems: a practical guide”, ieee it pro, marzo-abril 2001, pp. 19-28. [lan01] lange, m., “it’s testing time! patterns for testing software”, junio 2001, descargable de www.testing. com/test-patterns/patterns/index.html. [lan02] land, r., “a brief survey of software architecture”, technical report, dept. of computer engineering, mälardalen university, suecia, febrero 2002. [leh97a] lehman, m. y l. belady, program evolution: processes of software change, academic press, 1997. [leh97b] lehman, m., et al., “metrics and laws of software evolution—the nineties view”, proceedings of the 4a. international software metrics symposium (metrics ’97), ieee, 1997, descargable de www.ece.utexas.edu/~perry/work/papers/feast1.pdf. [let01] lethbridge, t. y r. laganiere, object-oriented software engineering: practical software development using uml and java, mcgraw-hill, 2001. [let03a] lethbridge, t., personal communication on domain analysis, mayo 2003.[let03b] lethbridge, t., personal communication on software metrics, junio 2003.[lev95] leveson, n. g., safeware: system safety and computers, addison-wesley, 1995. [lev01] levinson, m., “let’s stop wasting $78 billion a year”, cio magazine, octubre 15, 2001, disponible en www.cio.com/archive/101501/wasting.html. [lew06] lewicki, r., b. barry y d. saunders, essentials of negotiation, mcgraw-hill, 2006. [lie03] lieberherr, k., “demeter: aspect-oriented programming”, mayo 2003, disponible en www.ccs.neu. edu/home/lieber/lod.html. [lin79] linger, r., h. mills y b. witt, structured programming, addison-wesley, 1979. [lin88] linger, r. m. y h. d. mills, “a case study in cleanroom software engineering: the ibm cobol struc- turing facility”, proc. compsac ’88, chicago, octubre 1988. [lin94] linger, r., “cleanroom process model”, ieee software, vol. 11, núm. 2, marzo 1994, pp. 50-58. [lis88] liskov, b., “data abstraction and hierarchy”, sigplan notices, vol. 23, núm. 5, mayo 1988. [liu98] liu, k., et al., “report on the first sebpc workshop on legacy systems”, durham university, febrero 1998, disponible en www.dur.ac.uk/csm/saba/legacy-wksp1/report.html. [lon02] longstreet, d., “fundamental of function point analysis”, longstreet consulting, inc., 2002, dispo- nible en www.ifpug.com/fpafund.htm. [lor94] lorenz, m. y j. kidd, object-oriented software metrics, prentice hall, 1994. [maa07] maassen, o. y s. stelting, “creational patterns: creating objects in an oo system”, 2007, disponible en www.informit.com/articles/article.asp?p=26452&rl=1. [man81] mantai, m., “the effect of programming team structures on programming tasks”, cacm, vol. 24, núm. 3, marzo 1981, pp. 106-113. [man97] mandel, t., the elements of user interface design, wiley, 1997. [mar94] marick, b., the craft of software testing, prentice hall, 1994. [mar00] martin, r., “design principles and design patterns”, descargable de www .objectmentor .com, 2000. [mar01] marciniak, j. j. (ed.), encyclopedia of software engineering, 2a. ed., wiley, 2001. [mar02] marick, b., “software testing patterns”, 2002, www.testing.com/test-patterns/ index.html. [mcc76] mccabe, t., “a software complexity measure”, ieee trans. software engineering, vol. se-2, diciem- bre 1976, pp. 308-320. [mcc77] mccall, j., p. richards y g. walters, “factors in software quality”, tres volúmenes, ntis ad-a049- 014, 015, 055, noviembre 1977. [mcc94] mccabe, t. j. y a. h. watson, “software complexity”, crosstalk, vol. 7, núm. 12, diciembre 1994, pp. 5-9. [mcc96] mcconnell, s., “best practices: daily build and smoke test”, ieee software, vol. 13, núm. 4, julio 1996, pp. 143-144. [mcc98] mcconnell, s., software project survival guide, microsoft press, 1998.[mcc99] mcconnell, s., “software engineering principles”, ieee software, vol. 16, núm. 2, marzo-abril 1999, disponible en www.stevemcconnell.com/ieeesoftware/eic04.htm. [mcc04] mcconnell, s., code complete, microsoft press, 2004. 35pressman(751-766)refer.indd  75935pressman(751-766)refer.indd  759 2/2/10  11:41:192/2/10  11:41:19