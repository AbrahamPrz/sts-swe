REFERENCIAS 759 [Kra88] Krasner, G. y S. Pope, “A Cookbook for Using the Model-View-Controller User  Interface Paradigm in  Smalltalk-80”, Journal of Object-Oriented Programming , vol. 1, núm. 3, agosto-septiembre 1988, pp. 26- 49. [Kra95] Kraul, R. y L. Streeter, “Coordination in Software Development”, CACM, vol. 38, núm. 3, marzo 1995,  pp. 69-81. [Kru05] Krutchen, P., “Software Design in a Postmodern Era”, IEEE Software, vol. 22, núm. 2, marzo-abril  2005, pp. 16-18. [Kru06] Kruchten, P., H. Obbink y J. Stafford (eds.), “Software Architectural” (número especial), IEEE Software,  vol. 23, núm. 2, marzo-abril, 2006. [Kur05] Kurzweil, R., The Singularity Is Near, Penguin Books, 2005. [Kyb84] Kyburg, H. E., Theory and Measurement, Cambridge University Press, 1984.[Laa00] Laakso, S., et al., “Improved Scroll Bars”, CHI 2000 Conf. Proc. , ACM, 2000, pp. 97-98, disponible en  www.cs.helsinki.fi/u/salaakso/patterns/. [Lai02] Laitenberger, A., “A Survey of Software Inspection Technologies”, en Handbook on Software Enginee- ring and Knowledge Engineering, World Scientific Publishing Company, 2002. [Lam01] Lam, W., “Testing E-Commerce Systems: A Practical Guide”, IEEE IT Pro, marzo-abril 2001, pp. 19-28. [Lan01] Lange, M., “It’s Testing Time! Patterns for Testing Software”, junio 2001, descargable de www.testing. com/test-patterns/patterns/index.html. [Lan02] Land, R., “A Brief Survey of Software Architecture”, Technical Report, Dept. of Computer Engineering,  Mälardalen University, Suecia, febrero 2002. [Leh97a] Lehman, M. y L. Belady, Program Evolution: Processes of Software Change, Academic Press, 1997. [Leh97b] Lehman, M., et al., “Metrics and Laws of Software Evolution—The Nineties View”, Proceedings of the  4a. International Software Metrics Symposium (METRICS ’97), IEEE, 1997, descargable de www.ece.utexas.edu/~perry/work/papers/feast1.pdf. [Let01] Lethbridge, T. y R. Laganiere, Object-Oriented Software Engineering: Practical Software Development  Using UML and Java, McGraw-Hill, 2001. [Let03a] Lethbridge, T., Personal communication on domain analysis, mayo 2003.[Let03b] Lethbridge, T., Personal communication on software metrics, junio 2003.[Lev95] Leveson, N. G., Safeware: System Safety and Computers, Addison-Wesley, 1995. [Lev01] Levinson, M., “Let’s Stop Wasting $78 billion a Year”, CIO Magazine, octubre 15, 2001, disponible en  www.cio.com/archive/101501/wasting.html. [Lew06] Lewicki, R., B. Barry y D. Saunders, Essentials of Negotiation, McGraw-Hill, 2006. [Lie03] Lieberherr, K., “Demeter: Aspect-Oriented Programming”, mayo 2003, disponible en www.ccs.neu. edu/home/lieber/LoD.html. [Lin79] Linger, R., H. Mills y B. Witt, Structured Programming, Addison-Wesley, 1979. [Lin88] Linger, R. M. y H. D. Mills, “A Case Study in Cleanroom Software Engineering: The IBM COBOL Struc- turing Facility”, Proc. COMPSAC ’88, Chicago, octubre 1988. [Lin94] Linger, R., “Cleanroom Process Model”, IEEE Software, vol. 11, núm. 2, marzo 1994, pp. 50-58. [Lis88] Liskov, B., “Data Abstraction and Hierarchy”, SIGPLAN Notices, vol. 23, núm. 5, mayo 1988. [Liu98] Liu, K., et al., “Report on the First SEBPC Workshop on Legacy Systems”, Durham University, febrero  1998, disponible en www.dur.ac.uk/CSM/SABA/legacy-wksp1/report.html. [Lon02] Longstreet, D., “Fundamental of Function Point Analysis”, Longstreet Consulting, Inc., 2002, dispo- nible en www.ifpug.com/fpafund.htm. [Lor94] Lorenz, M. y J. Kidd, Object-Oriented Software Metrics, Prentice Hall, 1994. [Maa07] Maassen, O. y S. Stelting, “Creational Patterns: Creating Objects in an OO System”, 2007, disponible  en www.informit.com/articles/article.asp?p=26452&rl=1. [Man81] Mantai, M., “The Effect of Programming Team Structures on Programming Tasks”, CACM, vol. 24,  núm. 3, marzo 1981, pp. 106-113. [Man97] Mandel, T., The Elements of User Interface Design, Wiley, 1997. [Mar94] Marick, B., The Craft of Software Testing, Prentice Hall, 1994. [Mar00] Martin, R., “Design Principles and Design Patterns”, descargable de www  .objectmentor  .com, 2000. [Mar01] Marciniak, J. J. (ed.), Encyclopedia of Software Engineering, 2a. ed., Wiley, 2001. [Mar02] Marick, B., “Software Testing Patterns”, 2002, www.testing.com/test-patterns/  index.html. [McC76] McCabe, T., “A Software Complexity Measure”, IEEE Trans. Software Engineering, vol. SE-2, diciem- bre 1976, pp. 308-320. [McC77] McCall, J., P. Richards y G. Walters, “Factors in Software Quality”, tres volúmenes, NTIS AD-A049- 014, 015, 055, noviembre 1977. [McC94] McCabe, T. J. y A. H. Watson, “Software Complexity”, CrossTalk, vol. 7, núm. 12,  diciembre 1994, pp.  5-9. [McC96] McConnell, S., “Best Practices: Daily Build and Smoke Test”, IEEE Software, vol. 13, núm. 4, julio  1996, pp. 143-144. [McC98] McConnell, S., Software Project Survival Guide, Microsoft Press, 1998.[McC99] McConnell, S., “Software Engineering Principles”, IEEE Software, vol. 16, núm. 2, marzo-abril 1999,  disponible en www.stevemcconnell.com/ieeesoftware/eic04.htm. [McC04] McConnell, S., Code Complete, Microsoft Press, 2004. 35Pressman(751-766)Refer.indd   75935Pressman(751-766)Refer.indd   759 2/2/10   11:41:192/2/10   11:41:19