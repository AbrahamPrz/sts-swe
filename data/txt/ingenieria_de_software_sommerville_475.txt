458  Capítulo 17 ■ Ingeniería de software basada en componentes una interfaz de gestión, a la que se accede a través de sensorManagement. Esta interfaz  se diseñó para conectarse a diferentes tipos de sensor, así que no incluye operaciones de sensor específicas, tales como Test, provideReading, etcétera. En vez de ello, los coman-dos que usa un tipo específico de sensor se incrustan en una cadena, que es un parámetro para las operaciones en la interfaz “requiere”. Los componentes de adaptador analizan gramaticalmente ( parse) esta cadena y traducen los comandos incrustados en la interfaz  de control específica de cada tipo de sensor. Más adelante en este capítulo se estudia el uso de los adaptadores, y se muestra cómo los componentes recolectores de datos se vin-culan con un sensor (figura 17.12). Una diferencia crucial entre un componente como servicio externo y un componente como elemento de programa es que los servicios son entidades independientes por com-pleto. No tienen una interfaz “requiere”. Diferentes programas pueden usar dichos servi-cios sin necesidad de implementar soporte adicional requerido por el servicio.  17.1.1 Modelos de componentes Un modelo de componentes es una definición de estándares para implementación, docu-mentación y despliegue de componentes. Estos estándares se establecen con la finalidad de que los desarrolladores de componentes se aseguren de que éstos pueden interoperar. También funcionan para proveedores de infraestructuras de ejecución de componentes que ofrecen middleware para apoyar la ejecución de componentes. Se han propuesto muchos modelos de componentes, pero ahora los modelos más importantes son el modelo WebServices, el modelo Enterprise Java Beans (EJB) de Sun, y el modelo .NET de Microsoft (Lau y Wang, 2007). Weinreich y Sametinger (2001) analizan los elementos básicos de un modelo ideal de componentes. En la figura 17.4 se resumen esos elementos de modelo. Este diagrama muestra que los elementos de un modelo de componentes definen las interfaces de com-ponentes, la información que necesita usar el componente en un programa y cómo debe implementarse un componente: 1. Interfaces  Los componentes se definen al especificar sus interfaces. El modelo  de componentes especifica cómo deben definirse las interfaces y los elementos,  tales como los nombres de operación, los parámetros y las excepciones que deben incluirse en la definición de la interfaz. El modelo también debe especificar el len-guaje usado para definir las interfaces de componentes. Para servicios Web, éste es sensorDatasensorManagementaddSensor removeSensorstartSensorstopSensortestSensor listAllreportinitializeInterfaz Proporciona Interfaz Requiere Recolector de datos Figura 17.3 Modelo  de componente  recopilador de datos M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   458M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   458 3/18/11   5:03:05 PM3/18/11   5:03:05 PM