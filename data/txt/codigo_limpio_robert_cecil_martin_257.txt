else if (elementtail.equals(“[*]”)) marshalers.put(elementid, new stringarrayargumentmarshaler()); else throw new argsexception(invalid_argument_format, elementid, elementtail); } private void validateschemaelementid(char elementid) throws argsexception { if {!character.isletter(elementid)) throw new argsexception(invalid_argument_name, elementid, null); } private void parseargumentstrings(list<string> argslist) throws argsexception { for (currentargument = argslist.listiterator(); currentargument.hasnext();) { string argstring = currentargument.next(); if (argstring.startswith(“-”)) { parseargumentcharacters(argstring.substring(1)); } else { currentargument.previous(); break; } } } private void parseargumentcharacters(string argchars) throws argsexception { for (int i = 0; i < argchars.length(); i++) parseargumentcharacter(argchars.charat(i)); } private void parseargumentcharacter(char argchar) throws argsexception { argumentmarshaler m = marshalers.get(argchar); if (m == null) { throw new argsexception (unexpected_argument, argchar, null); } else { argsfound.add(argchar); try { m.set(currentargument); } catch (argsexception e) { e.seterrorargumentid(argchar); throw e; } } } public boolean has(char arg) { return argsfound.contains(arg); } public int nextargument() { 258