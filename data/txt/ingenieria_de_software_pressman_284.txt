capítulo 10 diseño en el nivel de componentes 253 las construcciones ponían el énfasis en el “mantenimiento del dominio funcional”. es decir, cada construcción tenía una estructura lógica predecible que se introducía al principio y salía por el final, lo que permitía que el lector siguiera el flujo del procedimiento con más facilidad. las construcciones son secuencia, condición y repetición. la secuencia implementa pasos de procesamiento que son esenciales en la especificación de cualquier algoritmo. la condición proporciona el medio para seleccionar un procesamiento con base en algún suceso lógico y la repetición permite la ejecución de lazos. estas tres construcciones son fundamentales para la programación estructurada, técnica importante del diseño en el nivel de componentes. las construcciones estructuradas fueron propuestas para limitar el diseño del software orien- tado al procedimiento a un número pequeño de estructuras lógicas predecibles. la medición de la complejidad (véase el capítulo 23) indica que el uso de las construcciones estructuradas re-duce la complejidad del programa y con ello mejora la legibilidad y la facilidad de realizar prue-bas y de dar mantenimiento. el uso de un número limitado de construcciones lógicas también contribuye a un proceso de comprensión humana que los sicólogos denominan lotificación. para entender este proceso, considere el lector la forma en la que está leyendo esta página. no nece-sita leer las letras en lo individual, sino reconocer patrones o grupos de letras que forman pala-bras o frases. las construcciones estructuradas son grupos lógicos que permiten al lector reco-nocer elementos de procedimiento de un módulo, en vez de leer el diseño o el código línea por línea. la comprensión mejora cuando se encuentran patrones lógicos que es fácil reconocer. con tan sólo las tres construcciones estructuradas es posible diseñar e implantar cualquier programa, sin importar el área de aplicación o complejidad técnica. sin embargo, debe notarse que su empleo dogmático con frecuencia ocasiona dificultades prácticas. en la sección 10.5.1 se estudia esto con más detalles. 10.5.1 notación gráfica de diseño “una imagen vale más que mil palabras”, pero es importante saber de qué imagen se trata y cuáles serían las mil palabras. no hay duda de que herramientas gráficas, como el diagrama uml de actividades o el diagrama de flujo, constituyen patrones gráficos útiles que ilustran fá-cilmente detalles de procedimiento. no obstante, si se hace mal uso de las herramientas gráfi-cas, surge una imagen equivocada que conduce al software equivocado. el diagrama de actividades permite representar la secuencia, condición y repetición —todos los elementos de que consta la programación estructurada— y es descendiente de un diseño gráfico anterior (que todavía se utiliza mucho) llamado diagrama de flujo. como cualquier diagrama de actividades, el de flujo es muy simple. se emplea un rectángulo para indicar un paso de procesamiento. un rombo representa una condición lógica y las flechas indican el flujo del control. la figura 10.10 ilustra tres construcciones estructuradas. la secuencia se representa como dos cajas de procesamiento conectadas por una línea (flecha) de control. la condición, también llamada si-entonces-en otro caso, se ilustra como un rombo de decisión que, si se da el estado de “verdadero”, hace que ocurra la parte del entonces, y si el estado es “falso”, se invoca el procesamiento de la parte en otro caso. la repetición se representa con el uso de dos formas ligeramente distintas. las pruebas hacer mientras, prueban una condición y ejecutan repetida- mente un lazo de tareas mientras la condición sea verdadera. la parte repetir hasta primero ejecuta el lazo de la tarea y después prueba una condición y repite la tarea hasta que la condi-ción se vuelve falsa. la construcción selección (o caso seleccionar) que se aprecia en la figura en realidad es una extensión de la cláusula si-entonces-en otro caso . un parámetro se somete a prueba por medio de decisiones sucesivas hasta que ocurre una condición de “verdadero” y se ejecuta el procesamiento por la trayectoria de la parte caso. en general, el uso dogmático de construcciones estructuradas introduce ineficiencia cuando se requiere una salida de un grupo de lazos o condiciones anidadas. más importante aún, la complicación adicional de todas las pruebas lógicas y de la ruta de salida llega a oscurecer el 10pressman(234-264).indd  25310pressman(234-264).indd  253 26/1/10  17:33:2226/1/10  17:33:22