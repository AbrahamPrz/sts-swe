CAPÍTULO 17  ESTRATEGIAS DE PRUEBA DE SOFTWARE 395 a pruebas o por otras razones) no introducen comportamiento no planeado o errores adicio- nales. Las pruebas de regresión se pueden realizar manualmente, al volver a ejecutar un subcon- junto de todos los casos de prueba o usando herramientas de captura/reproducción automati-zadas. Las herramientas de captura/reproducción  permiten al ingeniero de software capturar  casos de prueba y resultados para una posterior reproducción y comparación. La suite de prueba  de regresión  (el subconjunto de pruebas que se va a ejecutar) contiene tres clases diferentes de  casos de prueba: • Una muestra representativa de pruebas que ejercitará todas las funciones de software. • Pruebas adicionales que se enfocan en las funciones del software que probablemente resulten afectadas por el cambio. • Pruebas que se enfocan en los componentes del software que cambiaron. Conforme avanza la prueba de integración, el número de pruebas de regresión puede vol- verse muy grande. Por tanto, la suite de pruebas de regresión debe diseñarse para incluir sola-mente aquellas que aborden una o más clases de errores en cada una de las funciones del programa principal. Es impráctico e ineficiente volver a ejecutar toda prueba para cada función del programa cada vez que ocurre un cambio. Prueba de humo.  La prueba de humo es un enfoque de prueba de integración que se usa  cuando se desarrolla software de producto. Se diseña como un mecanismo de ritmo para pro-yectos críticos en el tiempo, lo que permite al equipo del software valorar el proyecto de manera frecuente. En esencia, el enfoque de prueba de humo abarca las siguientes actividades:  1. Los componentes de software traducidos en código se integran en una construcción.  Una construcción incluye todos los archivos de datos, bibliotecas, módulos reutilizables y componentes sometidos a ingeniería que se requieren para implementar una o más funciones del producto.  2. Se diseña una serie de pruebas para exponer los errores que evitarán a la construcción  realizar adecuadamente su función. La intención debe ser descubrir errores “paralizan- tes” que tengan la mayor probabilidad de retrasar el proyecto.  3. La construcción se integra con otras construcciones, y todo el producto (en su forma  actual) se somete a prueba de humo diariamente. El enfoque de integración puede ser descendente o ascendente. La frecuencia diaria de las pruebas de todo el producto puede sorprender a algunos lectores.  Sin embargo, las pruebas constantes brindan, tanto a gerentes como a profesionales, una valo- ración realista del progreso de la prueba de integración. McConnell [McC96] describe la prueba de humo de la forma siguiente: La prueba de humo debe ejercitar todo el sistema de extremo a extremo. No tiene que ser exhaustiva,  pero debe poder exponer los problemas principales. La prueba de humo debe ser suficientemente profunda para que, si la construcción pasa, pueda suponer que es suficientemente estable para pro-barse con mayor profundidad. La prueba de humo proporciona algunos beneficios cuando se aplica sobre proyectos de  software complejos y cruciales en el tiempo: • Se minimiza el riesgo de integración . Puesto que las pruebas de humo se realizan diaria- mente, las incompatibilidades y otros errores paralizantes pueden descubrirse tempra- namente, lo que reduce la probabilidad de impacto severo sobre el calendario cuando se descubren errores.Cita: “Trate a la construcción diaria  como al latido del proyecto. Si no hay latido, el proyecto está muerto.” Jim McCarthyPUNTO CLAVE La prueba de humo puede  caracterizarse como una estrategia de integración constante. El software se reconstruye (con el agregado de nuevos componentes) y se prueba cada día. ¿Qué beneficios pueden derivarse de las pruebas de humo? ? 17Pressman(383-410).indd   39517Pressman(383-410).indd   395 21/1/10   10:59:2221/1/10   10:59:22