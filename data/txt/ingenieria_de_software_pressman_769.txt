738 APÉNDICE 1  INTRODUCCIÓN A UML caracteres de “espacio blanco” (por ejemplo, los caracteres espacio, tabulador, línea nueva y re- torno) y caracteres dentro de un comentario. Suponga que el compilador delega a un EliminadorEspacioBlancoyComentario  la labor  de avanzar sobre los caracteres de espacio blanco y sobre los caracteres dentro de un comen- tario, es decir, la labor de dicho objeto es leer los caracteres de entrada hasta que todos los caracteres de espacio blanco y comentario se leyeron, punto donde regresa el control al compi-lador para leer y procesar caracteres no en blanco y no de comentario. Piense en la manera en la que el objeto EliminadorEspacioBlancoyComentario  lee los caracteres y determina si el  siguiente carácter es de espacio blanco o parte de un comentario. El objeto puede verificar los espacios blancos, probando los siguientes caracteres contra “ ”, “\t”, “\n” y “\r”. ¿Pero cómo determina si el siguiente carácter es parte de un comentario? Por ejemplo, cuando ve “/” por primera vez, todavía no sabe si dicho carácter representa un operador división, parte del ope-rador /= o el comienzo de una línea o bloque de comentario. Para hacer esta determinación, EliminadorEspacioBlancoyComentario  necesita anotar el hecho de que vio una “/” y luego  moverse hacia el siguiente carácter. Si el carácter siguiente a “/” es otra “/” o un “*”, entonces EliminadorEspacioBlancoyComentario  sabe que ahora lee un comentario y puede avanzar  al final del comentario sin procesar o guardar algún carácter. Si el carácter siguiente al primer “/” es distinto a “/” o a “*”, entonces EliminadorEspacioBlancoyComentario  sabe que “/”  representa el operador división o parte del operador /= y, por tanto, avanza a través de los ca-racteres. En resumen, conforme EliminadorEspacioBlancoyComentario  lee los caracteres, nece- sita seguir la pista de muchas cosas, incluido si el carácter actual es espacio blanco, si el carác-ter previo que lee fue “/”, si actualmente lee caracteres en un comentario, si llegó al final del comentario, etc. Todos éstos corresponden a diferentes estados del objeto EliminadorEspacio- BlancoyComentario. En cada uno de estos estados, EliminadorEspacioBlancoyComenta- rio se comporta de manera diferente con respecto al siguiente carácter que lee. Para ayudarlo a visualizar todos los estados de este objeto y la manera en la que cambia de  estado, puede usar un diagrama de estado UML, como se muestra en la figura A1.13. Un diagrama de estado muestra los estados mediante rectángulos redondeados, cada uno de los cuales tiene un nombre en su mitad superior. También existe un círculo llamado “pseudoestado inicial”, que en realidad no es un estado y en vez de ello sólo apunta al estado inicial. En la figura A1.13, el estado start es el estado inicial. Las flechas de un estado a otro estado indican transiciones o  cambios en el estado del objeto. Cada transición se etiqueta con un evento disparador, una diagonal (/) y una actividad. Todas las partes de las etiquetas de transición son opcionales en los diagramas de estado. Si el objeto está en un estado y el evento disparador ocurre para una de sus transiciones, entonces se realiza dicha actividad de transición y el objeto toma un nuevo estado, indicado por la transición. Por ejemplo, en la figura A1.13, si el objeto EliminadorEs- pacioBlancoyComentario está en el estado start y el siguiente carácter es “/”, entonces Eli- minadorEspacioBlancoyComentario  avanza desde dicho carácter y cambia al estado vio ‘/’ .  Si el carácter después de “/” es otra “/”, entonces el objeto avanza al estado línea comentario  y permanece ahí hasta que lee un carácter de fin de línea. Si en vez de ello el siguiente carácter después de “/” es “*”, entonces el objeto avanza al estado bloque comentario y permanece ahí hasta que ve otro “*” seguido por un “/”, que indica el final del bloque comentario. Estudie el diagrama para asegurarse de que lo entiende. Observe que, después de avanzar por el espacio en blanco o por un comentario, EliminadorEspacioBlancoyComentario  regresa al estado  start y comienza de nuevo. Dicho comportamiento es necesario, pues puede haber varios co-mentarios sucesivos o caracteres de espacio en blanco antes de cualquier otro carácter en el código fuente Java. Un objeto puede transitar a un estado final, lo que se indica mediante un círculo negro con  un círculo blanco alrededor de él, lo que indica que ya no hay más transiciones. En la figura  33Pressman(725-742)app1.indd   73833Pressman(725-742)app1.indd   738 20/1/10   19:01:5120/1/10   19:01:51