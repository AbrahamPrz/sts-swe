476  Capítulo 17 ■ Ingeniería de software basada en componentes ■ Cuando se componen componentes de reutilización que no se escribieron para la aplicación que  usted desea, tal vez sea necesario escribir adaptadores o “código pegamento” para reconciliar las interfaces de los diferentes componentes. ■ Cuando elija composiciones, deberá considerar la funcionalidad requerida del sistema, los requerimientos no funcionales y la facilidad con la que puede sustituirse un componente cuando cambie el sistema. LECTURAS SUGERIDAS Component-based Software Engineering: Putting the Pieces Together.  Este libro es una colección  de ensayos de varios autores acerca de diferentes aspectos de la CBSE. Como todas las colecciones, es una mezcla de temas, pero tiene mejor cobertura de los conflictos generales de la ingeniería de software con componentes que el libro de Szyperski. (G. T. Heineman y W. T. Councill, Addison-Wesley, 2001.) Component Software: Beyond Object-Oriented Programming, 2nd ed.  Esta edición actualizada del  primer libro acerca de CBSE trata conflictos técnicos y no técnicos en CBSE. Contiene más detalles  sobre tecnologías específicas que el libro de Heineman y Councill, e incluye un profundo análisis de los conflictos de mercado. (C. Szyperski, Addison-Wesley, 2002.) “Specification, Implementation and Deployment of Components”. Una buena introducción a los  fundamentos de CBSE. El mismo conflicto del CACM incluye artículos acerca de componentes y el desarrollo basado en componentes. (I. Crnkovic, B. Hnich, T. Jonsson y Z. Kiziltan, Comm. ACM,  45 (10), octubre de 2002.) http:/ /dx. doi. org/ 10. 1145/ 570907. 570928. “Software Component Models”. Éste es un análisis amplio de los modelos de componentes  comerciales y de investigación que clasifican dichos modelos y explican las diferencias entre ellos. (K-K. Lau y Z. Wang, IEEE Transactions on Software Engineering, 33 (10), octubre de 2007.) http:/ /dx. doi. org/ 10. 1109/ TSE. 2007. 70726. EJERCICIOS  17.1. ¿Por qué es importante que todas las interacciones de los componentes se definan mediante interfaces “requiere” y “proporciona”?  17.2. El principio de independencia de componentes significa que debe ser posible sustituir un componente con otro que se implemente en una forma completamente diferente. Usando un ejemplo, explique cómo tal sustitución de componentes podría tener consecuencias indeseables y conducir a una falla del sistema. M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   476M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   476 3/18/11   5:03:06 PM3/18/11   5:03:06 PM