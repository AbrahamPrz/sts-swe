private void validateschemaelementid(char elementid) throws argsexception { if (!character.isletter(elementid)) { throw new argsexception ( “bad character:” + elementid + “in args format: ” + schema); } } … private void parseelement(char argchar) throws argsexception { if (setargument(argchar)) argsfound.add(argchar); else { unexpectedarguments.add(argchar); errorcode = argsexception .errorcode.unexpected_argument; valid = false; } } … private class stringargumentmarshaler implements argumentmarshaler { private string stringvalue = “”; public void set(iterator<string> currentargument) throws argsexception { try { stringvalue = currentargument.next(); } catch (nosuchelementexception e) { errorcode = argsexception .errorcode.missing_string; throw new argsexception(); } } public object get() { return stringvalue; } } private class integerargumentmarshaler implements argumentmarshaler { private int intvalue = 0; public void set (iterator<string> currentargument) throws argsexception { string parameter = null; try { parameter = currentargument.next(); intvalue = integer.parseint(parameter); } catch (nosuchelementexception e) { errorcode = argsexception.errorcode.missing_integer; throw new argsexception (); } catch (numberformatexception e) { errorparameter = parameter; errorcode = argsexception .errorcode.invalid_integer; throw new argsexception (); 308