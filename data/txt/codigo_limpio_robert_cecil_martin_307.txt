private void validateSchemaElementId(char elementId) throws  ArgsException  { if (!Character.isLetter(elementId)) { throw new  ArgsException ( “Bad character:” + elementId + “in Args format: ” + schema); } } … private void parseElement(char argChar) throws  ArgsException  { if (setArgument(argChar)) argsFound.add(argChar); else { unexpectedArguments.add(argChar); errorCode =  ArgsException .ErrorCode.UNEXPECTED_ARGUMENT; valid = false; } } … private class StringArgumentMarshaler implements ArgumentMarshaler { private String stringValue = “”; public void set(Iterator<String> currentArgument) throws ArgsException { try { stringValue = currentArgument.next(); } catch (NoSuchElementException e) { errorCode =  ArgsException .ErrorCode.MISSING_STRING; throw new ArgsException(); } } public Object get() { return stringValue; } } private class IntegerArgumentMarshaler implements ArgumentMarshaler { private int intValue = 0; public void set (Iterator<String> currentArgument) throws  ArgsException  { String parameter = null; try { parameter = currentArgument.next(); intValue = Integer.parseInt(parameter); } catch (NoSuchElementException e) { errorCode = ArgsException.ErrorCode.MISSING_INTEGER; throw new  ArgsException (); } catch (NumberFormatException e) { errorParameter = parameter; errorCode =  ArgsException .ErrorCode.INVALID_INTEGER; throw new  ArgsException (); 308