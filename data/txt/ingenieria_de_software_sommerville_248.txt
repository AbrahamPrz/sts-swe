Capítulo 8 ■ Lecturas sugeridas  231 PUNTOS CLAVE ■ Las pruebas sólo pueden mostrar la presencia de errores en un programa. Si embargo,  no pueden garantizar que no surjan fallas posteriores. ■ Las pruebas de desarrollo son responsabilidad del equipo de desarrollo del software. Un equipo independiente debe responsabilizarse de probar un sistema antes de darlo a conocer a los clientes. En el proceso de pruebas de usuario, clientes o usuarios del sistema brindan datos de prueba y verifican que las pruebas sean exitosas. ■ Las pruebas de desarrollo incluyen pruebas de unidad, donde se examinan objetos y métodos individuales; pruebas de componente, donde se estudian grupos de objetos relacionados; y pruebas del sistema, donde se analizan sistemas parciales o completos. ■ Cuando pruebe software, debe tratar de “romperlo” mediante la experiencia y los lineamientos que elijan los tipos de casos de prueba que hayan sido efectivos para descubrir defectos en otros sistemas. ■ Siempre que sea posible, se deben escribir pruebas automatizadas. Las pruebas se incrustan en un programa que puede correrse cada vez que se hace un cambio al sistema. ■ El desarrollo de la primera prueba es un enfoque de desarrollo, donde las pruebas se escriben antes de que se pruebe el código. Se realizan pequeños cambios en el código, y éste se refactoriza hasta que todas las pruebas se ejecuten exitosamente. ■ Las pruebas de escenario son útiles porque imitan el uso práctico del sistema. Implican trazar un escenario de uso típico y utilizarlo para derivar casos de prueba. ■ Las pruebas de aceptación son un proceso de prueba de usuario, donde la meta es decidir si el software es suficientemente adecuado para desplegarse y utilizarse en su entorno operacional. LECTURAS SUGERIDAS “How to design practical test cases”. Un artículo práctico sobre el diseño de casos de prueba elaborado por un publicista de una compañía japonesa, que tiene una muy buena reputación debido a que entrega el software con muy pocas fallas. (T. Yamaura, IEEE Software, 15 (6), noviembre  1998.) http:/ /dx. doi. org/ 10. 1109/ 52. 730835. How to Break Software: A Practical Guide to Testing. Se trata de un libro más práctico que teórico,  sobre las pruebas de software. El autor presenta un conjunto de lineamientos basados en su experiencia relativa al diseño de pruebas, que probablemente sean efectivas en la detección de fallas del sistema. (J. A. Whittaker, Addison-Wesley, 2002.) “Software Testing and Verification”. Este número especial del IBM Systems Journal comprende  algunos ensayos de pruebas, incluido un buen panorama. Además, incluye ensayos de métricas de  prueba y automatización de pruebas. (IBM Systems Journal, 41 (1), enero 2002.)  “Test-driven development”. Este número especial es acerca del desarrollo dirigido por pruebas, el  cual incluye un buen panorama general del TDD, así como ensayos de experiencia sobre cómo se usó el TDD para diferentes tipos de software. (IEEE Software, 24 (3) mayo/junio 2007.) M08_SOMMERVILLE_INGENIERIA_1ED_SE_205-233.indd   231M08_SOMMERVILLE_INGENIERIA_1ED_SE_205-233.indd   231 3/18/11   5:40:00 PM3/18/11   5:40:00 PM