200 capítulo 7 ■ diseño e implementación 7.4.1 licencia de código abierto aunque un principio fundamental del desarrollo en código abierto es que el código fuente debe estar disponible por entero, esto no significa que cualquiera puede hacer lo que desee con el código. por ley, el desarrollador del código (una compañía o un individuo) todavía es propietario del código. puede colocar restricciones sobre cómo se le utiliza al incluir condiciones legales en una licencia de software de código abierto (st. laurent, 2004). algunos desarrolladores de código abierto creen que si un componente de código abierto se usa para desarrollar un nuevo sistema, entonces dicho sistema también debe ser de código abierto. otros están satisfechos de que su código se use sin esta restricción. los sistemas desarrollados pueden ser propietarios y venderse como sistemas de código cerrado. la mayoría de las licencias de código abierto se derivan de uno de tres modelos gene-rales: 1. la licencia pública general gnu se conoce como licencia “recíproca”; de manera simple, significa que si usted usa software de código abierto que esté permitido bajo la licencia gpl, entonces debe hacer que dicho software sea de código abierto. 2. la licencia pública menos general gnu es una variante de la licencia anterior, en la que usted puede escribir componentes que se vinculen con el código abierto, sin tener que publicar el código de dichos componentes. sin embargo, si cambia el com-ponente permitido, entonces debe publicar éste como código abierto. 3. la licencia berkeley standard distribution es una licencia no recíproca, lo cual sig- nifica que usted no está obligado a volver a publicar algún cambio o modificación al código abierto. puede incluir el código en sistemas propietarios que se vendan. si usa componentes de código abierto, debe reconocer al creador original del código. los temas sobre permisos son importantes porque si usa software de código abierto como parte de un producto de software, entonces tal vez esté obligado por los términos de la licencia a hacer que su propio producto sea de código abierto. si trata de vender su software, quizá desee mantenerlo en secreto. esto significa que tal vez quiera evitar el uso de software de código abierto con licencia gpl en su desarrollo. si construye un software que opere en una plataforma de código abierto, como linux, en tal caso las licencias no son problema. sin embargo, tan pronto como comience a incluir componentes de código abierto en su software, necesita establecer procesos y bases de datos para seguir la pista de lo que se usó y sus condiciones de licencia. bayersdorfer (2007) sugiere que las compañías que administran proyectos que usan código abierto deben: 1. establecer un sistema para mantener la información sobre los componentes de código abierto que se descargan y usan. tienen que conservar una copia de la licen- cia para cada componente que sea válida al momento en que se usó el componente. las licencias suelen cambiar, así que necesita conocer las condiciones acordadas. 2. estar al tanto de los diferentes tipos de licencias y entender cómo está autorizado un componente antes de usarlo. puede decidir el uso de un componente en un sistema, pero no en otro, porque planea usar dichos sistemas en diferentes formas. m07_sommerville_ingenieria_1ed_se_176-204.indd  200m07_sommerville_ingenieria_1ed_se_176-204.indd  200 3/18/11  4:50:14 pm3/18/11  4:50:14 pm