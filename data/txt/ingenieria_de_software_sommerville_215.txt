198  Capítulo 7 ■ Diseño e implementación embebidos, donde el objetivo es usualmente una sola computadora. Sin embargo, para  sistemas distribuidos, es necesario decidir sobre las plataformas específicas donde se desplegarán los componentes. Los conflictos que hay que considerar al tomar esta deci-sión son: 1. Los requerimientos de hardware y software de un componente Si un componente  se diseña para una arquitectura de hardware específica, o se apoya en algún otro sis-tema de software, tiene que desplegarse por supuesto en una plataforma que brinde el soporte requerido de hardware y software. 2. Los requerimientos de disponibilidad del sistema Los sistemas de alta disponibili-dad pueden necesitar que los componentes se desplieguen en más de una plataforma. Esto significa que, en el caso de una falla de plataforma, esté disponible una imple-mentación alternativa del componente. 3. Comunicaciones de componentes Si hay un alto nivel de tráfico de comunicacio-nes entre componentes, por lo general tiene sentido desplegarlos en la misma pla-taforma o en plataformas que estén físicamente cercanas entre sí. Esto reduce la latencia de comunicaciones, es decir, la demora entre el tiempo que transcurre desde el momento en que un componente envía un mensaje hasta que otro lo recibe.  Puede documentar sus decisiones sobre el despliegue de hardware y software usando diagramas de despliegue UML, que muestran cómo los componentes de software se dis-tribuyen a través de plataformas de hardware. Si desarrolla un sistema embebido, quizá deba tomar en cuenta las características del objetivo, como su tamaño físico, capacidades de poder, necesidad de respuestas en tiempo real para eventos de sensor, características físicas de los actuadores, y sistema operativo de tiempo real. En el capítulo 20 se estudia la ingeniería de los sistemas embebidos.  7.4 Desarrollo de código abierto El desarrollo de código abierto es un enfoque al desarrollo de software en que se publica el código de un sistema de software y se invita a voluntarios a participar en el proceso de desarrollo (Raymond, 2001). Sus raíces están en la Free Software Foundation (http://www.fsf.org), que aboga porque el código fuente no debe ser propietario sino, más bien, tiene que estar siempre disponible para que los usuarios lo examinen y modifiquen como deseen. Existía la idea de que el código estaría controlado y sería desarrollado por un pequeño grupo central, en vez de por usuarios del código. El software de código abierto extendió esta idea al usar Internet para reclutar a una población mucho mayor de desarrolladores voluntarios. La mayoría de ellos también son usuarios del código. En principio al menos, cualquier contribuyente a un proyecto de código abierto puede reportar y corregir bugs, así como proponer nuevas características y funcionalidades. Sin embargo, en la práctica, los sistemas exitosos de código abierto aún se apoyan en un grupo central de desarrolladores que controlan los cambios al software. Desde luego, el producto mejor conocido de código abierto es el sistema operativo Linux, utilizado ampliamente como sistema servidor y, cada vez más, como un entorno de escritorio. Otros productos de código abierto importantes son Java, el servidor Web  M07_SOMMERVILLE_INGENIERIA_1ED_SE_176-204.indd   198M07_SOMMERVILLE_INGENIERIA_1ED_SE_176-204.indd   198 3/18/11   4:50:14 PM3/18/11   4:50:14 PM