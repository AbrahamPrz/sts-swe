CAPÍTULO 3  DESARROLLO ÁGIL 71 Es importante notar que las demostraciones preliminares no contienen toda la funcionalidad  planeada, sino que éstas se entregarán dentro de la caja de tiempo establecida. Beedle y sus colegas [Bee99] presentan un análisis exhaustivo de estos patrones en el que dicen:  “Scrum supone de entrada la existencia de caos…” Los patrones de proceso Scrum permiten que un equipo de software trabaje con éxito en un mundo en el que es imposible eliminar la incer-tidumbre. 3.5.3  Método de desarrollo de sistemas dinámicos (MDSD) El método de desarrollo de sistemas dinámicos (MDSD) [Sta97] es un enfoque de desarrollo ágil  de software que “proporciona una estructura para construir y dar mantenimiento a sistemas que cumplan restricciones apretadas de tiempo mediante la realización de prototipos incrementales en un ambiente controlado de proyectos” [CCS02]. La filosofía MDSD está tomada de una ver-sión modificada de la regla de Pareto: 80 por ciento de una aplicación puede entregarse en 20 por ciento del tiempo que tomaría entregarla completa (100 por ciento). El MDSD es un proceso iterativo de software en el que cada iteración sigue la regla de 80 por  ciento. Es decir, se requiere sólo suficiente trabajo para cada incremento con objeto de facilitar el paso al siguiente. Los detalles restantes se terminan más tarde, cuando se conocen los reque-rimientos del negocio y se han pedido y efectuado cambios. El grupo DSDM Consortium (www.dsdm.org) es un conglomerado mundial de compañías  que adoptan colectivamente el papel de “custodios” del método. El consorcio ha definido un modelo de proceso ágil, llamado ciclo de vida MDSD , que define tres ciclos iterativos distintos,  precedidos de dos actividades adicionales al ciclo de vida: Estudio de factibilidad: establece los requerimientos y restricciones básicas del negocio, aso- ciados con la aplicación que se va a construir, para luego evaluar si la aplicación es un candi-dato viable para aplicarle el proceso MDSD. Estudio del negocio: establece los requerimientos e información funcionales que permitirán  la aplicación para dar valor al negocio; asimismo, define la arquitectura básica de la aplica-ción e identifica los requerimientos para darle mantenimiento. Iteración del modelo funcional: produce un conjunto de prototipos incrementales que de- muestran al cliente la funcionalidad. (Nota: todos los prototipos de MDSD están pensados para que evolucionen hacia la aplicación que se entrega.) El objetivo de este ciclo iterativo es reca-bar requerimientos adicionales por medio de la obtención de retroalimentación de los usua-rios cuando practican con el prototipo. Diseño e iteración de la construcción: revisita los prototipos construidos durante la iteración  del modelo funcional a fin de garantizar que en cada iteración se ha hecho ingeniería en forma que permita dar valor operativo del negocio a los usuarios finales; la iteración del modelo fun- cional y el diseño e iteración de la construcción ocurren de manera concurrente. Implementación: coloca el incremento más reciente del software (un prototipo “operacio- nal”) en el ambiente de operación. Debe notarse que: 1) el incremento tal vez no sea el de 100% final, o 2) quizá se pidan cambios cuando el incremento se ponga en su lugar. En cual-quier caso, el trabajo de desarrollo MDSD continúa y vuelve a la actividad de iteración del mo-delo funcional. El MDSD se combina con XP (véase la sección 3.4) para dar un enfoque de combinación que  define un modelo sólido del proceso (ciclo de vida MDSD) con las prácticas detalladas (XP) que se requieren para elaborar incrementos de software. Además, los conceptos DAS se adap-tan a un modelo combinado del proceso.PUNTO CLAVE El MDSD es una estructura de  proceso que adopta las tácticas de otro enfoque ágil, como XP .WebRef En la dirección www.dsdm.org hay  recursos útiles para el MDSD. 03Pressman(055-080).indd   7103Pressman(055-080).indd   71 14/1/10   13:41:1314/1/10   13:41:13