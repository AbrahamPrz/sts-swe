capítulo 1 el software y la ingeniería de software 15 1.5 la práctica de la ingeniería de software en la sección 1.4 se introdujo un modelo general de proceso de software compuesto de un con- junto de actividades que establecen una estructura para la práctica de la ingeniería de software. las actividades estructurales generales —comunicación, planeación, modelado, construc-ción y despliegue— y las actividades sombrilla establecen el esqueleto de la arquitectura para el trabajo de ingeniería de software. pero, ¿cómo entra aquí la práctica de la ingeniería de soft-ware? en las secciones que siguen, el lector obtendrá la comprensión básica de los conceptos y principios generales que se aplican a las actividades estructurales. 12 1.5.1 la esencia de la práctica en un libro clásico, how to solve it, escrito antes de que existieran las computadoras modernas, george polya [pol45] describió la esencia de la solución de problemas y, en consecuencia, la esencia de la práctica de la ingeniería de software: 1. entender el problema (comunicación y análisis). 2. planear la solución (modelado y diseño del software). 3. ejecutar el plan (generación del código). 4. examinar la exactitud del resultado (probar y asegurar la calidad). en el contexto de la ingeniería de software , estas etapas de sentido común conducen a una serie de preguntas esenciales [adaptado de pol45]: entender el problema. en ocasiones es difícil de admitir , pero la mayor parte de nosotros adoptamos una actitud de orgullo desmedido cuando se nos presenta un problema. escuchamos por unos segundos y después pensamos: claro, sí, entiendo, resolvamos esto. desafortunada- mente, entender no siempre es fácil. es conveniente dedicar un poco de tiempo a responder algunas preguntas sencillas: • ¿quiénes tienen que ver con la solución del problema? es decir, ¿quiénes son los partici-pantes? • ¿cuáles son las incógnitas? ¿cuáles datos, funciones y características se requieren para resolver el problema en forma apropiada? • ¿puede fraccionarse el problema? ¿es posible representarlo con problemas más pequeños que sean más fáciles de entender? • ¿es posible representar gráficamente el problema? ¿puede crearse un modelo de análisis? planear la solución. ahora entiende el problema (o es lo que piensa) y no puede esperar para escribir el código. antes de hacerlo, cálmese un poco y haga un pequeño diseño: • ¿ha visto antes problemas similares? ¿hay patrones reconocibles en una solución potencial? ¿hay algún software existente que implemente los datos, funciones y caracte-rísticas que se requieren? • ¿ha resuelto un problema similar? si es así, ¿son reutilizables los elementos de la solución? • ¿pueden definirse problemas más pequeños? si así fuera, ¿hay soluciones evidentes para éstos?podría decirse que el enfoque de polya es simple sentido común. es verdad. pero es sorprendente la frecuencia con la que el sentido común es poco común en el mundo del software.consejowebref en la dirección www.literateprogramming.com se encuentran varias citas provocativas sobre la práctica de la ingeniería de software. 12 el lector debería volver a consultar las secciones de este capítulo a medida que en el libro se describan en espe- cífico los métodos y las actividades sombrilla de la ingeniería de software.cita: “en la solución de cualquier pro-blema hay un grano de descubrimiento.” george polya 01pressman(001-024).indd  1501pressman(001-024).indd  15 14/1/10  13:31:0114/1/10  13:31:01