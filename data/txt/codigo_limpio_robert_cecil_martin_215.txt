comportamiento no son invasivas [57] para el código de destino. veamos tres aspectos o mecanismos similares en java. proxies de java los proxies de java son útiles en casos sencillos, como envolver invocaciones de métodos en objetos o clases concretas. sin embargo, los proxies dinámicos proporcionados en el jdk sólo funcionan con interfaces. para aplicarlos a clases, debe usar una biblioteca de manipulación de código de bytes , como cglib, asm o javassist [58] . el listado 11-3 muestra la estructura de un proxy jdk para ofrecer asistencia de persistencia a nuestra aplicación bank; únicamente abarca los métodos para obtener y establecer la lista de cuentas. listado 11-3 ejemplo de proxy del jdk. // bank.java (eliminando nombres de paquetes…) import java.utils.*; // la abstracción de un banco. public interface bank { collection<account> getaccounts(); void setaccounts(collection<accounts> accounts); } // bankimpl.java import java.utils.*; // “plain old java object” pojo que implementa la abstracción. public class bankimpl implements bank { private list<account> accounts; public collection<account> getaccounts() { return accounts; } public void setaccounts(collections<accounts> accounts) { this.accounts = new arraylist<accounts>(); for (account account: accounts) { this.accounts.add(account); } } } 216