return plusdays(offsettoprevioustarget); else return plusdays(offsettofuturetarget); } el método getendofcurrentmonth (líneas 728-740) es un tanto extraño ya que es un método de instancia que envidia [g14] a su propia clase aceptado un argumento daydate . lo convierto en un verdadero método de instancia y clarifico algunos de los nombres. public daydate getendofmonth() { month month = getmonth(); int year = getyear(); int lastday = lastdayofmonth(month, year); return daydatefactory.makedate(lastday, month, year); } la refactorización de weekinmonthtostring (líneas 742-761) resultó ser muy interesante. mediante las herramientas de refactorización de mi ide, primero cambié el método a la enumeración weekinmonth creada antes y después cambié el nombre por tostring . tras ello, lo convertí en método de instancia. todas las pruebas fueron correctas (¿adivina hacia dónde nos dirigimos?). seguidamente, eliminé el método. fallaron cinco afirmaciones (líneas 411-415 del listado b-4). cambié estas líneas para usar los nombres de los enumeradores ( first , second , etc.). las pruebas fueron correctas. ¿ve por qué? ¿puede ver también por qué son necesarios estos pasos? la herramienta de refactorización se encargó de que los invocadores anteriores de weekinmonthtostring invocaran ahora tostring en el enumerador weekinmonth ya que todos los enumeradores implementan tostring para devolver sus nombres… desafortunadamente, me pasé de listo. a pesar de la elegancia de la cadena de refactorización, comprobé que los únicos usuarios de esta función eran las pruebas que acababa de modificar, de modo que las eliminé. así pues, tras determinar que sólo las pruebas invocaban relativetostring (líneas 765-781), eliminé directamente la función y sus pruebas. hemos llegado a los métodos abstractos de esta clase abstracta. y el primero es toserial (líneas 838-844). en un apartado anterior cambié el nombre por toordinal . al verlo en este contexto, decidí que el cambio de 354