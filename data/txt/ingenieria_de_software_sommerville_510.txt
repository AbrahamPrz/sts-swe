18.3 ■ Patrones arquitectónicos para sistemas distribuidos  493 que gestiona todas las transacciones de la base de datos. La gestión de datos es directa, pues  no hay necesidad de gestionar la interacción entre el cliente y el sistema de procesamiento de la aplicación. Desde luego, el problema con el modelo de cliente pesado es que requiere gestión de sistema adicional para implementar y mantener el software en la computadora cliente. Un ejemplo de una situación en la que se usa una arquitectura de cliente pesado es un sistema de cajero automático, que entrega efectivo y otros servicios bancarios a los usuarios. El cajero es la computadora cliente y el servidor es, por lo general, un main-frame que opera la base de datos de cuentas de los clientes. Una computadora mainframe es una máquina poderosamente diseñada para procesamiento de transacciones. Por con-siguiente, es capaz de manejar el gran volumen de las transacciones generadas por los cajeros automáticos, otros sistemas de cajeros y banca en línea. El software en el cajero realiza mucho procesamiento relacionado con el cliente asociado con una transacción. La figura 18.9 muestra una versión simplificada de la organización del sistema del cajero automático. Observe que los cajeros no se conectan directamente a la base de datos cliente, sino que, en vez de ello, se conecta a un monitor de teleprocesamiento. Un monitor de teleprocesamiento (TP) es un sistema middleware que organiza las comuni-caciones con clientes remotos y pone en serie las transacciones del cliente para su proce-samiento de la base de datos. Esto garantiza que las transacciones sean independientes y no interfieran unas con otras. Usar transacciones seriales significa que el sistema puede recuperarse de fallas sin corromper los datos del sistema. Mientras que un modelo de cliente pesado distribuye el procesamiento más efectiva-mente que un modelo de cliente ligero, es más compleja la gestión del sistema. La funcio-nalidad de la aplicación se dispersa a través de muchas computadoras. Cuando el software de aplicación debe cambiarse, esto implica la reinstalación en cada computadora cliente. Esto podría representar un costo mayor si existen cientos de clientes en el sistema. Quizá se deba diseñar el sistema para soportar actualizaciones de software remoto y tal vez sea necesario desactivar todos los servicios del sistema hasta sustituir el software cliente.  18.3.3 Arquitecturas cliente-servidor multinivel El problema fundamental con un enfoque cliente-servidor de dos niveles es que las capas lógicas del sistema (presentación, procesamiento de aplicación, gestión de datos y base de datos) deben mapearse en dos sistemas de cómputo: el cliente y el servidor. Esto puede conducir a problemas con la escalabilidad y el rendimiento si se elige el modelo de Servidor cuenta Base de datos de cuenta del clienteMonitor de tele- procesamientoATM ATM ATM ATMFigura 18.9 Arquitectura  de cliente pesado para  un sistema de cajero automático M18_SOMMERVILLE_INGENIERIA_1ED_SE_479-507.indd   493M18_SOMMERVILLE_INGENIERIA_1ED_SE_479-507.indd   493 3/18/11   5:03:56 PM3/18/11   5:03:56 PM