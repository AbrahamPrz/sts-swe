mayoría de los casos? return service; } Es la técnica de  inicialización/evaluación tardía  y tiene sus méritos. No incurrimos en la sobrecarga de la construcción a menos que usemos el objeto realmente, y como resultado el tiempo de inicio se puede acelerar. También evitamos que se devuelva  null . Sin embargo, ahora tenemos una dependencia en  MyServiceImpl  y todo lo que su constructor requiere (que he omitido). No podemos compilar sin resolver estas dependencias, aunque nunca usemos un objeto de este tipo en tiempo de ejecución. Las pruebas también pueden ser un problema. Si  MyServiceImpl  es un objeto pesado, tendremos que asegurarnos de asignar el correspondiente  test double [50]  u objeto simulado al campo de servicio antes de invocar este método en las pruebas de unidad. Como la lógica de la construcción se mezcla con el procesamiento normal de tiempo de ejecución, debemos probar todas las rutas de ejecución (como la prueba  null  y su bloque). Al contar con ambas responsabilidades, el método hace más de una cosa, por lo que se incumple el principio de responsabilidad única. Lo peor de todo es que no sabemos si  MyServiceImpl  es el objeto correcto en todos los casos. ¿Por qué la clase con este método tiene que conocer el contexto global? ¿Podemos saber realmente cuál es el objeto correcto que usar aquí? ¿Es posible que un mismo tipo sea el correcto para todos los contextos posibles? Un caso de  inicialización tardía  no es un problema serio. Sin embargo, suele haber muchos casos de este tipo de configuración en las aplicaciones. Por tanto, la estrategia de configuración global (si existe) se disemina por la aplicación, sin apenas modularidad y con una significativa duplicación. Si somos diligentes sobre el diseño de sistemas robustos y bien formados, no debemos permitir fallos de modularidad. El proceso de inicio de la construcción y conexión de objetos no es una excepción. Debemos modularizar este proceso y asegurarnos de contar con una estrategia global y coherente para resolver las dependencias principales. 208