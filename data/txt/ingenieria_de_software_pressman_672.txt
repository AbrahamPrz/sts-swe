capítulo 28 administración del riesgo 641 antes de poder identificar los “riesgos correctos” que se van a tomar durante un proyecto de software, es importante identificar todos los que son obvios para gerentes y profesionales. 28.1 e strategias reactivas de riesgo frente  a estrategias proactivas de riesgo las estrategias reactivas de riesgo se han llamado irrisoriamente la “escuela de gestión de riesgo de indiana jones” [tho92]. en las películas que llevan su nombre, indiana jones, cuando en-frenta una dificultad abrumadora, invariablemente dice: “no te preocupes, ¡pensaré en algo!”. al nunca preocuparse por los problemas hasta que suceden, indy reaccionará en alguna forma heroica. tristemente, el gerente promedio de proyectos de software no es indiana jones y los miem- bros del equipo del proyecto de software no son sus fieles ayudantes. sin embargo, la mayoría de los equipos de software se apoyan exclusivamente en estrategias reactivas de riesgo. cuando mucho, una estrategia reactiva monitorea el proyecto para riesgos probables. los recursos se hacen a un lado para lidiar con los riesgos, hasta que se convierten en problemas reales. de manera más común, el equipo de software no hace nada acerca de los riesgos hasta que algo sale mal. entonces el equipo se apresura a entrar en acción con la intención de corregir el pro-blema rápidamente. con frecuencia esto se llama modo bombero. cuando falla, la “administra-ción de crisis” [cha92] toma el control y el proyecto está en un peligro real. una estrategia considerablemente más inteligente para la administración del riesgo es ser proactivo. una estrategia proactiva comienza mucho antes de iniciar el trabajo técnico. los riesgos potenciales se identifican, su probabilidad e impacto se valoran y se clasifican por im-portancia. luego, el equipo de software establece un plan para gestionar el riesgo. el objetivo principal es evitarlo, pero, dado que no todos los riesgos son evitables, el equipo trabaja para desarrollar un plan de contingencia que le permitirá responder en forma controlada y efectiva. a lo largo del resto de este capítulo se estudia una estrategia proactiva de gestión del riesgo. 28.2 r iesgos de software aunque hay un considerable debate acerca de la definición adecuada de riesgo de software, existe un acuerdo general en que los riesgos siempre involucran dos características: incertidum-bre (el riesgo puede o no ocurrir; es decir, no hay riesgos 100 por ciento probables 1) y pérdida (si el riesgo se vuelve una realidad, ocurrirán consecuencias o pérdidas no deseadas [hig95]). cuando se analizan los riesgos es importante cuantificar el nivel de incertidumbre y el grado de pérdidas asociados con cada riesgo. para lograr esto, se consideran diferentes categorías de riesgos. los riesgos del proyecto amenazan el plan del proyecto, es decir, si los riesgos del proyecto se vuelven reales, es probable que el calendario del proyecto se deslice y que los costos aumenten. los riesgos del proyecto identifican potenciales problemas de presupuesto, calendario, personal (tanto técnico como en la organización), recursos, participantes y requisitos, así como su im-pacto sobre un proyecto de software. en el capítulo 26, la complejidad, el tamaño y el grado de incertidumbre estructural del proyecto también se definieron como factores de riesgos para el proyecto (y la estimación). los riesgos técnicos amenazan la calidad y temporalidad del software que se va a producir. si un riesgo técnico se vuelve una realidad, la implementación puede volverse difícil o imposible. los riesgos técnicos identifican potenciales problemas de diseño, implementación, interfaz, cita: “si no atacas de manera activa los riesgos, ellos te atacarán de manera activa.” tom gilb 1 un riesgo que es 100 por ciento probable es una restricción sobre el proyecto de software.¿qué tipos de riesgos es probable encontrar conforme se construye el software?? 28pressman(640-654).indd  64128pressman(640-654).indd  641 26/1/10  17:33:5326/1/10  17:33:53