145 * @param relative determina “qué” día de la semana se selecciona con esta 146 * regla. 147 */ 148 public void setrelative(final int relative) { 149 this.relative = relative; 150 } 151 152 /** 153 * crea un clon de esta regla. 154 * 155 * @return un clon de esta regla. 156 * 157 * @throws clonenotsupportedexception nunca debe producirse. 158 */ 159 public object clone() throws clonenotsupportedexception { 160 final relativedayofweekrule duplicate 161 = (relativedayofweekrule) super.clone(); 162 duplicate.subrule = (annualdaterule) duplicate.getsubrule().clone(); 163 return duplicate; 164 } 165 166 /** 167 * devuelve la fecha generada por esta regla, para el año especificado. 168 * 169 * @param year el año (1900 &lt;= year &lt;= 9999). 170 * 171 * @return la fecha generada por esta regla para un año concreto (posiblemente 172 * <code>null</code>). 173 */ 174 public serialdate getdate(final int year) { 175 176 // comprobar argumento… 177 if ((year < serialdate.minimum_year_supported) 178 || (year > serialdate.maximum_year_supported)) { 179 throw new illegalargumentexception( 180 “relativedayofweekrule.getdate(): year outside valid range.”); 181 } 182 183 // calcular la fecha… 184 serialdate result = null; 185 final serialdate base = this.subrule.getdate(year); 186 187 if (base != null) { 188 switch (this.relative) { 500