CAPÍTULO 18  PRUEBA DE APLICACIONES CONVENCIONALES 433 • Prueba de comportamiento.  Con modelos de sistema creados con herramientas auto- matizadas, es posible simular el comportamiento de un sistema en tiempo real y  examinar su comportamiento como consecuencia de eventos externos. Estas activi-dades de análisis pueden servir de base para el diseño de los casos de prueba que se realizan cuando se construye el software en tiempo real. Al usar una técnica similar a la partición de equivalencia (sección 18.6.2), los eventos (por ejemplo, interrupciones, señales de control) se categorizan para las pruebas. Por ejemplo, los eventos para la fotocopiadora pueden ser interrupciones del usuario (contador de restablecimiento), interrupciones mecánicas (atasco de papel), interrupciones del sistema (baja de tóner) y modos de fallo (sobrecalentamiento del rodillo). Cada uno se prueba de manera indivi-dual y el comportamiento del sistema ejecutable se examina para detectar los errores que ocurren como consecuencia del procesamiento asociado con dichos eventos. El comportamiento del modelo del sistema (desarrollado durante la actividad de análisis) y el software ejecutable pueden compararse para asegurar que actúan en conformidad. Una vez que se prueba cada clase de eventos, éstos se presentan al sistema en orden aleatorio y con frecuencia aleatoria. El comportamiento del software se examina para detectar errores de comportamiento. • Prueba intertarea. Una vez aislados los errores en las tareas individuales y en el comportamiento del sistema, las pruebas se cambian a los errores relacionados con el tiempo. Las tareas asíncronas que se sabe que se comunican mutuamente se prueban con diferentes tasas de datos y carga de procesamiento para determinar si ocurrirán errores de sincronización intertarea. Además, las tareas que se comunican vía cola de mensaje o almacenamiento de datos se prueban para descubrir errores en el tamaño de estas áreas de almacenamiento de datos. • Prueba de sistema. Al integrar software y hardware, se lleva a cabo un amplio rango de pruebas del sistema con la intención de descubrir errores en la interfaz software-hardware. La mayoría de los sistemas en tiempo real procesan las interrupciones. Por tanto, probar la manipulación de estos eventos booleanos es esencial. Al usar el diagrama de estado (capítulo 7), el examinador desarrolla una lista de las posibles in-terrupciones y del procesamiento que ocurre como consecuencia de las interrupciones. Entonces se diseñan pruebas para valorar las siguientes características del sistema:   • ¿Las prioridades de interrupción se asignan y manejan de manera adecuada?  • ¿El procesamiento para cada interrupción se maneja de manera correcta?  •  ¿El rendimiento (por ejemplo, tiempo de procesamiento) de cada procedimiento de manejo de interrupción se apega a los requerimientos?   •  ¿Un alto volumen de interrupciones que llegan en momentos críticos crea problemas en el funcionamiento o en el rendimiento? Además, las áreas de datos globales que se usan para transferir como parte del procesa- miento de interrupción deben probarse a fin de valorar el potencial para la generación de efec-tos colaterales.  18.9 P ATRONES  PARA  PRUEBAS  DE SOFTWARE El uso de patrones como un mecanismo para describir soluciones a problemas de diseño espe-cíficos se estudió en el capítulo 12. Pero los patrones también pueden usarse para proponer soluciones a otras situaciones de ingeniería de software; en este caso, prueba del software. Los patrones de prueba describen problemas y soluciones de prueba comunes que pueden auxiliar en su tratamiento. WebRef Un catálogo de patrones de prueba de  software puede encontrarse en www.rbsc.com/pages/TestPatternList.htm 18Pressman(411-436).indd   43318Pressman(411-436).indd   433 21/1/10   10:59:0021/1/10   10:59:00