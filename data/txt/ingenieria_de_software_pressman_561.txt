530 PARTE TRES  ADMINISTRACIÓN DE LA CALIDAD Con una meta de medición definida de manera explícita, se desarrolla un conjunto de preguntas.  Las respuestas ayudarán al equipo de software (o a otros participantes) a determinar si se logró la meta de medición. Entre las preguntas que pueden plantearse se encuentran: P 1:  ¿Los componentes arquitectónicos se caracterizan de forma que compartimentali-zan la función y los datos relacionados? P 2:  ¿La complejidad de cada componente dentro de las fronteras facilitará la modifica-ción y la extensión? Cada una de estas preguntas debe responderse de manera cuantitativa, usando una o más me-didas y métricas. Por ejemplo, una métrica que proporciona un indicio de la cohesión (capítulo 8) de un componente arquitectónico puede ser útil para responder P 1. Las métricas que se estu- dian más adelante en este capítulo pueden proporcionar comprensión para P2. En todo caso, las  métricas que se eligen (o derivan) deben corresponderse con los principios de medición anali-zados en la sección 23.1.3 y con los atributos de medición expuestos en la sección 23.1.5. 23.1.5  Atributos de las métricas de software efectivas Se han propuesto cientos de métricas para el software de computadora, pero no todas brindan apoyo práctico al ingeniero de software. Algunas demandan medición demasiado compleja, otras son tan particulares que pocos profesionales del mundo real tienen alguna esperanza de entenderlas y otras más violan las nociones intuitivas básicas de lo que realmente es el software de alta calidad. Ejiogu [Eji91] define un conjunto de atributos que deben abarcar las métricas de software  efectivas. La métrica derivada y las medidas que conducen a ella deben ser: • Simple y calculable. Debe ser relativamente fácil aprender cómo derivar la métrica y su cálculo no debe demandar esfuerzo o tiempo excesivo. • Empírica e intuitivamente convincente.  Debe satisfacer las nociones intuitivas del  ingeniero acerca del atributo de producto que se elabora (por ejemplo, una métrica que mide la cohesión del módulo debe aumentar en valor conforme aumenta el nivel de cohesión). • Congruente y objetiva. Siempre debe producir resultados que no tengan ambigüedades. Una tercera parte independiente debe poder derivar el mismo valor de métrica usando la misma información acerca del software. • Constante en su uso de unidades y dimensiones. El cálculo matemático de la métrica debe usar medidas que no conduzcan a combinaciones extrañas de unidades. Por ejemplo, multiplicar personas en los equipos de proyecto por variables de lenguaje de programa-ción en el programa da como resultado una mezcla sospechosa de unidades que no son intuitivamente convincentes. • Independiente del lenguaje de programación.  Debe basarse en el modelo de requeri- mientos, el modelo de diseño o la estructura del programa en sí. No debe depender de los caprichos de la sintaxis o de la semántica del lenguaje de programación. • Un mecanismo efectivo para retroalimentación de alta calidad.  Debe proporcionar informa- ción que pueda conducir a un producto final de mayor calidad. Aunque la mayoría de las métricas de software satisfacen estos atributos, algunas métricas de uso común pueden fracasar para satisfacer uno o dos de ellos. Un ejemplo es el punto de función (que se estudia en la sección 23.2.1), una medida de la “funcionalidad” entregada por el soft-ware. Puede argumentarse 3 que el atributo de congruente y objetiva fracasa porque una tercera ¿Cómo se valora la  calidad de una métrica de software propuesta?? La experiencia indica que una métrica de producto sólo se usará si es intuitiva y fácil de calcular. Si se tienen que hacer decenas de “conteos” y se requieren cálculos complejos, es improbable que la métrica se adopte ampliamente.CONSEJO 3 Puede plantearse un contrargumento igualmente vigoroso. Tal es la naturaleza de las métricas del software. 23Pressman(526-552).indd   53023Pressman(526-552).indd   530 19/1/10   23:29:5319/1/10   23:29:53