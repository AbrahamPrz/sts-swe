15.5 ■ Casos de protección y confiabilidad  415 4. Cuando se repite este análisis para todos los peligros identificados, entonces existe  clara evidencia de que el sistema es seguro.  Los argumentos estructurados de protección pueden aplicarse a diferentes niveles,  desde los requerimientos a través de los modelos de diseño hasta el código. En el nivel de requerimientos, se trata de demostrar que no hay requerimientos de protección faltantes, y que los requerimientos no hacen suposiciones inválidas acerca del sistema. A nivel del diseño, es conveniente analizar un modelo de estado del sistema para encontrar estados inseguros. A nivel de código, considere todas las rutas con el código crítico de protección para demostrar que la ejecución de todas las rutas conduce a una contradicción. Como ejemplo, considere el código de la figura 15.10, que puede ser parte de la imple-mentación del sistema de administración de insulina. El código calcula la dosis de insulina a administrar, luego aplica algunas comprobaciones de protección para reducir la proba-bilidad de que se inyecte una sobredosis de insulina. Desarrollar un argumento de pro-tección para este código implica probar que la dosis de insulina administrada nunca será mayor que el máximo nivel seguro para una dosis individual. Esto se establece para cada usuario diabético en el tratamiento con sus consejeros médicos. Para demostrar que existe protección, no se tiene que probar que el sistema administra la dosis “correcta”, simplemente que nunca administra una sobredosis al paciente. Se trabaja sobre la suposición de que maxDose es el nivel protegido para dicho usuario del sistema. Para elaborar el argumento de protección, identifique el predicado que defina el estado inseguro, que es currentDose > maxDose. Luego demuestre que todas las rutas del pro-grama conducen a una contradicción de esta afirmación. Si éste es el caso, la condición Figura 15.10  Cálculo de dosis de insulina mediante comprobaciones de protección— La dosis de insulina a administrar es función del — nivel de azúcar en la sangre, la dosis previa administrada y— el momento de administración de la dosis previa currentDose = computeInsulin () ; // Comprobación de protección – ajustar currentDose si es necesario. // enunciado if 1 if (previousDose == 0) { if (currentDose > maxDose/2) cu rrentDose = maxDose/2 ; }else if (currentDose > (previousDose * 2) ) currentDose = previousDose * 2 ; // enunciado if 2 if ( currentDose < minimumDose ) currentDose = 0 ; else if ( currentDose > maxDose ) currentDose = maxDose ; administerInsulin (currentDose) ; M15_SOMMERVILLE_INGENIERIA_1ED_SE_393-422.indd   415M15_SOMMERVILLE_INGENIERIA_1ED_SE_393-422.indd   415 3/18/11   5:01:20 PM3/18/11   5:01:20 PM