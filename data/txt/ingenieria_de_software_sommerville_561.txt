544 capítulo 20 ■ software embebido desde luego, es importante garantizar que los procesos productor y consumidor no tra- ten de acceder al mismo ítem al mismo tiempo (es decir, cuando inicio = final). también debemos asegurarnos de que el proceso productor no agregue ítems a un buffer lleno y que el proceso consumidor no tome ítems desde un buffer vacío. para ello, implemente el buffer circular como un proceso con las operaciones get y put para acceder al buffer. la operación put (ingresar) es llamada por el proceso productor y la operación get (obtener) por el proceso consumidor. las primitivas de sincronización, como los semáforos o las regiones críticas, se usan para asegurar que las operaciones de get y put están sincroni-zadas, de manera que no accedan a la misma ubicación al mismo tiempo. si el buffer está lleno, el proceso put debe esperar hasta que un espacio (slot) esté libre; si el buffer está vacío, el proceso get debe esperar hasta hacer una entrada. una vez que se ha elegido la plataforma de ejecución para el sistema, se ha diseñado una arquitectura de proceso y se ha determinado una política de planeación, es nece-sario comprobar que el sistema cumplirá sus requerimientos de temporización. esto se puede hacer mediante análisis estático del sistema a través del conocimiento del compor-tamiento de temporización de los componentes, o por medio de simulación. este análisis puede revelar que el sistema no se desempeñará de manera adecuada. la arquitectura del proceso, política de planeación, plataforma de ejecución o todo ello, pueden rediseñarse entonces para mejorar el rendimiento del sistema. las restricciones de temporización u otros requerimientos en ocasiones pueden sig-nificar que es mejor implementar en el hardware algunas funciones del sistema, tales como el procesamiento de señales, en hardware. los modernos componentes de hard-ware, como los fpga (por las siglas de field programmable gate array), son flexibles, así que pueden adaptarse a diferentes funciones. los componentes de hardware ofrecen mucho mejor rendimiento que el software equivalente. los cuellos de botella de proce-samiento del sistema pueden identificarse y sustituirse por hardware, de manera que se evita la costosa optimización de software. 20.1.1 modelado de sistemas de tiempo real los eventos a los que un sistema de tiempo real debe reaccionar causan con frecuencia que el sistema se mueva de un estado a otro. por esta razón, se usan por lo general los mode-los de estado, que se exponen en el capítulo 5, para describir los sistemas de tiempo real. proceso consumidorproceso productorbuffer circular iniciofinal v1 v2 v3 v4 v5v6v7v8v9v10 figura 20.4 procesos productor/consumidor que comparten un buffer circular m20_sommerville_ingenieria_1ed_se_537-564.indd  544m20_sommerville_ingenieria_1ed_se_537-564.indd  544 3/18/11  5:05:49 pm3/18/11  5:05:49 pm