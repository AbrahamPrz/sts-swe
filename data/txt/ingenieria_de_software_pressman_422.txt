capítulo 17 estrategias de prueba de software 391 error, 4) el procesamiento excepción-condición es incorrecto y 5) la descripción del error no pro- porciona suficiente información para auxiliar en la localización de la causa del error. procedimientos de prueba de unidad. las pruebas de unidad por lo general se consideran como adjuntas al paso de codificación. el diseño de las pruebas de unidad puede ocurrir antes de comenzar la codificación o después de generar el código fuente. la revisión de la informa-ción del diseño proporciona una guía para establecer casos de prueba que es probable que descubran errores en cada una de las categorías analizadas anteriormente. cada caso de prue-ba debe acoplarse con un conjunto de resultados esperados. puesto que un componente no es un programa independiente, con frecuencia debe desarro- llarse software controlador y/o de resguardo para cada prueba de unidad. en la figura 17.4 se ilustran los entornos de prueba de unidad. en la mayoría de las aplicaciones, un controlador no es más que un “programa principal” que acepta datos de caso de prueba, pasa tales datos al componente (que va a ponerse a prueba) e imprime resultados relevantes. los representantes (en inglés stubs) sirven para sustituir módulos que están subordinados al (invocados por el) componente que se va a probar. un representante o “subprograma tonto” usa la interfaz de módulo subordinado, puede realizar mínima manipulación de datos, imprimir verificación de entradas y regresar el control al módulo sobre el que se realiza la prueba. los controladores y representantes añaden una “sobrecarga” a las pruebas. es decir: ambos son software que debe escribirse (el diseño formal usualmente no se aplica), pero que no se entrega con el producto de software final. si los controladores y representantes se mantienen simples, la sobrecarga real es relativamente baja. por desgracia, muchos componentes no pue-den tener prueba de unidad adecuada con un software de sobrecarga simple. en tales casos, la prueba completa puede posponerse hasta el paso de prueba de integración (donde también se usan controladores o representantes). las pruebas de unidad se simplifican cuando se diseña un componente con alta cohesión. cuando un componente aborda una sola función, el número de casos de prueba se reduce y los errores pueden predecirse y descubrirse con mayor facilidad. 17.3.2 pruebas de integración un neófito en el mundo del software podrá plantear una pregunta aparentemente legítima una vez que todos los módulos se hayan probado de manera individual: “si todos ellos funcionan casos de pruebainterfaz estructuras de datos localescondiciones de fronterarutas independientesrutas de manejo de error módulo que se va a probar represen- tanterepresen- tantecontrolador resultadosfigura 17.4 entorno de prueba de unidad asegúrese de diseñar pruebas para ejecutar cada ruta de manejo de error. si no lo hace, la ruta puede fallar cuando se invoque, lo que agrava una situación de por sí peligrosa.consejo existen algunas situaciones donde no se tienen los recursos para realizar una prueba de unidad amplia. seleccione los módulos cruciales o complejos y aplique sólo en ellos las pruebas de unidad.consejo 17pressman(383-410).indd  39117pressman(383-410).indd  391 21/1/10  10:59:2121/1/10  10:59:21