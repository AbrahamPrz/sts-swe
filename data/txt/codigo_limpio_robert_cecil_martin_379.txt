conectarse a la base de datos, ya cuenta con varios empleados con sus valores y atributos. además, « john doe » representa el único empleado por horas de la base de datos. por tanto, la prueba debería ser la siguiente: assertequals( hourly_employee_id, employee.find(hourly_employee_name).employeenumber()); g26: precisión esperar que la primera coincidencia de una consulta sea la única es una ingenuidad. el uso de números de coma flotante para representar divisas es casi un delito. evitar bloqueos y/o la administración de transacciones por creer que las actualizaciones concurrentes no son posibles es pura indolencia. declarar una variable como arraylist cuando se necesita list es un exceso de restricciones. crear todas las variables como protected de forma predeterminada es falta de restricciones. al adoptar una decisión en el código, debe hacerlo de forma precisa. debe saber por qué la adopta y cómo afrontará las excepciones. no sea indolente sobre la precisión de sus decisiones. si decide invocar una función que pueda devolver null , asegúrese de comprobar null . si consulta el que considera el único registro de una base de datos, asegúrese de que el código comprueba que no haya otros. si tiene que trabajar con divisas, use enteros [114] y aplique el redondeo correcto. si existe la posibilidad de una actualización concurrente, asegúrese de implementar algún tipo de mecanismo de bloqueo. en el código, la ambigüedad y las imprecisiones son el resultado de desacuerdos o de indolencia. en cualquier caso, elimínelas. g27: estructura sobre convención aplique las decisiones de diseño con estructura y no convenciones. las convenciones de nomenclatura son correctas pero resultan inferiores a estructuras que refuerzan la compatibilidad. por ejemplo, los casos switch con enumeraciones de nombres correctos son inferiores a clases base con 380