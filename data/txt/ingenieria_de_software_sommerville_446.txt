16.1 ■ Panorama de la reutilización  429 componentes individuales. Éstos son activos reutilizables de grano grueso. Aunque  el ajuste con los requerimientos tal vez sea imperfecto, este enfoque minimiza la cantidad de desarrollo requerido. 2. La vida esperada del software Si usted desarrolla un sistema de prolongada dura-ción, debe enfocarse en la capacidad de mantenimiento del sistema. No sólo debe considerar los beneficios inmediatos de la reutilización, sino también las implicacio-nes a largo plazo.  Durante su vida útil, podrá adaptar el sistema a nuevos requerimientos, lo que sig- nificará hacer cambios a partes del sistema. Si no tiene acceso al código fuente, es preferible evitar los componentes COTS (véase la sección 16.4) y los sistemas de proveedores externos, pues éstos tal vez no sean capaces de continuar con el servicio de apoyo para el software de reutilización. 3. Los antecedentes, las habilidades y la experiencia del equipo de desarrollo Todas las tecnologías de reutilización son bastante complejas, y es necesario mucho tiempo para entenderlas y usarlas de manera efectiva. Por consiguiente, si el equi-po de desarrollo tiene habilidades en un área particular, probablemente es ahí donde deban enfocarse. 4. La criticidad del software y sus requerimientos no funcionales  Para un sistema  crítico que deba certificarse mediante un regulador externo, quizá deba crear un caso de confiabilidad para el sistema (como se estudió en el capítulo 15). Esto es difícil si no tiene acceso al código fuente del software. Si su software cuenta con requerimientos rigurosos de rendimiento, tal vez sea imposible usar estrategias tales como la reutilización basada en generador, donde el código se forma a partir de una representación de reutilización específica de dominio de un sistema. Estos sistemas a menudo crean un código relativamente ineficiente. 5. El dominio de aplicación En algunos dominios de aplicación, tales como los sis-temas de fabricación e información médica, existen muchos productos genéricos que pueden reutilizarse al configurarlos para una situación local. Si trabaja en tal dominio, siempre debe considerarlo como una opción.Patrones de diseño Ingeniería de software basada en componentesFrameworks de aplicación Sistemas orientados al servicioIntegración COTSLíneas de producto de software Encadenamiento de sistemas heredados Librerías de programaGeneradores de programaDesarrollo de software orientado a aspectosAplicaciones verticales configurablesPatrones arquitectónicos Sistemas ERP Ingeniería dirigida por modelo Figura 16.3 Panorama  de reutilización M16_SOMMERVILLE_INGENIERIA_1ED_SE_423-451.indd   429M16_SOMMERVILLE_INGENIERIA_1ED_SE_423-451.indd   429 3/18/11   5:02:12 PM3/18/11   5:02:12 PM