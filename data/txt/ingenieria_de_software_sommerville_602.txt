21.3 ■ ingeniería de software con aspectos 585 cumple con sus requerimientos. cuando la detección de defectos es el objetivo, el proceso de prueba puede guiarse mediante el conocimiento del código fuente del programa. las métricas de cobertura de prueba muestran la efectividad de las pruebas para hacer que los enunciados del código fuente sean ejecutables. para los sistemas orientados a aspectos, los procesos de las pruebas de validación no son diferentes a los de cualquier otro sistema. el programa final ejecutable se trata como una caja negra y se diseñan pruebas para demostrar si el sistema cumple o no con los requerimientos. sin embargo, el uso de aspectos causa problemas reales con las ins-pecciones de programa y las pruebas de caja blanca, mientras que el código fuente del programa se usa para identificar potenciales pruebas de defecto. las inspecciones de programa, que se describen en el capítulo 24, implican un equipo de lectores que observan el código fuente de un programa para descubrir defectos que haya introducido el programador. es una técnica muy efectiva de descubrimiento de defectos. sin embargo, los programas orientados a aspectos no pueden leerse secuencial-mente (esto es, de arriba abajo). por lo tanto, es más difícil que la gente los comprenda. un lineamiento general para la comprensibilidad del programa es que un lector pueda leer un programa de izquierda a derecha sin tener que cambiar la atención hacia otras partes del código. esto lo hace más sencillo para los lectores y también hace menos probable que los programadores cometan errores mientras su atención se enfoca en una sola sección de código. mejorar la legibilidad del programa fue una razón clave para la introducción de la programación estructurada (dijkstra et al., 1972) y la eliminación de los enunciados de ramificación incondicional (go-to) de los lenguajes de programación de alto nivel. en un sistema orientado a aspectos, es imposible la lectura de código secuencial. el lector debe examinar cada aspecto, comprender sus puntos de corte (que pueden ser patrones) y el modelo de punto de enlace del lenguaje orientado a aspectos. al leer el programa, tiene que identificar todo punto de enlace potencial y entonces cambiar la atención al código de aspecto para ver si puede tejerse en dicho punto. luego, su aten-ción regresa al flujo principal de control del código base. en realidad, esto es cognitiva-mente imposible y la única forma de inspeccionar un programa orientado a aspectos es mediante el uso de herramientas de lectura de código. pueden escribirse herramientas de lectura de código que “aplanen” un programa orientado a aspectos y presenten un programa al lector con los aspectos “tejidos” en el programa en los puntos de enlace especificados. sin embargo, ésta no es una solución completa al problema de lectura de código. el modelo de punto de enlace en un lenguaje de programación orientado a aspectos puede ser dinámico en vez de estático, y quizá sea imposible demostrar que el programa aplanado se comportará exactamente de la misma forma que el programa que ejecutará. más aún, como es posible que diferentes aspectos tengan la misma especificación de punto de corte, la herramienta de lectura de programa debe saber cómo el tejedor de aspectos maneja dichos aspectos “en competencia” y cómo se ordenará la combinación. las pruebas de caja blanca o pruebas estructurales son un enfoque sistemático a las pruebas donde se usa el conocimiento del código fuente del programa para diseñar prue-bas de defecto. la meta es diseñar pruebas que proporcionen algún nivel de cobertura de programa. esto es, el conjunto de pruebas debe garantizar que se ejecute toda ruta lógica a través del programa, con la consecuencia de que cada enunciado de programa se efectúe al menos una vez. pueden usarse analizadores de ejecución de programa para demostrar que se logra este nivel de cobertura de pruebas. m21_sommerville_ingenieria_1ed_se_565-590.indd  585m21_sommerville_ingenieria_1ed_se_565-590.indd  585 3/18/11  5:38:59 pm3/18/11  5:38:59 pm