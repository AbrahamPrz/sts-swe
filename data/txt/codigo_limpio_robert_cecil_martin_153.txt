sólo para capturar una excepción y permitir el paso de otra distinta. definir el flujo normal si sigue los consejos de apartados anteriores, realizará una importante separación entre la lógica empresarial y el control de errores. la mayoría de su código parecerá un algoritmo limpio y sin adornos. sin embargo, el proceso desplaza la detección de errores hacia los bordes del programa. debe envolver api externas para poder generar sus propias excepciones y definir un controlador por encima del código para poder procesar cálculos cancelados. en muchos casos es el enfoque más acertado, pero en ocasiones conviene no cancelar. veamos un ejemplo, un código extraño que suma gastos en una aplicación de facturación: try { mealexpenses expenses = expensereportdao.getmeals(employee.getid()); m_total += expenses.gettotal(); } catch(mealexpensesnotfound e) { m_total += getmealperdiem(); } en esta empresa, si las comidas son gastos, pasan a formar parte del total. si no lo son, los trabajadores reciben una cantidad diaria para la comida. la excepción entorpece la lógica. sería más adecuado no tener que procesar el caso especial y el código sería mucho más sencillo: mealexpenses expenses = expensereportdao.getmeals(employee.getid()); m_total += expenses.gettotal(); ¿de verdad que el código puede ser tan simple? pues sí. podemos cambiar expensereportdao para que siempre devuelva un objeto mealexpense . si no hay gastos de comida, devuelve un objeto mealexpense que devuelve la dieta diaria como total: public class perdiemmealexpenses implements mealexpenses { public int gettotal() { // devolver la dieta diaria predeterminada 154