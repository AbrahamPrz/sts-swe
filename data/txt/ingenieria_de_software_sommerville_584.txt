21.1 ■ la separación de intereses 567 a objetos para incluir aspectos. las grandes compañías usan la programación orienta- da a aspectos en sus procesos de producción de software (colyer y clement, 2005). sin embargo, las competencias transversales son igualmente problemáticas en otras etapas del proceso de desarrollo de software. ahora los investigadores indagan sobre cómo utilizar la orientación a aspectos en la ingeniería de requerimientos de sistema y diseño de sistemas, y la forma de poner a prueba y verificar programas orientados a aspectos. aquí se incluye una discusión de aose porque su enfoque en la separación de las competencias es una importante manera de pensar y estructurar un sistema de soft-ware. aunque se han implementado algunos sistemas a gran escala mediante un enfoque orientado a aspectos, el uso de aspectos no es todavía parte de la ingeniería de soft-ware convencional. como en todas las nuevas tecnologías, sus defensores se enfocan en los beneficios más que en los problemas y costos. aunque transcurrirá algún tiempo antes de que la aose se emplee de modo rutinario al lado de otros enfoques de la inge-niería de software, es importante la idea de separar las competencias que subyacen en la aose. considerar la separación de las competencias es un buen enfoque general para la ingeniería de software. en las secciones restantes del capítulo se tratan los conceptos que son parte de la aose, y se examinan las ventajas y desventajas de usar un enfoque orientado a aspectos en diferentes etapas del proceso de desarrollo de software. como la meta del capítulo es ayudar a comprender los conceptos subyacentes en la aose, no nos adentraremos en detalles de algún enfoque específico o lenguaje de programación orientado a aspectos. 21.1 la separación de intereses la separación de competencias o intereses ( concerns) es un principio clave del diseño e implementación de software. significa que usted debe organizar su software de modo que cada elemento en el programa (clase, método, procedimiento, etcétera) realice una función y sólo una función. entonces podrá enfocarse en ese elemento sin considerar los otros elementos en el programa. es posible comprender cada parte del programa al conocer su competencia, sin necesidad de entender otros elementos. cuando se requieren cambios, éstos se localizan en un pequeño número de elementos. la importancia de separar las competencias se reconoció en las etapas iniciales de la ciencia de la computación. las subrutinas, que encapsulan una unidad de funciona-lidad, se inventaron a principios de la década de 1950, y se han diseñado mecanismos subsecuentes de estructuración del programa, tales como procedimientos y clases de objetos, con la finalidad de proporcionar mejores mecanismos para realizar la separación de competencias. sin embargo, todos estos mecanismos tienen problemas para hacer frente a ciertos tipos de competencias que cruzan otras competencias. tales competen-cias transversales no pueden ubicarse mediante mecanismos de estructuración como objetos o funciones. los aspectos se inventaron para ayudar a gestionar estas competen-cias transversales. aunque en general se acordó que la separación de competencias es una buena práctica de ingeniería de software, resulta muy difícil identificar con exactitud lo que se entiende realmente por competencia. en ocasiones, ésta se define como una noción funcional (es decir, una competencia es algún elemento funcional en un sistema). como alternativa, puede definirse de manera muy general como “cualquier pieza de interés o el propósito m21_sommerville_ingenieria_1ed_se_565-590.indd  567m21_sommerville_ingenieria_1ed_se_565-590.indd  567 3/18/11  5:38:57 pm3/18/11  5:38:57 pm