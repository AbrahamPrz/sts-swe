CAPÍTULO 17  ESTRATEGIAS DE PRUEBA DE SOFTWARE 399  1. El modelo de contenido para la webapp se revisa para descubrir errores.  2. El modelo de interfaz se revisa para garantizar que todos los casos de uso pueden ade- cuarse.  3. El modelo de diseño para la webapp se revisa para descubrir errores de navegación.  4. La interfaz de usuario se prueba para descubrir errores en los mecanismos de presenta- ción y/o navegación.  5. A cada componente funcional se le aplica una prueba de unidad.  6. Se prueba la navegación a lo largo de toda la arquitectura.  7. La webapp se implementa en varias configuraciones ambientales diferentes y se prueba  en su compatibilidad con cada configuración.  8. Las pruebas de seguridad se realizan con la intención de explotar vulnerabilidades en la  webapp o dentro de su ambiente.  9. Se realizan pruebas de rendimiento.  10. La webapp se prueba mediante una población de usuarios finales controlada y monito- reada. Los resultados de su interacción con el sistema se evalúan por errores de conte- nido y navegación, preocupaciones de facilidad de uso, preocupaciones de compatibili- dad, así como confiabilidad y rendimiento de la webapp. Puesto que muchas webapps evolucionan continuamente , el proceso de prueba es una acti- vidad siempre en marcha, y se realiza para apoyar al personal que usa pruebas de regresión  derivadas de las pruebas desarrolladas cuando se elaboró por primera vez la webapp. En el  capítulo 20 se consideran métodos para probar la webapp.  17.6 P RUEBAS  DE VALIDACIÓN Las pruebas de validación comienzan en la culminación de las pruebas de integración, cuando se ejercitaron componentes individuales, el software está completamente ensamblado como un paquete y los errores de interfaz se descubrieron y corrigieron. En el nivel de validación o de sistema, desaparece la distinción entre software convencional, software orientado a objetos y webapps. Las pruebas se enfocan en las acciones visibles para el usuario y las salidas del sistema reconocibles por el usuario. La validación puede definirse en muchas formas, pero una definición simple (aunque dura)  es que la validación es exitosa cuando el software funciona en una forma que cumpla con las expectativas razonables del cliente. En este punto, un desarrollador de software curtido en la batalla puede protestar: “¿quién o qué es el árbitro de las expectativas razonables?”. Si se desa-rrolló una Especificación de requerimientos de software, en ella se describen todos los atributos  del software visibles para el usuario; contiene una sección de Criterios de validación que forman la base para un enfoque de pruebas de validación. 17.6.1  Criterios de pruebas de validación La validación del software se logra a través de una serie de pruebas que demuestran conformi-dad con los requerimientos. Un plan de prueba subraya las clases de pruebas que se van a realizar y un procedimiento de prueba define casos de prueba específicos que se diseñan para garantizar que: se satisfacen todos los requerimientos de funcionamiento, se logran todas las características de comportamiento, todo el contenido es preciso y se presenta de manera ade-cuada, se logran todos los requerimientos de rendimiento, la documentación es correcta y se PUNTO CLAVE La estrategia global para probar  webapps puede resumirse en los 10 pasos que se anotan aquí. WebRef En www.stickyminds.com/ testing.asp pueden encontrarse excelentes artículos acerca de pruebas de las webapps. PUNTO CLAVE Como todos los demás pasos de  las pruebas, la validación intenta descubrir errores, pero el enfoque se orienta en los requerimientos: sobre las cosas que serán inmediatamente aparentes para el usuario final. 17Pressman(383-410).indd   39917Pressman(383-410).indd   399 21/1/10   10:59:2321/1/10   10:59:23