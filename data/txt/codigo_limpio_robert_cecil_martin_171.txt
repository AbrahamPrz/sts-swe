reglas en sus pruebas de unidad. la premisa era «rápido y directo». no era necesario que las variables tuvieran nombres adecuados, ni que las funciones de prueba fueran breves y descriptivas. no era necesario que el código de prueba estuviera bien diseñado. bastaba con que funcionara y abarcara el código de producción. puede que algunos lectores empaticen con esta decisión. puede que en el pasado creara el tipo de pruebas que cree para la clase timer . supone un gran paso crear ese tipo de pruebas desechables a diseñar una suite de pruebas de unidad automatizadas. por ello, como el equipo que dirigía, puede decidir que pruebas incorrectas sea mejor que no tener pruebas. pero el equipo no se daba cuenta que tener pruebas incorrectas era igual o peor que no tener prueba alguna. el problema es que las pruebas deben cambiar de acuerdo a la evolución del código. cuanto menos limpias sean, más difícil es cambiarlas. cuando más enrevesado sea el código de prueba, más probabilidades de que dedique más tiempo a añadir nuevas pruebas a la suite que el empleado en crear el nuevo código de producción. al modificar el código de producción, las pruebas antiguas comienzan a fallar y el desastre impide que las pruebas se superen, por lo que acaban por convertirse en un obstáculo interminable. entre versiones, aumentó el coste de mantener la suite de pruebas de mi equipo. acabó por convertirse en la principal queja entre los desarrolladores. cuando los directores preguntaron sobre este aumento, los desarrolladores culparon a las pruebas. al final, se vieron obligados a descartar la suite de pruebas completa. pero sin una suite de pruebas perdieron la posibilidad de garantizar el funcionamiento esperado de los cambios en el código. sin una suite de pruebas no podían asegurar que los cambios en una parte del sistema no afectaran a otras diferentes. los defectos aumentaron, lo que propició que temieran realizar cambios. dejaron de limpiar su código de producción por miedo a que los cambios fueran dañinos. el código de producción comenzó a corromperse. al final, se quedaron sin pruebas, con un código de producción enmarañado y defectuoso, clientes frustrados y la sensación de que su esfuerzo les había fallado. en cierto modo tenían razón. su esfuerzo les había fallado. pero fue su 172