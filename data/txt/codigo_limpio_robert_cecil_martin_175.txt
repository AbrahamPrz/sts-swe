descriptiva. listado 9-2 serializedpagerespondertest.java (refactorizado) public void testgetpagehierarchyasxml() throws exception { makepages(“pageone”, “pageone.childone”, “pagetwo”); submitrequest(“root”, “type:pages”); assertresponseisxml(); assertresponsecontains( “<name>pageone</name>”, “<name>pagetwo</name>”, “<name>childone</name>” ); } public void testsymboliclinksarenotinxmlpagehierarchy() throws exception { wikipage page = makepage(“pageone”); makepages(“pageone.childone”, “pagetwo”); addlinkto(page, “pagetwo”, “sympage”); submitrequest(“root”, “type:pages”); assertresponseisxml(); assertresponsecontains( “<name>pageone</name>”, “<name>pagetwo</name>”, “<name>childone</name>” ); assertresponsedoesnotcontain(“sympage”); } public void testgetdataasxml() throws exception { makepagewithcontent(“testpageone”, “test page”); submitrequest(“testpageone”, “type:data”); assertresponseisxml(); assertresponsecontains(“test page”, “<test”); } el patrón generar-operar-comprobar [38] es evidente en la estructura de las pruebas. cada una se divide claramente en tres partes. la primera crea los datos de prueba, la segunda opera en dichos datos y la tercera comprueba que la operación devuelva los resultados esperados. comprobará que se ha eliminado gran parte de los detalles molestos. las pruebas son concisas y sólo usan los tipos de datos y funciones que realmente necesitan. todo el que lea estas pruebas sabrá rápidamente para qué sirven y no se perderá entre detalles irrelevantes. 176