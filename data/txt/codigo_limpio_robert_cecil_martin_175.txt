descriptiva. Listado 9-2 SerializedPageResponderTest.java (refactorizado) public void testGetPageHierarchyAsXml() throws Exception { makePages(“PageOne”, “PageOne.ChildOne”, “PageTwo”); submitRequest(“root”, “type:pages”); assertResponseIsXML(); assertResponseContains( “<name>PageOne</name>”, “<name>PageTwo</name>”, “<name>ChildOne</name>” ); } public void testSymbolicLinksAreNotInXmlPageHierarchy() throws Exception { WikiPage page = makePage(“PageOne”); makePages(“PageOne.ChildOne”, “PageTwo”); addLinkTo(page, “PageTwo”, “SymPage”); submitRequest(“root”, “type:pages”); assertResponseIsXML(); assertResponseContains( “<name>PageOne</name>”, “<name>PageTwo</name>”, “<name>ChildOne</name>” ); assertResponseDoesNotContain(“SymPage”); } public void testGetDataAsXml() throws Exception { makePageWithContent(“TestPageOne”, “test page”); submitRequest(“TestPageOne”, “type:data”); assertResponseIsXML(); assertResponseContains(“test page”, “<Test”); } El patrón Generar-Operar-Comprobar [38]  es evidente en la estructura de las pruebas. Cada una se divide claramente en tres partes. La primera crea los datos de prueba, la segunda opera en dichos datos y la tercera comprueba que la operación devuelva los resultados esperados. Comprobará que se ha eliminado gran parte de los detalles molestos. Las pruebas son concisas y sólo usan los tipos de datos y funciones que realmente necesitan. Todo el que lea estas pruebas sabrá rápidamente para qué sirven y no se perderá entre detalles irrelevantes. 176