CAPÍTULO 23  MÉTRICAS DE PRODUCTO 551  23.8 R ESUMEN Las métricas de software proporcionan una forma cuantitativa para valorar la calidad de los  atributos internos de producto y, por tanto, permiten valorar la calidad antes de construir el producto. Las métricas proporcionan la comprensión necesaria para crear modelos efectivos de requerimientos y diseño, código sólido y pruebas amplias. Para ser útil en un contexto de mundo real, una métrica de software debe ser simple y calcu- lable, convincente, congruente y objetiva. Debe ser independiente del lenguaje de programación y ofrecer retroalimentación efectiva. Las métricas para el modelo de requerimientos se enfocan en los tres componentes del mo- delo: la función, los datos y el comportamiento. Las métricas para diseño consideran arquitec-tura, diseño en el nivel de componentes y conflictos en el diseño de interfaz. Las métricas de diseño arquitectónico consideran los aspectos estructurales del modelo de diseño. Las métricas de diseño en el nivel de componente proporcionan un indicio de la calidad del módulo al esta-blecer medidas indirectas para cohesión, acoplamiento y complejidad. Las métricas de diseño de interfaz de usuario ofrecen un indicio de la facilidad con la que puede usarse una GUI. Las métricas webapp consideran aspectos de la interfaz de usuario, así como estética, contenido y  navegación de la webapp. Las métricas para los sistemas OO se enfocan en mediciones que pueden aplicarse a las ca- racterísticas de clase y de diseño (localización, encapsulación, ocultamiento de información, herencia y técnicas de abstracción de objeto) que hacen única a la clase. La suite de métricas CK define seis métricas de software orientado a clase que se enfocan en la clase y en la jerarquía de clase. La suite de métricas también desarrolla métricas para valorar las colaboraciones entre clases y la cohesión en métodos que residen dentro de una clase. En un nivel orientado a clase, la suite de métricas CK puede aumentarse con las métricas propuestas por Lorenz y Kidd y con la suite de métricas MOOD. Halstead proporciona un interesante conjunto de métricas en el nivel del código fuente. Al  usar el número de operadores y operandos presentes en el código, la ciencia del software pro-porciona una variedad de métricas que pueden usarse para valorar la calidad del programa. Pocas métricas de producto se han propuesto para uso directo en las pruebas de software y  en el mantenimiento. Sin embargo, muchas otras métricas de producto pueden usarse para guiar el proceso de pruebas y como mecanismo para valorar la capacidad de mantenimiento de un programa de cómputo. Para valorar la comprobabilidad de un sistema OO, se ha propuesto una gran variedad de métricas OO.   PROBLEMAS  Y PUNTOS  POR EVALUAR 23.1. La teoría de la medición es un tema avanzado que tiene un fuerte engranaje con las métricas de soft- ware. Con [Zus97], [Fen91], [Zus90] o fuentes en la web, escriba un breve ensayo que resalte las tesis prin-cipales de la teoría de la medición. Proyecto individual: desarrolle una presentación acerca del tema y pre-séntela en clase. 23.2. ¿Por qué no es posible desarrollar una sola métrica exhaustiva para la complejidad de programa o  calidad de programa? Intente encontrar una medida o métrica de la vida diaria que viole los atributos de las métricas de software efectivos definidos en la sección 23.1.5. 23.3. Un sistema tiene 12 entradas externas, 24 salidas externas, presenta 30 diferentes consultas externas,  gestiona 4 archivos lógicos internos y tiene interfaz con 6 diferentes sistemas legados (6 AIE). Todos estos datos son de complejidad promedio y el sistema global es relativamente simple. Calcule PF para el sistema. 23.4. El software para System X tiene 24 requerimientos funcionales individuales y 14 requerimientos no  funcionales. ¿Cuál es la especificidad de los requerimientos y cuál es la completitud? 23Pressman(526-552).indd   55123Pressman(526-552).indd   551 19/1/10   23:29:5819/1/10   23:29:58