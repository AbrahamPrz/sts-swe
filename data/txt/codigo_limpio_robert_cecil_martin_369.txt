mantenga limpios sus archivos, bien organizados y sin elementos sobrantes. g13: conexiones artificiales los elementos que no dependen unos de otros no deben conectarse de forma artificial. por ejemplo, las enumeraciones generales no deben incluirse en clases más específicas ya que esto obliga a la aplicación a saber más sobre dichas clases. lo mismo sucede con funciones static de propósito general declaradas en clases específicas. por lo general, una conexión artificial es la que se establece entre dos módulos sin un propósito directo. es el resultado de incluir una variable, constante o función en una ubicación temporalmente útil pero inadecuada. es un síntoma de falta de atención. piense en dónde debe declarar sus funciones, constantes y variables. no las deje en el punto más cómodo. g14: envidia de las características uno de los síntomas de martin fowler [109] . los métodos de una clase deben interesarse por las variables y funciones de la clase a la que pertenecen, no por las variables y funciones de otras clases. cuando un método usa elementos de acceso y mutación de otro objeto para manipular los datos de éste, envidia el ámbito de la clase de dicho objeto. desea formar parte de la otra clase para tener acceso directo a las variables que manipula. por ejemplo: public class hourlypaycalculator { public money calculateweeklypay(hourlyemployee e) { int tenthrate = e.gettenthrate().getpennies(); int tenthsworked = e.gettenthsworked(); int straighttime = math.min(400, tenthsworked); int overtime = math.max(0, tenthsworked - straighttime); int straightpay = straighttime * tenthrate; int overtimepay = (int)math.round(overtime*tenthrate*1.5); return new money(straightpay + overtimepay); } } el método calculateweeklypay se acerca al objeto hourlyemployee para 370