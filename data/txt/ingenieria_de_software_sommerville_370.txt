 desde luego, todos los componentes podrían tener una falla de diseño común y, además, producir todos la misma respuesta (equivocada). al usar unidades de hardware que tienen una especificación común, pero que se diseñan y construyen por fabricantes diferentes, se reducen de modo común las posibilidades de tal falla. se supone que es mínima la probabi-lidad de que diferentes equipos cometan el mismo error de diseño o de fabricación. un enfoque similar puede usarse para software tolerante a fallas, donde n versiones diversas de un sistema de software se ejecutan en paralelo (avizienis, 1985; avizienis, 1995). este enfoque a la tolerancia a fallas de software, que se ilustra en la figura 13.7, se usa en sistemas de señalización ferroviaria, sistemas de aeronaves y sistemas de protec-ción de reactores. al usar una especificación común, el mismo sistema de software se implementa por algunos equipos. dichas versiones se ejecutan en computadoras separadas. sus salidas se comparan al usar un sistema de votación, y se rechazan las salidas inconsistentes o las que no se producen en tiempo. al menos tres versiones del sistema deben estar disponibles, de modo que dos versiones tienen que ser consistentes en caso de una falla individual. la programación de n-versión suele ser menos costosa que las arquitecturas de auto-verificación, en sistemas para los cuales se requiere un alto nivel de disponibilidad. sin embargo, todavía se requieren muchos equipos diferentes para desarrollar diferentes versiones del software. esto conduce a costos de desarrollo de software muy elevados. como resultado, este enfoque sólo se usa en sistemas donde no resulta práctico ofrecer un sistema de protección que proteja contra fallas críticas de seguridad. 13.3.4 diversidad de software todas las arquitecturas anteriores tolerantes a fallas se apoyan en la diversidad del software para lograr tolerancia a fallas. esto se basa en la suposición de que son independientes las implementaciones diversas de la misma especificación (o una parte de la especificación, para sistemas de protección). no deben incluir errores comunes y, además, no fallarán a1 a2 a3selector de salidaentrada figura 13.6 redundancia modular triple versión 1 versión 2 versión 3selector de salida gestor de fallas n versiones de softwareresultado acordadoentrada figura 13.7 programación de n-versión13.3 ■ arquitecturas de sistemas confiables 353 m13_sommerville_ingenieria_1ed_se_341-365.indd  353m13_sommerville_ingenieria_1ed_se_341-365.indd  353 3/18/11  4:59:13 pm3/18/11  4:59:13 pm