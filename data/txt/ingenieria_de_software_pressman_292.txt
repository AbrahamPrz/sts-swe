CAPÍTULO 10  DISEÑO EN EL NIVEL DE COMPONENTES 261 [Whi95]. Se describe por completo la interfaz al componente y se identifica la semántica, repre- sentada en el contexto de las condiciones previas y posteriores. El concepto debe comunicar el objetivo del componente. El contenido de un componente describe cómo se lleva a cabo el con- cepto. En esencia, el contenido es información que queda oculta a los usuarios casuales y que sólo necesitan conocer aquellos que pretenden modificar o probar el componente. El contexto  coloca un componente de software reutilizable en su dominio de aplicabilidad. Es decir, al es-pecificar las características conceptuales, operativas y de implantación, el contexto permite que un ingeniero de software encuentre el componente apropiado para que se cumplan los reque-rimientos de la aplicación. Concepto, contenido y contexto deben traducirse en un esquema concreto de especificación  para que tengan uso práctico. Se han escrito decenas de textos y artículos sobre esquemas de clasificación para componentes de software reutilizables (por ejemplo, consulte en [Cec06] el panorama de las tendencias actuales). La clasificación permite encontrar y recuperar componentes que son candidatos a la reutili- zación, pero debe existir un ambiente propicio para integrarlos con eficacia. Éste tiene las ca-racterísticas siguientes: • Una base de datos capaz de almacenar componentes de software y la información de  clasificación necesaria para recuperarlos. • Un sistema de administración de la biblioteca que dé acceso a la base de datos. • Un sistema de recuperación de componentes de software (por ejemplo, un agente de  solicitud de objetos) que permita que la aplicación de un cliente recupere componentes y servicios del servidor de la biblioteca. • Herramientas de ISBC que apoyen la integración de componentes reutilizados en un  diseño o implantación nuevos. Cada una de estas funciones interactúa con los confines de una biblioteca de reutilización o se halla incrustada en ella. La biblioteca de reutilización es un elemento de un repositorio mayor de software (véase el  capítulo 22) y brinda herramientas para el almacenamiento de componentes de software, así ¿Cuáles son las  características clave de un ambiente de reutilización de componentes?? Objetivo: Ayudar a modelar, diseñar, revisar e integrar los componentes de software como parte de un  sistema mayor. Mecánica: Las mecánicas de las herramientas varían. En general,  las herramientas de ISBC ayudan en una o más de las siguientes capacidades: especificar y modelar la arquitectura del software, investigar y seleccionar los componentes de software disponibles; inte-grar los componentes. Herramientas representativas 12 ComponentSource (www.componentsource.com) proporciona  una variedad amplia de componentes (y herramientas) de soft-ware CCS apoyada dentro de muchos estándares de componentes  distintos. Component Manager, desarrollado por Flashline (www.flashline. com), “es una aplicación que permite, promueve y mide la reutili-zación de componentes de software”. Select Component Factory, desarrollado por Select Business Solutions  (www.selectbs.com), “es un conjunto integrado de productos para diseñar software, revisar el diseño, administrar servicios o componentes, manejar requerimientos y generar código”. Software Through Pictures-ACD, distribuido por Aonix (www. aonix.com), permite el modelado exhaustivo con el uso de UML para el modelo OMG orientado a la arquitectura, un enfoque de la ISBC abierto y neutral para el vendedor.HERRAMIENTAS  DE SOFTWARE ISBC 12 Las herramientas mencionadas aquí no son obligatorias, sólo son una muestra de las que hay en esta categoría.  En la mayoría de casos, los nombres de las herramientas son marcas registradas por sus respectivos desarrolla- dores. 10Pressman(234-264).indd   26110Pressman(234-264).indd   261 26/1/10   17:33:2526/1/10   17:33:25