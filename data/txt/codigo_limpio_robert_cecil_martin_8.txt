dios está en los detalles , afirmó el arquitecto ludwig mies van der rohe. esta cita recuerda argumentos contemporáneos sobre el papel de la arquitectura en el desarrollo de software , en especial en el universo ágil. bob y yo hemos tenido esta conversación muchas veces. y sí, mies van der rohe se fijaba en la utilidad y la forma atemporal de la construcción que subyace a las grandes creaciones arquitectónicas. por otra parte, seleccionaba personalmente los pomos de todas las puertas de todas las casas que diseñaba. ¿por qué? porque las cosas pequeñas importan. en nuestro interminable debate sobre tdd, bob y yo coincidimos en que la arquitectura del software desempeña una importante labor en el desarrollo, aunque tenemos diferentes visiones de lo que esto significa. estas diferencias carecen de importancia, ya que podemos aceptar que los profesionales responsables dedican parte de su tiempo a planificar un proyecto antes de comenzarlo. las nociones de diseño controlado únicamente por pruebas y el código, propias de finales de la década de 1990, ya no son válidas. y la atención al detalle es un pilar fundamental de los profesionales, casi como cualquier visión. por un lado, la práctica en los detalles otorga dominio a los profesionales, y aumenta su confianza para la práctica a mayor escala. por otra parte, el más mínimo fallo de construcción, una puerta que no cierre bien o un baldosín mal colocado, acaba con el encanto del todo. de eso se trata el código limpio. pero la arquitectura es sólo una metáfora del desarrollo de software y en concreto de la parte del software que ofrece el producto inicial, de la misma forma que un arquitecto entrega un edificio inmaculado. hoy en día, el objetivo es comercializar rápidamente los productos. queremos que las fábricas produzcan software a pleno rendimiento. se trata de fábricas humanas, programadores que piensan, que sienten y que trabajan para crear un producto. la metáfora de la manufacturación es incluso más evidente en este pensamiento. los aspectos productivos de las fábricas de automóviles japonesas fueron una gran inspiración para serum. pero incluso en la industria automovilística, gran parte del trabajo no radica en la fabricación sino en el mantenimiento, o más bien en cómo evitarlo. en el software , el 80 por 100 o más de lo que hacemos se denomina cuantitativamente mantenimiento, el acto de reparar. en lugar de optar por la 9