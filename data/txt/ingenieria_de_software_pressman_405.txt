374 PARTE TRES  ADMINISTRACIÓN DE LA CALIDAD ellos, así como de la aplicación de estándares aceptados de la ingeniería de software. Además,  la calidad se define en términos de una amplia variedad de atributos de la calidad y se mide (indirectamente) con el empleo de varios índices y métricas. En las últimas tres décadas, un segmento pequeño pero sonoro de la comunidad de la inge- niería de software ha afirmado que se requiere un enfoque más formal para el ACS. Puede de-cirse que un programa de cómputo es un objeto matemático. Para cada lenguaje de programa-ción, es posible definir una sintaxis y semántica rigurosas, y se dispone de un enfoque igualmente riguroso para la especificación de los requerimientos del software (véase el capítulo 21). Si el modelo de los requerimientos (especificación) y el lenguaje de programación se representan en forma rigurosa, debe ser posible usar una demostración matemática para la corrección, de modo que se confirme que un programa se ajusta exactamente a sus especificaciones. Los intentos de demostrar la corrección de un programa no son nuevos. Dijkstra [Dij76a] y  Linger, Mills y Witt [Lin79], entre otros, han invocado pruebas de la corrección de programas y las han relacionado con el uso de conceptos de programación estructurada (véase el capí-tulo 10).  16.5 A SEGURAMIENTO  ESTADÍSTICO  DE LA CALIDAD  DEL SOFTWARE El aseguramiento estadístico de la calidad del software refleja una tendencia creciente en la industria para que se vuelva más cuantitativo respecto de la calidad. Para el software, el asegu-ramiento estadístico de la calidad implica los pasos siguientes:  1. Se recaba y clasifica la información acerca de errores y defectos del software.  2. Se hace un intento por rastrear cada error y defecto hasta sus primeras causas (por  ejemplo, no conformidad con las especificaciones, error de diseño, violación de los es- tándares, mala comunicación con el cliente , etc.).  3. Con el uso del Principio de Pareto (80 por ciento de los defectos se debe a 20 por ciento  de todas las causas posibles), se identifica 20 por ciento de las causas de errores y de-fectos (las pocas vitales).  4. Una vez identificadas las pocas causas vitales, se corrigen los problemas que han dado  origen a los errores y defectos. Este concepto relativamente simple representa un paso importante hacia la creación de un pro- ceso adaptativo del software en el que se hacen cambios para mejorar aquellos elementos del proceso que introducen errores. 16.5.1  Ejemplo general A fin de ilustrar el uso de los métodos estadísticos para el trabajo de ingeniería de software, suponga que una organización de ingeniería de software recaba información sobre los errores y defectos cometidos en un periodo de un año. Algunos de dichos errores se descubren a medida que se desarrolla el software. Otros (defectos) se encuentran después de haber liberado el soft-ware a sus usuarios finales. Aunque se descubren cientos de problemas diferentes, todos pue-den rastrearse hasta una (o más) de las causas siguientes: • Especificaciones erróneas o incompletas (EEI) • Mala interpretación de la comunicación con el cliente (MCC) • Desviación intencional de las especificaciones (DIE) • Violación de los estándares de programación (VEP) • Error en la representación de los datos (ERD)WebRef En la dirección www.gslis.utexas. edu/~rpollock/tqm.html, se encuentra información útil acerca del ACS y de los métodos formales de la calidad. ¿Qué pasos se  requieren para efectuar el ACS estadístico?? Cita: “Un análisis estadístico, si se realiza en forma apropiada, es una disección delicada de las incertidumbres, una cirugía de las suposiciones.” M. J. Moroney 16Pressman(368-382).indd   37416Pressman(368-382).indd   374 14/1/10   17:02:1614/1/10   17:02:16