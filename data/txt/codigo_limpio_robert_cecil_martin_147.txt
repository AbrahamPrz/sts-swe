invocación. Desafortunadamente, es algo que se suele olvidar. Por ello, es más recomendable generar una excepción al detectar un error. El código de invocación es más limpio. Su lógica no se oscurece por el control de errores. El Listado 7-2 muestra el código tras generar una excepción en los métodos que pueden detectar errores. Listado 7-2 DeviceController.java (con excepciones). public class DeviceController { … public void sendShutDown() { try { tryToShutDown(); } catch (DeviceShutDownError e) { logger.log(e); } } private void tryToShutDown() throws DeviceShutDownError { DeviceHandle handle = getHandle(DEV1); DeviceRecord record = retrieveDeviceRecord(handle); pauseDevice(handle); clearDeviceWorkQueue(handle); closeDevice(handle); } private DeviceHandle getHandle(DeviceID id) { … throw new DeviceShutDownError(“Invalid handle for: ” - id.toString()); … } … } Comprobará que es mucho más limpio. No es cuestión de estética. El código es mejor porque se solventan dos preocupaciones: el algoritmo para apagar el dispositivo y el control de errores ahora se encuentran separados. Puede ver cada uno de ellos y entenderlos de forma independiente. Crear primero la instrucción try-catch-finally 148