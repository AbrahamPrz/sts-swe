decisión de permitir que las pruebas fueran incorrectas lo que provocó el fallo. si hubieran empleado pruebas limpias, su esfuerzo no habría fallado. puedo afirmarlo con cierta seguridad porque he participado y dirigido muchos equipos que han tenido éxito gracias a pruebas de unidad limpias. la moraleja de la historia es sencilla: el código de prueba es tan importante como el de producción. no es un ciudadano de segunda. requiere concentración, diseño y cuidado. debe ser tan limpio como el código de producción. las pruebas propician posibilidades si sus pruebas no son limpias, las perderá. y sin ellas pierde lo mismo que hace que su código de producción sea flexible. sí, ha leído bien. las pruebas de unidad son las que hacen que el código sea flexible y se pueda mantener y reutilizar. la razón es sencilla. si tiene pruebas, no tendrá miedo a realizar cambios en el código. sin pruebas, cada cambio es un posible error. independientemente de la flexibilidad de su arquitectura, de la división del diseño, sin pruebas tendrá miedo a realizar cambios por la posibilidad de añadir errores no detectados. pero con las pruebas ese miedo desaparece. cuanto mayor sea el alcance de sus pruebas, menos miedo tendrá. podrá modificar el código con total impunidad, aunque su arquitectura no sea la mejor y el diseño sea mediocre. podrá mejorar la arquitectura y el diseño sin miedo alguno. por tanto, disponer de una suite automatizada de pruebas de unidad que cubran el código de producción es la clave para mantener limpio el diseño y la arquitectura. las pruebas proporcionan las posibilidades, ya que permiten el cambio. si sus pruebas no son limpias, la capacidad de modificar el código se verá limitada y perderá la posibilidad de mejorar la estructura de dicho código. cuanto menos limpias sean las pruebas, menos lo será el código. en última instancia perderá las pruebas y el código se corromperá. pruebas limpias 173