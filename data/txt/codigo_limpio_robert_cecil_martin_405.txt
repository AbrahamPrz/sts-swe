(NT)! N! T Calcular las órdenes posibles Extraído de un correo electrónico de Uncle Bob a Brett: Con  N  pasos y  T  subprocesos hay  T * N  pasos totales. Antes de cada paso hay un conmutador de contexto que elige entre los subprocesos. Por tanto, cada ruta se representa como una cadena de dígitos que denota los cambios de contexto. Dados los pasos  A y B  y los subprocesos 1 y 2, las seis rutas posibles son 1122, 1212, 1221, 2112, 2121 y 2211. O, en términos de pasos, A1B1A2B2, A1A2B1B2, A1A2B2B1, A2A1B1B2, A2A1B2B1 y A2B2A1B1. Para tres subprocesos, la secuencia sería 112233, 112323, 113223, 113232, 112233, 121233, 121323, 121332, 123132, 123123… Una característica de estas cadenas es que siempre debe haber  N  instancias de cada  T . Por tanto, la cadena 111111 no es válida ya que tiene seis instancias de 1 y ninguna de 2 y 3. Por tanto, necesitamos las permutaciones de  N  1,  N  2… y  N   T . En realidad son las permutaciones de  N * T  tomando cada vez  N * T , que es  (N * T)! , pero sin los duplicados. Por tanto, el truco consiste en contar los duplicados y restarlos de  (N * T)! . Dados dos pasos y dos subprocesos, ¿cuántos duplicados hay? Cada cadena de cuatro dígitos tiene dos 1 y dos 2. Estos pares se pueden intercambiar sin modificar el sentido de la cadena. Podríamos intercambiar los 1 o los 2, o ninguno. Por tanto hay cuatro isomorfas por cada cadena, lo que significa que hay tres duplicados, de modo que tres de las cuatro opciones son duplicados; por otra parte, una de las cuatro permutaciones no son duplicados. 4! * .25 = 6. Este razonamiento parece funcionar. ¿Cuántos duplicados hay? Si  N  = 2 y  T  = 2, podría intercambiar los 1, los 2, o ambos. En el caso de  N  = 2 y  T  = 3, podría intercambiar los 1, los 2, los 3, 1 y 2, 1 y 3, o 2 y 3. El intercambio son las permutaciones de  N . Imagine que hay  P  permutaciones de  N . El número de formas diferentes de organizar dichas permutaciones es  P**T . Por tanto el número de isomorfas posibles es  N!**T . Y el número de rutas es ( T*N )!/( N!**T ). De nuevo, en nuestro caso  T  = 2,  N  = 2 obtenemos 6 (24/4). Para  N  = 2 y  T  = 3 obtenemos 720/8 = 90. Para  N  = 3 y  T  = 3 obtenemos 9!/6^3 = 1680. En nuestro sencillo caso de una sola línea de código Java, que equivale a ocho líneas de código de  bytes  y a dos subprocesos, el número total de posibles rutas de ejecución es  12 870.  Si el tipo de  lastIdUsed  es  long , cada lectura y escritura se convierte en dos operaciones y no una, y el número de posibilidades asciende a  2 704 156. ¿Qué sucede si realizamos un cambio en este método? 406