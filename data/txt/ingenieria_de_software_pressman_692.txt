CAPÍTULO 29  MANTENIMIENTO Y REINGENIERÍA 661  29.5 R EINGENIERÍA  DE SOFTWARE El escenario es demasiado común: una aplicación que atendió las necesidades empresariales de  una compañía durante 10 o 15 años. Durante ese tiempo se corrigió, adaptó y mejoró muchas veces. Las personas realizaban esta tarea con las mejores intenciones, pero las buenas prácti-cas de ingeniería siempre se hicieron a un lado (debido a la presión de otros asuntos). Ahora la aplicación es inestable. Todavía funciona, pero cada vez que se intenta un cambio, ocurren in-esperados y serios efectos colaterales. Aun así, la aplicación debe seguir evolucionando. ¿Qué hacer? El software sin mantenimiento no es un problema nuevo. De hecho, el énfasis ampliado  acerca de la reingeniería de software se produjo por los problemas de mantenimiento de soft-ware que se acumularon durante más de cuatro décadas. 29.5.1  Un modelo de proceso de reingeniería de software La reingeniería toma tiempo, cuesta cantidades significativas de dinero y absorbe recursos que de otro modo pueden ocuparse en preocupaciones inmediatas. Por todas estas razones, la rein-geniería no se logra en pocos meses o incluso en algunos años. La reingeniería de los sistemas de información es una actividad que absorberá recursos de tecnología de la información durante muchos años. Por esto, toda organización necesita una estrategia pragmática para la reingenie-ría de software. Una estrategia factible se contempla en un modelo de proceso de reingeniería. Más tarde, en  esta sección, se estudiará el modelo, pero primero se presentan algunos principios básicos. La reingeniería es una actividad de reconstrucción. Para entenderla mejor, piense en una  actividad análoga: la reconstrucción de una casa. Considere la siguiente situación. Usted com-pra una casa en otro estado. En realidad nunca ha visto la propiedad, pero la adquirió a un precio sorprendentemente bajo, con la advertencia de que es posible que deba reconstruirla por completo. ¿Cómo procedería? • Antes de comenzar a reconstruir, parecería razonable inspeccionar la casa. Para deter- minar si necesita reconstruirse, usted (o un inspector profesional) crea una lista de criterios, de modo que su inspección sea sistemática. • Antes de demoler y reconstruir toda la casa, asegúrese de que la estructura es débil. Si la  casa es estructuralmente sólida, acaso sea posible “remodelar” sin reconstruir (a un costo mucho más bajo y en mucho menos tiempo). • Antes de comenzar a reconstruir, asegúrese de entender cómo se construyó la original.  Eche un vistazo detrás de las paredes. Entienda cómo están el alambrado, la plomería y la estructura interna. Incluso si tira todo a la basura, la comprensión que obtenga le servirá cuando comience la construcción. • Si comienza a reconstruir, use solamente los materiales más modernos y más  duraderos. Esto puede costar un poco más ahora, pero le ayudará a evitar costos y tardados mantenimientos posteriores. • Si decide reconstruir, sea disciplinado en ello. Use prácticas que resultarán en alta  calidad, hoy y en el futuro. Aunque estos principios se enfocan en la reconstrucción de una casa se aplican igualmente bien a la reingeniería de los sistemas y aplicaciones basados en cómputo. Para implementar estos principios puede usar un modelo de proceso de reingeniería de soft- ware que defina seis actividades, como se muestra en la figura 29.2. En algunos casos, dichas actividades ocurren en secuencia lineal, aunque no siempre. Por ejemplo, es posible que se tenga que recurrir a la ingeniería inversa (comprender el funcionamiento interno de un pro-grama) antes de que pueda comenzar la reestructuración de documentos.WebRef Una excelente fuente de información  acerca de la reingeniería de software puede encontrarse en reengineer.org 29Pressman(655-674).indd   66129Pressman(655-674).indd   661 26/1/10   17:33:0026/1/10   17:33:00