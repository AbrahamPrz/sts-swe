CAPÍTULO 12  DISEÑO BASADO EN PATRONES 299 Los patrones estructurales se centran en problemas y soluciones asociados con la manera en  la que se organizan e integran las clases y objetos para construir una estructura más grande. En  esencia, ayudan a establecer relaciones entre entidades dentro de un sistema. Por ejemplo, los patrones estructurales que se centran en aspectos orientados a clases proporcionan mecanis-mos de herencia que conducen a interfaces de programa más eficaces. Los patrones estructu-rales que se centran en objetos sugieren técnicas para combinar objetos dentro de otros objetos o para integrarlos en una estructura más amplia. Los patrones conductuales se enfocan a problemas asociados con la asignación de responsa- bilidad entre los objetos y a la manera en la que se efectúa la comunicación entre ellos. 12.1.2  Estructuras Los patrones en sí mismos podrían no ser suficientes para desarrollar un diseño completo. En ciertos casos, tal vez sea necesario dar el esqueleto de una infraestructura específica para la implementación, llamada estructura, para el trabajo de diseño. Es decir, puede seleccionarse una “miniarquitectura reutilizable que provea la estructura y comportamiento generales para una fa- milia de abstracciones de software, así como un contexto […] que especifique su colaboración y uso en un dominio determinado” [Amb98]. Una estructura no es un patrón arquitectónico, sino un esqueleto con varios “puntos de co- nexión” (también llamados ganchos o ranuras ) que permiten adaptarlo a un dominio de pro- blema específico. Los puntos de conexión permiten integrar clases o funciones específicas de un problema dentro del esqueleto. En un contexto orientado a objetos, una estructura es un conjunto de clases que cooperan. Gamma et al. [Gam95] describen de la manera siguiente las diferencias entre los patrones de  diseño y las estructuras: 1.  Los patrones de diseño son más abstractos que las estructuras. Las estructuras están incrustadas en  el código, pero en éste sólo es posible incrustar ejemplos de patrones. Una ventaja de las estruc- turas es que se escriben en lenguajes de programación y no sólo son estudiadas, sino ejecutadas y reutilizadas directamente […] 2.  Los patrones de diseño son elementos arquitectónicos más pequeños que las estructuras. Una estruc- tura normal contiene varios patrones de diseño, pero lo contrario nunca se cumple. 3.  Los patrones de diseño están menos especializados que las estructuras. Las estructuras siempre tie- nen un dominio particular de aplicación. En contraste, los patrones de diseño se usan en casi cualquier tipo de aplicación. Si bien es posible tener patrones de diseño más especializados, in-cluso éstos no imponen la arquitectura de una aplicación. En esencia, el diseñador de una estructura afirmará que una miniestructura reutilizable es apli- cable a todo software por desarrollarse en un dominio limitado de aplicación. Para ser más eficaces, las estructuras se aplican sin cambio. Pueden agregarse otros elementos de diseño, pero sólo a través de los puntos de conexión que permiten que el diseñador modifique el esque-leto de la estructura. 12.1.3  Descripción de un patrón El diseño basado en patrones comienza con el reconocimiento de patrones en la aplicación que se trata de construir, continúa con una búsqueda para determinar si otros han usado el patrón y termina con la aplicación de un patrón apropiado para el problema de que se trate. Es fre-cuente que la segunda sea la tarea más difícil. ¿Cómo se encuentran patrones que se ajusten a las necesidades? Una respuesta a esta pregunta debe basarse en la comunicación eficaz del problema al que  se dirige el patrón, el contexto en el que reside ése, el sistema de fuerzas que moldean el con-PUNTO CLAVE Una estructura es una  “miniarquitectura” reutilizable que sirve como base desde la que se pueden aplicar otros patrones de diseño. 12Pressman(295-316).indd   29912Pressman(295-316).indd   299 14/1/10   16:23:3514/1/10   16:23:35