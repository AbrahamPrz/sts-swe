quedan tres condiciones. evitar bloqueo y espera también puede eliminar el bloqueo mutuo si rechaza la espera. compruebe cada uno de los recursos antes de obtenerlos y libere todos los recursos y comience de nuevo si detecta uno que esté ocupado. este enfoque genera algunos problemas: inanición: un subproceso no consigue adquirir los recursos que necesita (puede que tenga una combinación exclusiva de recursos que casi nunca esté disponible). bloqueo activo: varios subprocesos pueden actuar al unísono, adquirir un recurso y liberarlo, de forma repetida. es especialmente probable en algoritmos de programación de cpu simples (como dispositivos incrustados o algoritmos de equilibrio de subprocesos escritos a mano). en ambos casos, se puede reducir la producción. el primero reduce la utilización de la cpu, mientras que el segundo genera una elevada utilización de la cpu sin sentido. aunque esta estrategia parezca ineficaz, es mejor que nada. como ventaja, siempre se puede implementar si todo lo demás falla. evitar la expropiación otra estrategia para evitar el bloqueo mutuo consiste en permitir que todos los subprocesos se apropien de los recursos de otros. suele realizarse a través de un sencillo mecanismo de solicitudes. cuando un subproceso descubre que hay un recurso ocupado, le solicita al propietario que lo libere. si el propietario también espera a otro recurso, lo libera y comienza de nuevo. es similar al enfoque anterior, pero, como ventaja, un subproceso puede esperar a un recurso, lo que reduce el número de reinicios. sin embargo, la gestión de todas estas solicitudes puede resultar complicada. 426