capítulo 18 ■ puntos clave 505 en el curso de una sola transacción, un usuario puede interactuar con instancias del mismo servicio que operan en varios servidores diferentes. 2. diseñe el sistema usando interacción asíncrona, para que la aplicación no tenga que esperar el resultado de una interacción (como una solicitud de lectura). esto permite que la aplicación realice trabajo útil mientras espera que termine la interacción. 3. gestione los recursos, tales como conexiones de red y bases de datos, como un depó-sito para que ningún servidor individual tenga probabilidad de agotar sus recursos. 4. diseñe su base de datos para permitir bloqueo de grano fino. esto es, no bloquee registros completos en la base de datos cuando esté en uso sólo parte de un registro. la noción de saas es un gran cambio de paradigma para computación distribuida. en lugar de que una organización aloje aplicaciones múltiples en sus servidores, saas permite que diferentes proveedores proporcionen externamente dichas aplicaciones. se está en medio de una transición de un modelo a otro y, en el futuro, es probable que esto tenga un efecto muy significativo sobre la ingeniería de los sistemas de software empre-sariales. puntos clave ■ los beneficios de los sistemas distribuidos son que pueden escalarse para hacer frente a la demanda creciente, pueden seguir proporcionando servicios de usuario (aun si fallan algunas partes del sistema) y permitir el almacenamiento de recursos. ■ los conflictos a considerar en el diseño de los sistemas distribuidos incluyen transparencia, apertura, escalabilidad, seguridad, calidad de servicio y gestión de fallas. ■ los sistemas cliente-servidor son sistemas distribuidos en los que el sistema se estructura en capas, con la capa de presentación implementada en una computadora cliente. los servidores ofrecen servicios de gestión de datos, aplicación y de base de datos. ■ los sistemas cliente-servidor pueden tener varios niveles, con diferentes capas del sistema distribuidas a diferentes computadoras. ■ los patrones arquitectónicos para sistemas distribuidos incluyen arquitecturas maestro-esclavo, arquitecturas cliente-servidor de dos niveles y multinivel, arquitecturas de componentes distribuidos y arquitecturas entre pares (par a par o punto a punto). ■ los sistemas de componentes distribuidos requieren que middleware maneje las comunicaciones de los componentes y que permitan que se agreguen y eliminen componentes del sistema. ■ las arquitecturas entre pares son arquitecturas descentralizadas en las que no hay distinción entre clientes y servidores. la computación se puede distribuir entre muchos sistemas en diferentes organizaciones. ■ el software como servicio es una forma de implementar aplicaciones como sistemas cliente-servidor ligero, en el que el cliente es un navegador web. m18_sommerville_ingenieria_1ed_se_479-507.indd  505m18_sommerville_ingenieria_1ed_se_479-507.indd  505 3/18/11  5:03:56 pm3/18/11  5:03:56 pm