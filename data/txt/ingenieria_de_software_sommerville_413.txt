396 capítulo 15 ■ garantía de confiabilidad y seguridad los métodos formales pueden usarse en diferentes etapas durante el proceso v&v: 1. una especificación formal del sistema puede desarrollarse y analizarse matemática- mente para identificar inconsistencias. esta técnica es efectiva para detectar errores y omisiones de especificación. la comprobación del modelo, que se explica en la siguiente sección, es un enfoque al análisis de especificación. 2. es posible verificar formalmente, mediante argumentos matemáticos, que el código de un sistema de software es consistente con esta especificación, pero ello requiere una especificación formal. esto permite descubrir errores de programación y algu-nos de diseño. dada la amplia brecha semántica entre una especificación de sistema formal y el código del programa, es difícil probar que un programa desarrollado por separado es con-sistente con su especificación. en consecuencia, ahora el trabajo en la verificación del programa se basa en el desarrollo transformacional. en un proceso de desarrollo trans-formacional, una especificación formal se transforma mediante una serie de representa-ciones en un código de programa. las herramientas de software apoyan el desarrollo de las transformaciones y ayudan a verificar que las correspondientes representaciones del sistema sean consistentes. tal vez el método b sea el método transformacional formal usado más ampliamente (abrial, 2005; wordsworth, 1996). se ha utilizado para el desa-rrollo de sistemas de control ferroviario y software de aviones. los defensores de los métodos formales afirman que el uso de dichos métodos con-duce a sistemas más confiables y seguros. la verificación formal demuestra que el pro-grama desarrollado satisface su especificación y que los errores de la implementación no comprometerán la confiabilidad del sistema. si se desarrolla un método formal de sistemas concurrentes mediante el uso de una especificación escrita en un lenguaje como csp (schneider, 1999), es posible descubrir condiciones que quizá den por resultado bloqueos en el programa final, lo que permitirá resolverlos, algo muy difícil de lograr sólo con las pruebas. sin embargo, la especificación formal y las pruebas no garantizan que el software sea fiable en el uso práctico. las razones son las siguientes: 1. la especificación tal vez no refleje los requerimientos reales de los usuarios del sis- tema. como se estudió en el capítulo 12, los usuarios del sistema rara vez entienden las notaciones formales, de manera que no pueden leer directamente la especifica-ción formal para encontrar errores y omisiones. esto significa que hay una consi-derable probabilidad de que la especificación formal contenga errores y no sea una representación precisa de los requerimientos del sistema.desarrollo de cleanroom el desarrollo de software cleanroom (cuarto limpio) se basa en una verificación del software formal y pruebas estadísticas. el objetivo del proceso cleanroom es obtener un software con cero defectos para garantizar que los sistemas entregados tengan un alto nivel de fiabilidad. en el proceso cleanroom, cada incremento de software se especifica formalmente, y esta especificación se transforma en una implementación. la corrección del software se demuestra mediante un enfoque formal. en el proceso no hay prueba de unidad por defectos, y las pruebas del sistema se enfocan en la valoración de la fiabilidad del sistema. http://www.softwareengineering-9.com/web/cleanroom/ m15_sommerville_ingenieria_1ed_se_393-422.indd  396m15_sommerville_ingenieria_1ed_se_393-422.indd  396 3/18/11  5:01:19 pm3/18/11  5:01:19 pm