18 capítulo 1 el software y la ingeniería de software convencional], se requiere reflexión y planeación. hay muchas técnicas para incluir la reutili- zación en cada nivel del proceso de desarrollo del sistema… la planeación anticipada en busca de la reutilización disminuye el costo e incrementa el valor tanto de los componentes reutilizables como de los sistemas en los que se incorpora. séptimo principio: ¡piense! este último principio es tal vez el que más se pasa por alto. pensar en todo con claridad an- tes de emprender la acción casi siempre produce mejores resultados. cuando se piensa en algo es más probable que se haga bien. asimismo, también se gana conocimiento al pensar cómo volver a hacerlo bien. si usted piensa en algo y aun así lo hace mal, eso se con vierte en una experiencia valiosa. un efecto colateral de pensar es aprender a reconocer cuando no se sabe algo, punto en el que se puede investigar la respuesta. cuando en un sistema se han puesto pensamientos claros, el valor se manifiesta. la aplicación de los primeros seis principios re-quiere pensar con intensidad, por lo que las recompensas potenciales son enormes. si todo ingeniero y equipo de software tan sólo siguiera los siete principios de hooker, se elimi- narían muchas de las dificultades que se experimentan al construir sistemas complejos basados en computadora. 1.6 mitos del software los mitos del software —creencias erróneas sobre éste y sobre el proceso que se utiliza para obtenerlo— se remontan a los primeros días de la computación. los mitos tienen cierto número de atributos que los hacen insidiosos. por ejemplo, parecen enunciados razonables de hechos (a veces contienen elementos de verdad), tienen una sensación intuitiva y es frecuente que los manifiesten profesionales experimentados que “conocen la historia”. en la actualidad, la mayoría de profesionales de la ingeniería de software reconocen los mi- tos como lo que son: actitudes equivocadas que han ocasionado serios problemas a los admi-nistradores y a los trabajadores por igual. sin embargo, las actitudes y hábitos antiguos son difíciles de modificar, y persisten algunos remanentes de los mitos del software. mitos de la administración. los gerentes que tienen responsabilidades en el software , como los de otras disciplinas, con frecuencia se hallan bajo presión para cumplir el presupuesto, man- tener la programación de actividades sin desvíos y mejorar la calidad. así como la persona que se ahoga se agarra de un clavo ardiente, no es raro que un gerente de software sostenga la creencia en un mito del software si eso disminuye la presión a que está sujeto (incluso de ma-nera temporal). mito:  tenemos un libro lleno de estándares y procedimientos para elaborar software. ¿no le dará a mi personal todo lo que necesita saber? realidad:  tal vez exista el libro de estándares, pero ¿se utiliza? ¿saben de su existencia los trabajadores del software? ¿refleja la práctica moderna de la ingeniería de software? ¿es completo? ¿es adaptable? ¿está dirigido a mejorar la en-trega a tiempo y también se centra en la calidad? en muchos casos, la res-puesta a todas estas preguntas es “no”. mito:  si nos atrasamos, podemos agregar más programadores y ponernos al corriente (en ocasiones, a esto se le llama “concepto de la horda de mongoles”). realidad:  el desarrollo del software no es un proceso mecánico similar a la manufac-tura. en palabras de brooks [bro95]: “agregar personal a un proyecto de soft-ware atrasado lo atrasará más”. al principio, esta afirmación parece ir contra la intuición. sin embargo, a medida que se agregan personas, las que ya se cita: “en ausencia de estándares sig- nificativos, una industria nueva como la del software depende sólo del folklore.” tom demarco webref la software project managers network (red de gerentes de proyectos de software), en www.spmn.com, lo ayuda a eliminar éstos y otros mitos. 01pressman(001-024).indd  1801pressman(001-024).indd  18 14/1/10  13:31:0214/1/10  13:31:02