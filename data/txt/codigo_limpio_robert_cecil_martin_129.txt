con un tiempo de espera. la versión sin sangrar, por su parte, es prácticamente impenetrable. romper el sangrado en ocasiones tenemos la tentación de romper la regla de sangrado con instrucciones if breves, bucles while breves o funciones breves. siempre que he sucumbido a esta tentación, he acabado por volver a aplicar el sangrado. por ello, evito replegar ámbitos a una línea, como en este ejemplo: public class commentwidget extends textwidget { public static final string regexp = “^#[^\r\n]*(?:(?:\r\n)|\n|\r)?”; public commentwidget(parentwidget parent, string text){super (parent, text);} public string render() throws exception { return “”; } } prefiero desplegar y sangrar los ámbitos: public class commentwidget extends textwidget { public static final string regexp = “^#[^\r\n]*(?:(?:\r\n)|\n|\r)?”; public commentwidget(parentwidget parent, string text) { super(parent, text); } public string render() throws exception { return “”; } } ámbitos ficticios en ocasiones, el cuerpo de una instrucción while o for es ficticio, como se muestra a continuación. no me gustan estas estructuras y prefiero evitarlas. en caso de no poder hacerlo, me aseguro de sangrar el cuerpo ficticio y de incluirlo entre paréntesis. no sabría decir cuántas veces me ha engañado un punto y coma situado al final de un bucle while en la misma línea. a menos que lo haga visible y lo sangre en una línea propia, es difícil de ver. while (dis.read(buf, 0, readbuffersize) != -1) ; 130