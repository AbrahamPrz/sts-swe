misma actividad del proceso (por ejemplo, una inspección de programa). las personas rea- lizan las tareas en diferentes formas, dependiendo de su personalidad, experiencia y educa-ción, de modo que este tipo de redundancia ofrece una perspectiva distinta al sistema. como se estudia en la sección 13.3.4, lograr la diversidad de software no es un pro-ceso sencillo. la diversidad y redundancia vuelven a los sistemas más complejos y, por lo tanto, más difíciles de entender. no sólo hay un código adicional para escribir y verificar, también debe agregarse al sistema funcionalidad adicional, con la finalidad de detectar la falla del componente y cambiar el control a componentes alternativos. esta complejidad adicional significa que es más probable que los programadores cometan errores y que sea menos factible que las personas que comprueban el sistema encuentren dichos errores. como consecuencia, algunas personas consideran que es mejor evitar la redundancia y la diversidad del software. su visión es que el enfoque más adecuado es diseñar el software tan sencillo como sea posible, con procedimientos muy rigurosos de verificación y valida-ción (parnas et al., 1990). es posible gastar más en verificación y validación gracias a los ahorros que resultan de no tener que desarrollar componentes de software redundantes. ambos enfoques se adoptan en sistemas comerciales críticos para la seguridad. por ejemplo, el hardware y software de control de vuelo del airbus 340 es tan diverso como redundante (storey, 1996). el software de control de vuelo del boeing 777 se basa en un hardware redundante, pero cada computadora opera el mismo software, que se validó ampliamente. los diseñadores del sistema de control de vuelo del boeing 777 se centra-ron en la simplicidad y no en la redundancia. estas dos aeronaves son muy confiables, así que los enfoques diverso y simple para la confiabilidad pueden ser claramente exitosos. 1 3.2 procesos confiables los procesos de software confiables están diseñados para producir software confiable. una compañía que emplea un proceso confiable puede estar segura de que el proceso se realizó y documentó adecuadamente, y que se utilizaron técnicas de desarrollo adecuadas para el diseño de sistemas críticos. la razón para invertir en los procesos confiables es que es probable que un buen proceso de software conduzca a entregar un software con menos errores y, además, es menos probable que yerre en su ejecución. la figura 13.2 muestra algunos de los atributos de los procesos de software confiables. la evidencia de que se usó un proceso confiable con frecuencia es importante para convencer a un regulador de que se aplicó la práctica de ingeniería de software más efectiva en el desarrollo del software. por lo general, los desarrolladores de software presentarán un modelo del proceso a un regulador, junto con evidencia de que se siguióprocesos operacionales confiables este capítulo analiza los procesos de desarrollo confiables, aunque un factor contribuyente igualmente importante para la confiabilidad del sistema es un proceso operacional del sistema. al diseñar tales procesos operacionales, se deben considerar los factores humanos y pensar siempre que los individuos son proclives a cometer errores cuando usan un sistema. un proceso confiable tiene que diseñarse para evitar errores humanos y, al cometerse éstos, el software debe detectar los errores y permitir su corrección. http://www.softwareengineering-9.com/web/dependabilityeng/humanfactors/13.2 ■ procesos confiables 345 m13_sommerville_ingenieria_1ed_se_341-365.indd  345m13_sommerville_ingenieria_1ed_se_341-365.indd  345 3/18/11  4:59:13 pm3/18/11  4:59:13 pm