se vuelva más transparente con tan sólo dividir los cálculos en valores intermedios con los nombres adecuados. G20: Los nombres de función deben indicar lo que hacen Fíjese en este código: Date newDate = date.add(5); ¿Intuye que se añaden cinco días a la fecha o son semanas u horas? ¿La instancia  date  cambia y la función simplemente devuelve un nuevo objeto Date  sin cambiar el antiguo?  Por la invocación no podemos saber qué hace la función . Si la función añade cinco días a la fecha y después la cambia, el nombre debería ser  addDaysTo  o  increaseByDays . Si, por otra parte, la función devuelve una nueva fecha con cinco días más pero no cambia la instancia date , el nombre debería ser  daysLater  o  daysSince . Si tiene que fijarse en la implementación (o documentación) de la función para saber qué hace, tendrá que elegir un nombre más apropiado o modificar la funcionalidad para que se pueda incluir en funciones con nombres más acertados. G21: Comprender el algoritmo Se crea gran cantidad de código extraño porque los autores no se esfuerzan en comprender el algoritmo. Consiguen que algo funcione combinando instrucciones  if  e indicadores sin pararse a pensar en qué sucede realmente. La programación es una tarea de exploración.  Creemos  que conocemos el algoritmo adecuado para algo pero después lo modificamos y variamos hasta conseguir que  funcione . ¿Cómo sabemos que  funciona ? Porque supera los casos de prueba que pensamos. No es un enfoque equivocado. De hecho, suele ser la única forma de conseguir que una función haga lo que pensamos que debe hacer. Sin 375