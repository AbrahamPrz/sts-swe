8.1 ■ Pruebas de desarrollo  211 tiene un examinador asociado que desarrolla pruebas y auxilia con el proceso de pruebas.  Para sistemas críticos, puede usarse un proceso más formal, con un grupo de prueba inde-pendiente dentro del equipo de desarrollo. Son responsables del desarrollo de pruebas y del mantenimiento de registros detallados de los resultados de las pruebas. Durante el desarrollo, las pruebas se realizan en tres niveles de granulación: 1. Pruebas de unidad, donde se ponen a prueba unidades de programa o clases de obje- tos individuales. Las pruebas de unidad deben enfocarse en comprobar la funciona-lidad de objetos o métodos. 2. Pruebas del componente, donde muchas unidades individuales se integran para crear componentes compuestos. La prueba de componentes debe enfocarse en probar interfaces del componente. 3. Pruebas del sistema, donde algunos o todos los componentes en un sistema se inte-gran y el sistema se prueba como un todo. Las pruebas del sistema deben enfocarse en poner a prueba las interacciones de los componentes.  Las pruebas de desarrollo son, ante todo, un proceso de prueba de defecto, en las cua-les la meta consiste en descubrir bugs en el software. Por lo tanto, a menudo están entre-lazadas con la depuración: el proceso de localizar problemas con el código y cambiar el programa para corregirlos.  8.1.1 Pruebas de unidad Las pruebas de unidad son el proceso de probar componentes del programa, como méto-dos o clases de objetos. Las funciones o los métodos individuales son el tipo más simple de componente. Las pruebas deben llamarse para dichas rutinas con diferentes paráme-tros de entrada. Usted puede usar los enfoques para el diseño de casos de prueba que se estudian en la sección 8.1.2, con la finalidad de elaborar las pruebas de función o de método. Cuando pone a prueba las clases de objetos, tiene que diseñar las pruebas para brindar cobertura a todas las características del objeto. Esto significa que debe:  probar todas las operaciones asociadas con el objeto;  establecer y verificar el valor de todos los atributos relacionados con el objeto; poner el objeto en todos los estados posibles. Esto quiere decir que tiene que simular  todos los eventos que causen un cambio de estado.Depuración Depuración (debugging) es el proceso para corregir los errores y problemas descubiertos por las pruebas. Al  usar información de las pruebas del programa, los depuradores, para localizar y reparar el error del programa, emplean tanto su conocimiento del lenguaje de programación como el resultado que se espera de la prueba. Este proceso recibe con frecuencia apoyo de herramientas de depuración interactivas que brindan información adicional sobre la ejecución del programa. http://www.SoftwareEngineering-9.com/Web/Testing/Debugging.html M08_SOMMERVILLE_INGENIERIA_1ED_SE_205-233.indd   211M08_SOMMERVILLE_INGENIERIA_1ED_SE_205-233.indd   211 3/18/11   5:39:59 PM3/18/11   5:39:59 PM