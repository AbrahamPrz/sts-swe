capítulo 18 prueba de aplicaciones convencionales 435 nos una vez durante las pruebas y que todas las condiciones lógicas se revisaron. la prueba de ruta o trayectoria básica, una técnica de caja blanca, usa gráficos de programa (o matrices grá-ficas) para derivar el conjunto de pruebas linealmente independientes que garantizarán la co-bertura del enunciado. las pruebas de condición y de flujo de datos revisan aún más la lógica del programa, y la prueba de bucles complementa otras técnicas de caja blanca al proporcionar un procedimiento para revisar los bucles de varios grados de complejidad. hetzel [het84] describe las pruebas de caja blanca como “pruebas en lo pequeño”. su impli- cación es que las pruebas de caja blanca que se consideraron en este capítulo por lo general se aplican a pequeños componentes del programa (por ejemplo, módulos o pequeños grupos de módulos). las pruebas de caja blanca, por otra parte, amplían el foco y pueden llamarse “prue-bas en lo grande”. las pruebas de caja negra se diseñan para validar los requerimientos funcionales sin consi- derar el funcionamiento interno de un programa. las técnicas de prueba de caja negra se enfo-can en el dominio de información del software, y derivan casos de prueba mediante la partición de los dominios de entrada y salida de un programa en forma que proporciona cobertura de prueba profunda. la partición de equivalencia divide el dominio de entrada en clases de datos que es probable que revisen una función de software específica. el análisis del valor de frontera sondea la habilidad del programa para manejar datos en los límites de lo aceptable. la prueba de arreglo ortogonal proporciona un método sistemático eficiente para probar sistemas con pequeño número de parámetros de entrada. la prueba basada en modelo usa elementos del modelo de requerimientos para probar el comportamiento de una aplicación. los métodos de prueba especializados abarcan un amplio arreglo de capacidades de soft- ware y áreas de aplicación. la prueba para interfaces gráficas de usuario, arquitecturas cliente-servidor, documentación y centros de ayuda, y los sistemas en tiempo real requieren cada uno lineamientos y técnicas especializadas. con frecuencia, los desarrolladores de software experimentados dicen: “las pruebas nunca terminan, sólo se transfieren de uno [el ingeniero de software] al cliente. cada vez que el cliente usa el programa, se realiza una prueba”. al aplicar el diseño de casos de prueba, pueden lograrse pruebas más completas y, en consecuencia, descubrir y corregir el mayor número de errores antes de comenzar “las pruebas del cliente”.  problemas y puntos para reflexionar 18.1. myers [mye79] usa el siguiente programa como una autovaloración de su habilidad para especificar pruebas adecuadas: un programa lee tres valores enteros. los tres se interpretan como representación de las longitudes de los lados de un triángulo. el programa imprime un mensaje que indica si el triángulo es esca-leno, isósceles o equilátero. desarrolle un conjunto de casos de prueba que crea que probarán este programa de manera adecuada. 18.2. diseñe e implemente el programa (con manipulación de error donde sea adecuado) que se especifica en el problema 18.1. derive un gráfico de flujo para el programa y aplique prueba de ruta básica para de-sarrollar casos de prueba que garanticen la prueba de todos los enunciados en el programa. ejecute los casos y muestre sus resultados. 18.3. ¿puede pensar en algunos objetivos de prueba adicionales que no se estudiaron en la sección 18.1.1? 18.4. seleccione un componente de software que haya diseñado e implementado recientemente. diseñe un conjunto de casos de prueba que garantice que todos los enunciados se ejecutan, usando prueba de ruta o trayectoria básica. 18.5. especifique, diseñe e implemente una herramienta de software que calcule la complejidad ciclomática para el lenguaje de programación de su elección. use la matriz de grafo como la estructura de datos operativa en su diseño. 18pressman(411-436).indd  43518pressman(411-436).indd  435 21/1/10  10:59:0121/1/10  10:59:01