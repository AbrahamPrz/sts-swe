capítulo 7 ■ diseño e implementación 177 el diseño y la implementación del software es la etapa del proceso de ingeniería de soft- ware en que se desarrolla un sistema de software ejecutable. para algunos sistemas simples, el diseño y la implementación del software es ingeniería de software, y todas las demás actividades se fusionan con este proceso. sin embargo, para sistemas grandes, el diseño y la implementación del software son sólo uno de una serie de procesos (ingeniería de requeri-mientos, verificación y validación, etcétera) implicados en la ingeniería de software. las actividades de diseño e implementación de software se encuentran invariable-mente entrelazadas. el diseño de software es una actividad creativa donde se identifi-can los componentes del software y sus relaciones, con base en los requerimientos de un cliente. la implementación es el proceso de realizar el diseño como un programa. algunas veces, hay una etapa de diseño separada y este último se modela y documenta. en otras ocasiones, un diseño se halla en la mente del programador o se bosqueja bur-damente en un pizarrón o en hojas de papel. el diseño trata sobre cómo resolver un pro-blema, de modo que siempre existe un proceso de diseño. sin embargo, en ocasiones no es necesario o adecuado describir con detalle el diseño usando el uml u otro lenguaje de descripción de diseño. diseño e implementación están estrechamente vinculados y usted, por lo general, debe tomar en cuenta los conflictos de implementación cuando desarrolle un diseño. por ejemplo, usar el uml para documentar un diseño puede ser lo correcto si está progra-mando en un lenguaje orientado a objetos, como java o c#. es menos útil cuando se desarrolla en un lenguaje de escritura dinámica, como python, y no tiene sentido en abso-luto si implementa su sistema al configurar un paquete comercial. como se estudió en el capítulo 3, los métodos ágiles suelen funcionar a partir de bosquejos informales del diseño y dejan a los programadores muchas de las decisiones de diseño. una de las decisiones de implementación más importantes, que se toman en una etapa inicial de un proyecto de software, consiste en determinar si debe comprar o diseñar el software de aplicación. en un gran rango de dominios, ahora es posible comprar sistemas comerciales (cots) que se adapten y personalicen según los requerimientos de los usua-rios. por ejemplo, si desea implementar un sistema de registros médicos, puede comprar un paquete que ya se use en hospitales. es posible que sea más barato y rápido aplicar este enfoque en vez de desarrollar un sistema en un lenguaje de programación convencional. al desarrollarse de esta forma una aplicación, el proceso de diseño se preocupa sobre cómo usar las características de configuración de dicho sistema, para entregar los reque-rimientos del mismo. por lo general, no se desarrollan modelos de diseño del sistema, como los modelos de los objetos del sistema y sus interacciones. en el capítulo 16 se estudia el enfoque basado en cots. se supone que la mayoría de los lectores de este libro cuentan con algo de experiencia en diseño e implementación de programas. esto se adquiere conforme se aprende a pro-gramar y se dominan los elementos de un lenguaje de programación como java o python. probablemente usted se instruyó en las buenas prácticas de programación cuando estu-dió lenguajes de programación, así como al depurar los programas que desarrolla. por lo tanto, aquí no se cubren temas de programación. en cambio, este capítulo tiene dos metas: 1. mostrar cómo el modelado de sistemas y el diseño arquitectónico (que se estudian en los capítulos 5 y 6) se ponen en práctica en el desarrollo de un diseño de software orientado a objetos. m07_sommerville_ingenieria_1ed_se_176-204.indd  177m07_sommerville_ingenieria_1ed_se_176-204.indd  177 3/18/11  4:50:12 pm3/18/11  4:50:12 pm