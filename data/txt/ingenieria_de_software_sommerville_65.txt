48 capítulo 2 ■ procesos de software esto significa que los clientes tienen menos probabilidad de encontrar fallas de soft- ware en las partes más significativas del sistema. sin embargo, existen problemas con la entrega incremental: 1. la mayoría de los sistemas requieren de una serie de recursos que se utilizan para diferentes partes del sistema. dado que los requerimientos no están definidos con detalle sino hasta que se implementa un incremento, resulta difícil identificar recur-sos comunes que necesiten todos los incrementos. 2. asimismo, el desarrollo iterativo resulta complicado cuando se diseña un sistema de reemplazo. los usuarios requieren de toda la funcionalidad del sistema antiguo, ya que es común que no deseen experimentar con un nuevo sistema incompleto. por lo tanto, es difícil conseguir retroalimentación útil del cliente. 3. la esencia de los procesos iterativos es que la especificación se desarrolla en con- junto con el software. sin embargo, esto se puede contradecir con el modelo de adquisiciones de muchas organizaciones, donde la especificación completa del sis-tema es parte del contrato de desarrollo del sistema. en el enfoque incremental, no hay especificación completa del sistema, sino hasta que se define el incremento final. esto requiere una nueva forma de contrato que los grandes clientes, como las agencias gubernamentales, encontrarían difícil de adoptar. existen algunos tipos de sistema donde el desarrollo incremental y la entrega no son el mejor enfoque. hay sistemas muy grandes donde el desarrollo incluye equipos que tra-bajan en diferentes ubicaciones, algunos sistemas embebidos donde el software depende del desarrollo de hardware y algunos sistemas críticos donde todos los requerimientos tienen que analizarse para comprobar las interacciones que comprometan la seguridad o protección del sistema. estos sistemas, desde luego, enfrentan los mismos problemas de incertidumbre y requerimientos cambiantes. en consecuencia, para solucionar tales problemas y obte-ner algunos de los beneficios del desarrollo incremental, se utiliza un proceso donde un prototipo del sistema se elabore iterativamente y se utilice como plataforma, para expe-rimentar con los requerimientos y el diseño del sistema. con la experiencia obtenida del prototipo, pueden concertarse los requerimientos definitivos. 2.3.3 modelo en espiral de boehm boehm (1988) propuso un marco del proceso de software dirigido por el riesgo (el modelo en espiral), que se muestra en la figura 2.11. aquí, el proceso de software se representa como una espiral, y no como una secuencia de actividades con cierto retroceso de una actividad a otra. cada ciclo en la espiral representa una fase del proceso de software. por ende, el ciclo más interno puede relacionarse con la factibilidad del sistema, el siguiente ciclo con la definición de requerimientos, el ciclo que sigue con el diseño del sistema, etcétera. el modelo en espiral combina el evitar el cambio con la tolerancia al cambio. lo anterior supone que los cambios son resultado de riesgos del proyecto e incluye activida-des de gestión de riesgos explícitas para reducir tales riesgos. m02_sommerville_ingenieria_1ed_se_027-055.indd  48m02_sommerville_ingenieria_1ed_se_027-055.indd  48 3/18/11  4:45:32 pm3/18/11  4:45:32 pm