498 parte tres administración de la calidad 21.8 r esumen la ingeniería del software de cuarto limpio es un enfoque formal del desarrollo de software que puede conducir a software con una calidad notablemente alta. usa la especificación de estruc-tura de cajas para el análisis y el modelado del diseño, y enfatiza la verificación de la exactitud, en lugar de las pruebas, como el mecanismo primario para encontrar y remover errores. la prueba de uso estadístico se aplica para desarrollar la información de tasa de fallos necesaria para certificar la confiabilidad del software entregado. el enfoque de cuarto limpio comienza con los modelos de análisis y diseño que usan una representación de estructura de cajas. una “caja” encapsula el sistema (o algún aspecto de él) en un nivel específico de abstracción. las cajas negras se usan para representar el comporta-miento externamente observable de un sistema. las cajas de estado encapsulan los datos y operaciones de estado. una caja clara se usa para modelar el diseño procedural que se implica mediante los datos y operaciones de una caja de estado. la verificación de exactitud se aplica una vez que está completo el diseño de estructura de cajas. el diseño procedural para un componente de software se divide en una serie de subfun-ciones. para probar la exactitud de las subfunciones, se definen condiciones de salida para cada subfunción y se aplica un conjunto de subpruebas. si cada condición de salida se satisface, el diseño debe ser correcto. una vez que está completa la verificación de exactitud, comienza la prueba de uso estadís- tico. a diferencia de las pruebas convencionales, la ingeniería del software de cuarto limpio no enfatiza las pruebas de unidad o de integración. en vez de ello, el software se prueba al definir un conjunto de escenarios de uso, al determinar la probabilidad de uso para cada escenario y luego definir pruebas aleatorias que se conformen con las probabilidades. los registros de error que resultan se combinan con modelos de muestreo, componentes y certificación para habilitar el cálculo matemático de la confiabilidad proyectada para el componente de software. los métodos formales usan las facilidades descriptivas de la teoría de conjuntos y la notación lógica para permitir que un ingeniero de software cree un enunciado claro de los hechos (reque-rimientos). los conceptos subyacentes que gobiernan los métodos formales son: 1) la invariante de datos, una condición verdadera a lo largo de la ejecución del sistema que contiene una co-objetivo: el objetivo de las herramientas de métodos for- males es auxiliar al equipo de software en la verificación de especificación y de exactitud. mecánica: la mecánica de las herramientas varía. en general, las herramientas auxilian a probar la especificación y la exactitud de la automatización, que por lo general se define mediante un lenguaje especializado para probar los teoremas. muchas herramientas no se comercializan y se desarrollaron con propósitos de investigación. herramientas representativas: 10 acl2, desarrollada en la universidad de texas (www.cs.utexas. edu/users/moore/acl2/), es “tanto un lenguaje de progra-mación en el que pueden modelarse sistemas de cómputo como una herramienta para ayudarle a probar las propiedades de dichos modelos”. eves, desarrollado por ora canadá (www.ora.on.ca/eves. html), implementa el lenguaje verdi para especificación formal y un generador de prueba automático. en http://vl.fmnet.info/ puede encontrar una extensa lista de más de 90 herramientas de métodos formales.herramientas de software métodos formales 10 las herramientas que se mencionan aquí no representan un respaldo, sino una muestra de las herramientas en esta categoría. en la mayoría de los casos, los nombres de las herramientas son marcas registradas por sus res- pectivos desarrolladores. 21pressman(478-500).indd  49821pressman(478-500).indd  498 19/1/10  12:43:2919/1/10  12:43:29