44 parte uno el proceso del software 2.4.2 el modelo de métodos formales el modelo de métodos formales agrupa actividades que llevan a la especificación matemática formal del software de cómputo. los métodos formales permiten especificar, desarrollar y veri- ficar un sistema basado en computadora por medio del empleo de una notación matemática rigurosa. ciertas organizaciones de desarrollo de software aplican una variante de este enfoque, que se denomina ingeniería de software de quirófano [mil87, dye92]. cuando durante el desarrollo se usan métodos formales (capítulo 21), se obtiene un meca- nismo para eliminar muchos de los problemas difíciles de vencer con otros paradigmas de la ingeniería de software. lo ambiguo, incompleto e inconsistente se descubre y corrige con más facilidad, no a través de una revisión ad hoc sino con la aplicación de análisis matemático. si durante el diseño se emplean métodos formales, éstos sirven como base para la verificación del programa, y así permiten descubrir y corregir errores que de otro modo no serían detectados. aunque el modelo de los métodos formales no es el más seguido, promete un software libre de defectos. sin embargo, se han expresado preocupaciones acerca de su aplicabilidad en un ambiente de negocios: • el desarrollo de modelos formales consume mucho tiempo y es caro. • debido a que pocos desarrolladores de software tienen la formación necesaria para aplicar métodos formales, se requiere mucha capacitación. • es difícil utilizar los modelos como mecanismo de comunicación para clientes sin complejidad técnica. a pesar de estas preocupaciones, el enfoque de los métodos formales ha ganado partidarios entre los desarrolladores que deben construir software de primera calidad en seguridad (por ejemplo, control electrónico de aeronaves y equipos médicos), y entre los desarrolladores que sufrirían graves pérdidas económicas si ocurrieran errores en su software. 2.4.3 desarrollo de software orientado a aspectos sin importar el proceso del software que se elija, los constructores de software complejo imple-mentan de manera invariable un conjunto de características, funciones y contenido de informa-ción localizados. estas características localizadas del software se modelan como componentes (clases orientadas a objetos) y luego se construyen dentro del contexto de una arquitectura de sistemas. a medida que los sistemas modernos basados en computadora se hacen más sofisti-cados (y complejos), ciertas preocupaciones —propiedades que requiere el cliente o áreas de interés técnico— se extienden a toda la arquitectura. algunas de ellas son las propiedades de alto nivel de un sistema (por ejemplo, seguridad y tolerancia a fallas). otras afectan a funcio-nes (aplicación de las reglas de negocios), mientras que otras más son sistémicas (sincroniza-ción de la tarea o administración de la memoria). cuando las preocupaciones afectan múltiples funciones, características e información del sistema, es frecuente que se les llame preocupaciones globales. los requerimientos del aspecto definen aquellas preocupaciones globales que tienen algún efecto a través de la arquitectura del software. el desarrollo de software orientado a aspectos (dsoa), conocido también como progra- mación orientada a aspectos (poa), es un paradigma de ingeniería de software relativamente nuevo que proporciona un proceso y enfoque metodológico para definir, especificar, diseñar y construir aspectos: “mecanismos más allá de subrutinas y herencia para localizar la expresión de una preocupación global” [elr01]. grundy [gru02] analiza con más profundidad los aspectos en el contexto de lo que denomina ingeniería de componentes orientada a aspectos (icoa): la icoa usa el concepto de rebanadas horizontales a través de componentes de software descom- puestos verticalmente, llamados “aspectos”, para caracterizar las propiedades globales funcionales y punto clave el dsoa define “aspectos” que expresan preocupaciones del cliente que afectan múltiples funciones, características e información del sistema.si con los métodos formales puede demostrarse lo correcto de un software, ¿por qué no son ampliamente utilizados? ? webref existen muchos recursos e información sobre soa en la dirección: aosd.net 02pressman(025-054).indd  4402pressman(025-054).indd  44 14/1/10  13:36:5014/1/10  13:36:50