456  Capítulo 17 ■ Ingeniería de software basada en componentes componente al combinar estas propuestas. La figura 17.1 muestra lo que el autor consi- dera como las características esenciales de un componente, como se usa en CBSE. Una forma útil de pensar en un componente es como un proveedor de uno o más servicios. Cuando un sistema necesita un servicio, llama a un componente que brinde 0programación que se usó para desarrollarlo. Por ejemplo, un componente en un sistema de biblioteca puede ofrecer un servicio de búsqueda que permita a los usuarios examinar diferentes catálogos de la biblioteca. Un componente que convierte de un formato gráfico a otro (por ejemplo, TIFF a JPEG) ofrece un servicio de conversión de datos, etcétera. Visualizar un componente como un proveedor de servicio pone de relieve dos carac-terísticas críticas de un componente de reutilización: 1. El componente es una entidad ejecutable independiente definida mediante sus interfa- ces. Para usarlo no se necesita conocimiento alguno de su código fuente. Puede hacerse referencia a él como un servicio externo o incluirse directamente en un programa. 2. Los servicios ofrecidos por un componente se ponen a disposición mediante una inter-faz, y todas las interacciones por dicha interfaz. La interfaz del componente se expresa en términos de operaciones parametrizadas y nunca se expone su estado interno.Característica del componente Descripción Estandarizado Estandarización de componentes significa que un componente utilizado  durante un proceso CBSE debe ajustarse a un modelo de componentes estándar. Este modelo puede definir interfaces de componentes, metadatos de componentes, documentación, composición e implementación. Independiente Un componente debe ser independiente; debe ser factible componerlo e implementarlo sin usar otros componentes específicos. En situaciones en que el componente necesita brindar servicios externos, esto debería plantearse claramente en una especificación de interfaz de “requiere”. Componible Para que un componente sea componible, todas las interacciones externas deben tener lugar mediante interfaces definidas públicamente. Además, debe permitir acceso externo a información acerca de sí mismo, así como a sus métodos y atributos. Implementable Para que sea implementable, un componente debe estar autocontenido. Debe ser capaz de ejecutarse como entidad independiente en una plataforma de componente que permita una implementación del modelo de componentes. Por lo general, esto significa que el componente es binario y no tiene que compilarse antes de su implementación. Si un componente se implementa como servicio, no tiene que implementarse por parte de un usuario de un componente. En vez de ello, se implementa por parte del proveedor del servicio. Documentado Los componentes deben implementarse por completo, para que los usuarios potenciales puedan decidir si los componentes cumplen o no sus necesidades. Debe especificarse la sintaxis y, de manera ideal, la semántica de todas las interfaces de componente. Figura 17.1 Características de los componentes M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   456M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   456 3/18/11   5:03:04 PM3/18/11   5:03:04 PM