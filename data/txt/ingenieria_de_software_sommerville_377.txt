360  Capítulo 13 ■ Ingeniería de conﬁ  abilidad a áreas de la memoria de la máquina (apuntan a una ubicación de memoria). Los erro- res en el uso de apuntadores suelen ser devastadores si se establecen de manera in-correcta y, en consecuencia, apuntan al área de memoria equivocada. También hacen más difícil la implementación de comprobaciones de límites y otras estructuras. 4. Asignación de memoria dinámica  La memoria del programa puede asignarse a  tiempo de ejecución, en vez de a tiempo de compilación. El peligro con esto es que es posible no desasignar la memoria adecuadamente, de modo que con el tiempo se agota la memoria disponible. Quizás esto sea un error muy difícil de detectar, porque el sistema podría operar exitosamente durante mucho tiempo antes de que ocurra el problema. 5. Paralelismo Cuando los procesos se ejecutan concurrentemente, puede haber suti-les dependencias de temporización entre ellos. Los problemas de temporización por lo general no suelen detectarse mediante inspección del programa, en tanto que la combinación peculiar de circunstancias que causan un problema de temporización quizá no ocurra durante las pruebas de un sistema. El paralelismo puede ser inevita-ble, pero su uso tiene que controlarse cuidadosamente para minimizar las dependen-cias entre procesos. 6. Recursión Cuando un procedimiento o método se solicita a sí mismo o solicita otro procedimiento, que entonces solicita al procedimiento solicitante original, esto se llama “recursión”. El uso de recursión puede derivar en programas concisos; sin embargo, sería difícil seguir la lógica de los programas recursivos. Por lo tanto, los errores de programación son más difíciles de detectar. Los errores de recursión podrían dar como resultado la asignación de toda la memoria del sistema conforme se crean variables en pilas temporales. 7. Interrupciones Se trata de un medio para forzar la transferencia del control a una sec-ción de código, sin importar si el código se ejecuta en la actualidad. Los peligros de esto son evidentes; la interrupción llega a provocar la terminación de una operación crítica. 8. Herencia El problema con la herencia en la programación orientada a objetos es que el código asociado con un objeto no está todo en un lugar. Esto hace más difí-cil de entender el comportamiento del objeto. De ahí que sea más probable que se pierdan errores de programación. Más aún, cuando se combina con enlaces dinámi-cos, la herencia puede causar problemas de temporización en tiempo de ejecución. Diferentes instancias de un método pueden ligarse a una petición, dependiendo de los tipos de parámetro. En consecuencia, se emplearán diferentes cantidades de tiempo en busca de la instancia del método correcto. 9. Alias Esto ocurre cuando se usa más de un nombre para referirse a la misma entidad en un programa; por ejemplo, cuando dos apuntadores con diferentes nombres seña-lan la misma ubicación de memoria. Es fácil que los lectores del programa pierdan enunciados que cambian la entidad cuando tienen varios nombres por considerar. 10. Arreglos sin límites En lenguajes como C, los arreglos simplemente son formas de acceder a la memoria y usted puede hacer asignaciones más allá del final de un arre-glo. El sistema de tiempo de ejecución no comprueba que las asignaciones se refieran realmente a elementos en el arreglo. El desbordamiento de buffer, en que un atacante construye deliberadamente un programa para escribir memoria más allá del final de un buffer implementado como arreglo, es una conocida vulnerabilidad en la seguridad. M13_SOMMERVILLE_INGENIERIA_1ED_SE_341-365.indd   360M13_SOMMERVILLE_INGENIERIA_1ED_SE_341-365.indd   360 3/18/11   4:59:14 PM3/18/11   4:59:14 PM