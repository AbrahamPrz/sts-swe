408 PARTE TRES  ADMINISTRACIÓN DE LA CALIDAD para la evaluación cuidadosa basada en un modelo completo de diseño y en código fuente  claro. El factor humano.  Cualquier discusión de los enfoques y herramientas de depuración está  incompleta sin mencionar un poderoso aliado: ¡otras personas! Un punto de vista fresco, no  empañado por horas de frustración, puede hacer maravillas.7 Una máxima final para la depura- ción puede ser: “Cuando todo lo demás falle, ¡consiga ayuda!” 17.8.4  Corrección del error Una vez encontrado el error, debe corregirse. Pero, como ya se señaló, la corrección de un error puede introducir otros errores y, por tanto, hacer más daño que bien. Van Vleck [Van89] sugiere tres preguntas simples que deben plantearse antes de hacer la “corrección” que remueva la causa de un error:  1. ¿La causa del error se reproduce en otr  a parte del programa?  En muchas situaciones, un  defecto de programa es causado por un patrón de lógica erróneo que puede reprodu-cirse en alguna otra parte. La consideración explícita del patrón lógico puede resultar  en el descubrimiento de otros errores.  2. ¿Qué “siguiente error” puede introducirse con la corrección que está a punto de realizar?   Antes de hacer la corrección, debe evaluarse el código fuente (o, mejor , el diseño) para  valorar el acoplamiento de las estructuras lógica y de datos. Si la corrección se realizará  en una sección altamente acoplada del programa, debe tenerse especial cuidado  cuando se realice algún cambio.  3. ¿Qué debió hacerse par a evitar este error desde el principio?  Esta pregunta es el primer  paso hacia el establecimiento de un enfoque de aseguramiento de calidad estadística  del software (capítulo 16). Si se corrigen tanto el proceso como el producto, el error se  removerá del programa actual y podrá eliminarse de todos los programas futuros.  17.9 R ESUMEN Las pruebas de software representan el porcentaje más grande de esfuerzo técnico en el proceso  de software. Sin importar el tipo de software que se construya, una estrategia para planificar, ejecutar y controlar pruebas sistemáticas comienza por considerar pequeños elementos del software y moverse hacia afuera, hacia el programa como un todo. El objetivo de las pruebas del software es descubrir errores. Para software convencional, este  objetivo se logra mediante una serie de pasos de prueba. Las pruebas de unidad e integración se concentran en la verificación funcional de un componente y en la incorporación de compo-nentes en una arquitectura de software. Las pruebas de validación demuestran la conformidad con los requerimientos del software y las pruebas del sistema validan el software una vez que se incorporó en un sistema más grande. Cada paso de la prueba se logra a través de una serie de técnicas de prueba sistemáticas que auxilian en el diseño de casos de prueba. Con cada paso de prueba, se amplía el nivel de abstracción con la que se considera el software. La estrategia para probar software orientado a objeto comienza con pruebas que ejercitan  las operaciones dentro de una clase y luego avanzan hacia la prueba basada en hebra para in-tegración. Las hebras son conjuntos de clases que responden a una entrada o evento. Las prue-bas basadas en uso se enfocan en clases que no colaboran demasiado con otras clases. 7 El concepto de programación por parejas  (recomendado como parte del modelo de programación extrema que  se estudió en el capítulo 3), proporciona un mecanismo de “depuración” conforme se diseña y codifica el soft- ware.Cita: “El mejor examinador no es  aquel que encuentra más erro-res... el mejor es quien consigue la corrección de más errores.” Cem Kaner et al. 17Pressman(383-410).indd   40817Pressman(383-410).indd   408 21/1/10   10:59:2621/1/10   10:59:26