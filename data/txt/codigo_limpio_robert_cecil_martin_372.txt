aunque parezca reducida y densa, también es prácticamente impenetrable. es recomendable dedicar tiempo a lograr que la intención de nuestro código sea aparente para nuestros lectores. g17: responsabilidad desubicada una de las principales decisiones de un programador de software es dónde ubicar el código. por ejemplo, dónde incluir la constante pi . ¿en la clase math ? ¿pertenece a la clase trigonometry ? ¿o a la clase circle ? el principio de mínima sorpresa vuelve a aparecer. el código debe ubicarse donde el lector espera encontrarlo. la constante pi debe incluirse junto a la declaración de las funciones trigonométricas. la constante overtime_rate debe declararse en la clase hourlypaycalculator . en ocasiones presumimos de dónde añadimos una determinada funcionalidad. incluimos una función porque nos resulta cómodo pero no porque sea intuitivo para el lector. por ejemplo, puede que tengamos que imprimir un informe con el total de horas que ha trabajado un empleado. podríamos sumar las horas en el código que imprime el informe o intentar mantener un total en el código que acepte horarios de trabajo. una forma de tomar esta decisión consiste en analizar el nombre de las funciones. imagine que el módulo del informe tiene la función gettotalhours . imagine también que el módulo que acepta horarios de trabajo tiene la función savetimecard . ¿cuál de las dos, por nombre, implica que calcula el total? la respuesta es evidente. existen motivos de rendimiento para calcular el total como horarios de trabajo y no como informe impreso. es correcto, pero el nombre de las funciones debería reflejarlo. por ejemplo, debería haber una función computerunningtotalofhours en el módulo de horarios. g18: elementos estáticos incorrectos math.max (double a, double b) es un método estático correcto. no opera 373