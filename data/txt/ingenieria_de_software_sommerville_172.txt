6.3 ■ patrones arquitectónicos 155 para el desarrollo dirigido por modelo. sin embargo, se considera que los modelos y las notaciones informales, como el uml, seguirán siendo las formas de uso más común para documentar las arquitecturas del sistema. los usuarios de métodos ágiles afirman que, por lo general, no se utiliza la docu-mentación detallada del diseño. por lo tanto, desarrollarla es un desperdicio de tiempo y dinero. el autor está en gran medida de acuerdo con esta visión y considera que, para la mayoría de los sistemas, no vale la pena desarrollar una descripción arquitectónica detallada desde estas cuatro perspectivas. uno debe desarrollar las vistas que sean útiles para la comunicación sin preocuparse si la documentación arquitectónica está completa o no. sin embargo, una excepción es al desarrollar sistemas críticos, cuando es necesario realizar un análisis de confiabilidad detallado del sistema. tal vez se deba convencer a reguladores externos de que el sistema se hizo conforme a sus regulaciones y, en conse-cuencia, puede requerirse una documentación arquitectónica completa. 6.3 patrones arquitectónicos la idea de los patrones como una forma de presentar, compartir y reutilizar el conoci-miento sobre los sistemas de software se usa ahora ampliamente. el origen de esto fue la publicación de un libro acerca de patrones de diseño orientados a objetos (gamma et al., 1995), que incitó el desarrollo de otros tipos de patrón, como los patrones para el diseño organizacional (coplien y harrison, 2004), patrones de usabilidad (usability group, 1998), interacción (martin y sommerville, 2004), administración de la configuración nombre mvc (modelo de vista del controlador) descripción separa presentación e interacción de los datos del sistema. el sistema se estructura en tres componentes lógicos que interactúan entre sí. el componente modelo maneja los datos del sistema y las operaciones asociadas a esos datos. el componente vista define y gestiona cómo se presentan los datos al usuario. el componente controlador dirige la interacción del usuario (por ejemplo, teclas oprimidas, clics del mouse, etcétera) y pasa estas interacciones a vista y modelo. véase la figura 6.3. ejemplo la figura 6.4 muestra la arquitectura de un sistema de aplicación basado en la web, que se organiza con el uso del patrón mvc. cuándo se usa se usa cuando existen múltiples formas de ver e interactuar con los datos. también se utiliza al desconocerse los requerimientos futuros para la interacción y presentación. ventajas permite que los datos cambien de manera independiente de su representación y viceversa. soporta en diferentes formas la presentación de los mismos datos, y los cambios en una representación se muestran en todos ellos. desventajas puede implicar código adicional y complejidad de código cuando el modelo de datos y las interacciones son simples. figura 6.2 patrón modelo de vista del controlador (mvc) m06_sommerville_ingenieria_1ed_se_147-175.indd  155m06_sommerville_ingenieria_1ed_se_147-175.indd  155 3/18/11  4:49:07 pm3/18/11  4:49:07 pm