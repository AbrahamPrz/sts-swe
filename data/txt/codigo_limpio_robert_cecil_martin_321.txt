dos fanáticos enciendan sus portátiles y empiecen a escribir código?” [94] tras tres horas de trabajo de altura, habían creado los fundamentos de junit. el módulo que analizaremos es un inteligente fragmento de código que permite identificar errores de comparación de cadenas. el nombre del módulo es comparisoncompactor . dadas dos cadenas diferentes, como abcde y abxde , muestra la diferencia entre ambas generando una cadena como <… b[x]d…> . podríamos explicarlo más, pero los casos de prueba son mejores. fíjese en el listado 15-1 para comprender los requisitos de este módulo. analice la estructura de las pruebas. ¿podrían ser más simples o más evidentes? listado 15-1 comparisoncompactortest.java. package junit.tests.framework; import junit.framework.comparisoncompactor; import junit.framework.testcase; public class comparisoncompactortest extends testcase { public void testmessage() { string failure= new comparisoncompactor(0, “b”, “c”).compact(“a”); asserttrue(“a expected:<[b]> but was:<[c]>”.equals(failure)); } public void teststartsame() { string failure= new comparisoncompactor(1, “ba”, “bc”).compact(null); assertequals(“expected:<b[a]> but was:<b[c]>”, failure); } public void testendsame() { string failure= new comparisoncompactor(1, “ab”, “cb”).compact(null); assertequals(“expected:<[a]b> but was:<[c]b>”, failure); } public void testsame() { string failure= new comparisoncompactor(1, “ab”, “ab”).compact(null); assertequals(“expected:<ab> but was:<ab>”, failure); } public void testnocontextstartandendsame() { string failure= new comparisoncompactor(0, “abc”, “adc”).compact(null); assertequals(“expected:<…[b]…> but was:<…[d]…>”, failure); } 322