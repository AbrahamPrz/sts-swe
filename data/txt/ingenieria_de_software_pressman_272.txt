CAPÍTULO 10  DISEÑO EN EL NIVEL DE COMPONENTES 241 En la figura 10.4 se ilustra una forma de seguir el PAC para la clase Detector. La interfaz  sensor presenta una consistente visión de los componentes sensores para los detectores. Si se  agregara un nuevo tipo de sensor, no se requeriría hacer ningún cambio para la clase Detector  (componente). Se preservaría el PAC. Principio de sustitución de Liskov (PSL).   “Las subclases deben ser sustituibles por sus clases  de base” [Mar00]. Este principio de diseño, originalmente propuesto por Barbara Lisko v [Lis88],  sugiere que un componente que use una clase de base debe funcionar bien si una clase derivada de la clase base pasa al componente. El PSL demanda que cualquier clase derivada de una clase de base debe respetar cualquier contrato implícito entre la clase de base y los componen-tes que la usan. En el contexto de este análisis, un “contrato” es una precondición que debe ser  verdadera antes de que el componente use una clase de base y una poscondición que debe ser ver dadera después de ello. Cuando se crean clases derivadas hay que asegurarse de que  respeten la precondición y la poscondición. Principio de Inversión de la Dependencia (PID).  “Dependa de las abstr  acciones. No de- penda de las concreciones” [Mar00]. Como se vio en el estudio del PAC, las abstracciones son el lugar en el que es posible ampliar un diseño sin muchas dificultades. Entre más dependa un componente de otros componentes concretos (y no de abstracciones tales como una interfaz), más difícil será ampliarlo. Principio de segregación de la interfaz (PSI).  “Es mejor tener m  uchas interfaces específicas  del cliente que una sola de propósito general”  [Mar00]. Hay muchas instancias en las que múltiples  componentes del cliente usan las operaciones que provee una clase servidor. El PSI sugiere que  debe crearse una interfaz especializada que atienda a cada categoría principal de clientes. En la interfaz de ese cliente, sólo deben especificarse aquellas operaciones que sean relevantes para una categoría particular de clientes. Por ejemplo, considere la clase PlanodelaCasa que se usó en las funciones de seguridad y  vigilancia de CasaSegura (véase el capítulo 6). Para las funciones de seguridad, PlanodelaCasa  se utiliza sólo durante las actividades de configuración y emplea las operaciones SituarDisposi- tivo( ), MostrarDispositivo( ), AgruparDispositivo( ) y QuitarDispositivo( ) para situar, mostrar, agru- par y quitar sensores del plano de la casa. La función de vigilancia de CasaSegura usa las cuatro  operaciones mencionadas para la seguridad, pero también requiere operaciones especiales para administrar cámaras: MostrarFOV( ) y MostrarIdentificacióndeDispositivo( ). Entonces, el PSI su- giere que los componentes cliente de las dos funciones de CasaSegura tienen interfaces espe- cializadas definidas para ellas. La interfaz para la seguridad incluiría sólo las operaciones Situar- Dispositivo( ), MostrarDispositivo( ), AgruparDispositivo( ) y QuitarDispositivo( ). La interfaz para  vigilancia incorporaría esas mismas operaciones pero también MostrarFOV( ) y MostrarIdentifi- cacióndeDispositivo( ). Aunque los principios de diseño en el nivel de componentes son una guía útil, los componen- tes no existen en el vacío. En muchos casos, los componentes o clases individuales están orga-nizados en subsistemas o paquetes. Es razonable preguntar cómo debe ocurrir esta actividad de agrupamiento. ¿Exactamente cómo deben organizarse los componentes conforme avanza el diseño? Martin [Mar00] propone principios adicionales de agrupamiento que son aplicables al diseño en el nivel de componentes: Principio de equivalencia de la liberación de la reutilización (PER).   “El gr ánulo de reuti- lización es el gránulo de liberación” [Mar00]. Cuando las clases o componentes se diseñan para ser reutilizables, existe un contrato implícito que se establece entre el desarrollador de la enti-dad reutilizable y las personas que la emplearán. El desarrollador se compromete a establecer un sistema que controle la liberación para que dé apoyo y mantenimiento a las versiones ante-riores de la entidad mientras los usuarios se actualizan poco a poco con la versión más nueva. Si omite el diseño y pasa al código,  sólo recuerde que el diseño es la última “concreción”. Estaría violando el PID.CONSEJO PUNTO CLAVE Para que los componentes sean reutilizables, su diseño requiere algo más que un buen diseño técnico. También exige mecanismos efectivos de configuración (véase el capítulo 22). 10Pressman(234-264).indd   24110Pressman(234-264).indd   241 26/1/10   17:33:1826/1/10   17:33:18