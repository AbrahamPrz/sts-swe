131 calendar.set(getyear(), ordinalmonth, getdayofmonth(), 0, 0, 0); 132 return calendar.gettime(); 133 } 134 135 public string tostring() { 136 return string.format(“%02d-%s-%d”, getdayofmonth(), getmonth(), getyear()); 137 } 138 139 public day getdayofweek() { 140 day startingday = getdayofweekforordinalzero(); 141 int startingoffset = startingday.toint() - day.sunday.toint(); 142 int ordinalofdayofweek = (getordinalday() + startingoffset) % 7; 143 return day.fromint(ordinalofdayofweek + day.sunday.toint()); 144 } 145 146 public int dayssince(daydate date) { 147 return getordinalday() - date.getordinalday(); 148 } 149 150 public boolean ison(daydate other) { 151 return getordinalday() == other.getordinalday(); 152 } 153 154 public boolean isbefore(daydate other) { 155 return getordinalday() < other.getordinalday(); 156 } 157 158 public boolean isonorbefore(daydate other) { 159 return getordinalday() <= other.getordinalday(); 160 } 161 162 public boolean isafter(daydate other) { 163 return getordinalday() > other.getordinalday(); 164 } 165 166 public boolean isonorafter(daydate other) { 167 return getordinalday() >= other.getordinalday(); 168 } 169 170 public boolean isinrange(daydate d1, daydate d2) { 171 return isinrange(d1, d2, dateinterval.closed); 172 } 173 174 public boolean isinrange(daydate d1, daydate d2, dateinterval interval) { 504