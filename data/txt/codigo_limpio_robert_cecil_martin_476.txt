202 // assertequals(1,stringtomonthcode(“january”)); 203 // assertequals(2,stringtomonthcode(“february”)); 204 // assertequals(3,stringtomonthcode(“mar”)); 205 // assertequals(4,stringtomonthcode(“april”)); 206 // assertequals(5,stringtomonthcode(“may”)); 207 // assertequals(6,stringtomonthcode(“june”)); 208 // assertequals(7,stringtomonthcode(“july”)); 209 // assertequals(8,stringtomonthcode(“august”)); 210 // assertequals(9,stringtomonthcode(“september”)); 211 // assertequals(10,stringtomonthcode(“october”)); 212 // assertequals(11,stringtomonthcode(“november”)); 213 // assertequals(12,stringtomonthcode(“december”)); 214 } 215 216 public void testisvalidweekinmonthcode() throws exception { 217 for (int w = 0; w <= 4; w++) { 218 asserttrue(isvalidweekinmonthcode(w)); 219 } 220 assertfalse(isvalidweekinmonthcode(5)); 221 } 222 223 public void testisleapyear() throws exception { 224 assertfalse(isleapyear(1900)); 225 assertfalse(isleapyear(1901)); 226 assertfalse(isleapyear(1902)); 227 assertfalse(isleapyear(1903)); 228 asserttrue(isleapyear(1904)); 229 asserttrue(isleapyear(1908)); 230 assertfalse(isleapyear(1955)); 231 asserttrue(isleapyear(1964)); 232 asserttrue(isleapyear(1980)); 233 asserttrue(isleapyear(2000)); 234 assertfalse(isleapyear(2001)); 235 assertfalse(isleapyear(2100)); 236 } 237 238 public void testleapyearcount() throws exception { 239 assertequals(0, leapyearcount(1900)); 240 assertequals(0, leapyearcount(1901)); 241 assertequals(0, leapyearcount(1902)); 242 assertequals(0, leapyearcount(1903)); 243 assertequals(1, leapyearcount(1904)); 244 assertequals(1, leapyearcount(1905)); 245 assertequals(1, leapyearcount(1906)); 246 assertequals(1, leapyearcount(1907)); 477