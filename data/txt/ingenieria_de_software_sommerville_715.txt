698 capítulo 25 ■ administración de la conﬁ guración 6. construya el sistema en el servidor de construcción y efectúe las pruebas. necesita hacer esto en caso de que otros hayan modificado componentes luego de que usted los sacó del sistema. si éste es el caso, saque el componente que falló y edítelo de modo que las pruebas pasen en su espacio de trabajo privado. 7. si el sistema pasa sus pruebas en el sistema de construcción, confirme entonces los cambios que hizo como una nueva línea base en la línea principal del sistema. el argumento para la integración continua es que permite que los problemas causados por las interacciones entre diferentes desarrolladores se descubran y reparen tan pronto como sea posible. el sistema más reciente en la línea principal es el sistema funcional definitivo. sin embargo, aunque la integración continua es una buena idea, no siempre es posible implementar este enfoque a la construcción del sistema. las razones para esto son: 1. si el sistema es muy grande, puede tardar mucho tiempo construir y probar. por lo tanto, no es práctico construir muchas veces al día dicho sistema. 2. si la plataforma de desarrollo es diferente de la plataforma objetivo, tal vez no sea posible efectuar pruebas del sistema en el espacio de trabajo privado. puede haber diferencias en el hardware, el sistema operativo o el software instalado. por consi-guiente, se requiere más tiempo para probar el sistema. para sistemas grandes o sistemas donde la plataforma de ejecución no es la misma que la plataforma de desarrollo, la integración continua quizá no sea práctica. ante tales cir-cunstancias se puede usar un sistema que se construya diariamente. las características de esto son las siguientes: 1. la organización de desarrollo establece un tiempo de entrega (por ejemplo, 2 p.m.) para los componentes del sistema. si los desarrolladores tienen nuevas versiones de los componentes que escriben, deben entregarlas en ese plazo. los compo-nentes pueden estar incompletos, pero deben ofrecer alguna funcionalidad básica que pueda ponerse a prueba. 2. a partir de dichos componentes se crea una nueva versión del sistema al compilarlos y vincularlos para formar un sistema completo. 3. entonces este sistema se entrega al equipo de pruebas, que realiza un conjunto de pruebas de sistema predefinidas. al mismo tiempo, los desarrolladores todavía tra-bajan en sus componentes, añaden funcionalidad y reparan las fallas descubiertas en pruebas anteriores. 4. las fallas que se descubren durante las pruebas del sistema se documentan y regre- san a los desarrolladores del sistema, quienes reparan dichas fallas en una versión posterior del componente. las ventajas de usar componentes frecuentes de software son que aumentan las posibi-lidades de descubrir de manera oportuna durante el proceso los problemas que surgen a partir de las interacciones de los componentes. la construcción frecuente alienta las pruebas de unidad profundas en los componentes. psicológicamente, los desarrolladores se ponen bajo presión para “no romper la construcción”; esto es, tratan de evitar el ingreso de versiones de m25_sommerville_ingenieria_1ed_se_681-704.indd  698m25_sommerville_ingenieria_1ed_se_681-704.indd  698 3/18/11  5:16:31 pm3/18/11  5:16:31 pm