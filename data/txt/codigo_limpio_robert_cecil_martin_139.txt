La ley de Demeter Existe una conocida heurística denominada  Ley de Demeter [30]  que afirma que un módulo no debe conocer los entresijos de los objetos que manipula. Como vimos en el apartado anterior, los objetos ocultan sus datos y muestran operaciones, lo que significa que un objeto no debe mostrar su estructura interna a través de métodos de acceso ya que, si lo hace, mostraría, no ocultaría, su estructura interna. En concreto, la ley de Demeter afirma que un método de una clase  C  sólo debe invocar los métodos de: C . Un objeto creado por  f . Un objeto pasado como argumento a  f . Un objeto en una variable de instancia de  C . El método  no  debe invocar métodos de objetos devueltos por ninguna de las funciones permitidas. Es decir, no hable con desconocidos, sólo con amigos. El siguiente código [31]  parece incumplir la Ley de Demeter (entre otras cosas) ya que invoca la función  getScratchDir()  en el valor devuelto de getOptions()  y después invoca  getAbsolutePath()  en el valor devuelto de getScratchDir() . final String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath(); Choque de trenes Ese tipo de código suele denominarse choque de trenes ya que se asemeja a un grupo de vagones de tren. Estas cadenas de invocaciones suelen considerarse un estilo descuidado y deben evitarse [G36]. Conviene dividirlas de esta forma: Options opts = ctxt.getOptions(); File scratchDir = opts.getScratchDir(); 140