la ley de demeter existe una conocida heurística denominada ley de demeter [30] que afirma que un módulo no debe conocer los entresijos de los objetos que manipula. como vimos en el apartado anterior, los objetos ocultan sus datos y muestran operaciones, lo que significa que un objeto no debe mostrar su estructura interna a través de métodos de acceso ya que, si lo hace, mostraría, no ocultaría, su estructura interna. en concreto, la ley de demeter afirma que un método de una clase c sólo debe invocar los métodos de: c . un objeto creado por f . un objeto pasado como argumento a f . un objeto en una variable de instancia de c . el método no debe invocar métodos de objetos devueltos por ninguna de las funciones permitidas. es decir, no hable con desconocidos, sólo con amigos. el siguiente código [31] parece incumplir la ley de demeter (entre otras cosas) ya que invoca la función getscratchdir() en el valor devuelto de getoptions() y después invoca getabsolutepath() en el valor devuelto de getscratchdir() . final string outputdir = ctxt.getoptions().getscratchdir().getabsolutepath(); choque de trenes ese tipo de código suele denominarse choque de trenes ya que se asemeja a un grupo de vagones de tren. estas cadenas de invocaciones suelen considerarse un estilo descuidado y deben evitarse [g36]. conviene dividirlas de esta forma: options opts = ctxt.getoptions(); file scratchdir = opts.getscratchdir(); 140