no basta con escribir código correctamente. el código debe limpiarse con el tiempo. todos hemos visto que el código se corrompe con el tiempo, de modo que debemos adoptar un papel activo para evitarlo. los boy scouts norteamericanos tienen una sencilla regla que podemos aplicar a nuestra profesión: dejar el campamento más limpio de lo que se ha encontrado [5] . si todos entregamos el código más limpio de lo que lo hemos recibido, no se corromperá. no hace falta que la limpieza sea masiva. cambie el nombre de una variable, divida una función demasiado extensa, elimine elementos duplicados, simplifique una instrucción if compuesta. ¿se imagina trabajar en un proyecto en el que el código mejorara con el tiempo? ¿cree que hay otras opciones que puedan considerarse profesionales? de hecho, ¿la mejora continuada no es una parte intrínseca de la profesionalidad? precuela y principios en muchos aspectos, este libro es una «precuela» de otro que escribí en 2002 titulado agile software development: principles, patterns, and practices (ppp). el libro ppp trata sobre los principios del diseño orientado a objetos y muchas de las técnicas empleadas por desarrolladores profesionales. si no ha leído ppp, comprobará que continúa la historia contada en este libro. si lo ha leído, encontrará muchas de las sensaciones de ese libro reproducidas en éste a nivel del código. en este libro encontrará referencias esporádicas a distintos principios de diseño como srp ( single responsibility principle o principio de responsabilidad única), ocp ( open closed principle o principio abierto/cerrado) y dip ( dependency inversion principle o principio de inversión de dependencias) entre otros. todos estos principios se describen detalladamente en ppp. 39