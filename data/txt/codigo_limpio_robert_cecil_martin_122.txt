crawler = context.root.getpagecrawler(); crawler.setdeadendstrategy(new virtualenabledpagecrawler()); page = crawler.getpage(context.root, path); if (page != null) pagedata = page.getdata(); } private response notfoundresponse(fitnessecontext context, request request) throws exception { return new notfoundresponder().makeresponse(context, request); } private simpleresponse makepageresponse(fitnessecontext context) throws exception { pagetitle = pathparser.render(crawler.getfullpath(page)); string html = makehtml(context); simpleresponse response = new simpleresponse(); response.setmaxage(0); response.setcontent(html); return response; } … además, este fragmento es un buen ejemplo de ubicación de constantes en un nivel correcto [g35]. la constante frontpage se podría haber ocultado en la función getpagenameordefault , pero eso habría ocultado una constante conocida y esperada en una función de nivel inferior de forma incorrecta. es mejor pasar la constante desde un punto en el que tiene sentido a la posición en la que realmente se usa. afinidad conceptual determinados conceptos de código deben estar próximos a otros. tienen una afinidad conceptual concreta. cuanto mayor sea esta afinidad, menor distancia vertical debe existir entre ellos. como hemos visto, esta afinidad se puede basar en una dependencia directa, como cuando una función invoca a otra, o cuando usa una variable. pero hay otras causas de afinidad. puede generarse porque un grupo de funciones realice una operación similar. fíjese en este fragmento de código de junit 4.3.1: public class assert { static public void asserttrue(string message, boolean condition) { 123