Capítulo 7 ■ Puntos clave  201 3. Estar al tanto de las rutas de evolución para los componentes. Necesita conocer un  poco sobre el proyecto de código abierto donde se desarrollaron los componentes,  para entender cómo pueden cambiar en el futuro. 4. Educar al personal acerca del código abierto. No es suficiente tener procedimientos  para asegurar el cumplimiento de las condiciones de la licencia. También es preciso educar a los desarrolladores sobre el código abierto y el permiso de éste. 5. Tener sistemas de auditoría. Los desarrolladores, con plazos ajustados, pueden sen- tirse tentados a quebrantar los términos de una licencia. Si es posible, debe tener software para detectar y evitar esto último. 6. Participar en la comunidad de código abierto. Si se apoya en productos de código  abierto, debe participar en la comunidad y ayudar a apoyar su desarrollo.  El modelo empresarial de software está cambiando. Se ha vuelto cada vez más difícil edificar una empresa mediante la venta de sistemas de software especializado. Muchas compañías prefieren hacer su software en código abierto y entonces vender soporte y consultoría a los usuarios del software. Es probable que esta tendencia se incremente, con el uso creciente de software de código abierto y con cada vez más software disponible de esta forma. PUNTOS CLAVE ■ El diseño y la implementación del software son actividades entrelazadas. El nivel de detalle  en el diseño depende del tipo de sistema a desarrollar y de si se usa un enfoque dirigido por un plan o uno ágil. ■ Los procesos del diseño orientado a objetos incluyen actividades para diseñar la arquitectura del sistema, identificar objetos en el sistema, describir el diseño mediante diferentes modelos de objeto y documentar las interfaces de componente. ■ Durante un proceso de diseño orientado a objetos, puede elaborarse una variedad de modelos diferentes. En ellos se incluyen modelos estáticos (modelos de clase, modelos de generalización, modelos de asociación) y modelos dinámicos (modelos de secuencia, modelos de máquina de estado). ■ Las interfaces de componente deben definirse con precisión, de modo que otros objetos puedan usarlos. Para definir interfaces es posible usar un estereotipo de interfaz UML. ■ Cuando se desarrolla software, siempre debe considerarse la posibilidad de reutilizar el software existente, ya sea como componentes, servicios o sistemas completos. ■ La administración de la configuración es el proceso de gestionar los cambios a un sistema de software en evolución. Es esencial cuando un equipo de personas coopera para desarrollar software. M07_SOMMERVILLE_INGENIERIA_1ED_SE_176-204.indd   201M07_SOMMERVILLE_INGENIERIA_1ED_SE_176-204.indd   201 3/18/11   4:50:14 PM3/18/11   4:50:14 PM