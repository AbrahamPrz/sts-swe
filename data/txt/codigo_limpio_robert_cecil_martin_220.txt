public int getid() { return id; } public void setid(int id) { this.id = id; } public void addaccount(account account) { account.setbank(this); accounts.add(account); } public collection<account> getaccounts() { return accounts; } public void setaccounts(collection<account> accounts) { this.accounts = accounts; } } este código es mucho más limpio que el código ejb2 original. se conservan algunos detalles de entidades, en las anotaciones. sin embargo, como no hay información fuera de las anotaciones, el código es limpio y fácil de probar, mantener y demás. parte de la información de persistencia de las anotaciones se puede cambiar a descriptores de implementación xml si es necesario, dejando un pojo puro. si los detalles de asignación de persistencia no cambian con frecuencia, muchos equipos pueden optar por mantener las anotaciones pero con menos obstáculos que si usaran ejb2. aspectos de aspectj por último, la herramienta más completa de separación a través de aspectos es el lenguaje aspectj [66] , una extensión de java que ofrece compatibilidad de primer nivel para aspectos como construcciones de modularidad. los enfoques puros de java proporcionados por spring aop y jboss aop son suficientes en el 80-90 por 100 de los casos en los que los aspectos son útiles. sin embargo, aspectj ofrece un conjunto de herramientas avanzadas y completas para la separación de aspectos. el inconveniente de aspectj es la necesidad de adoptar nuevas herramientas y aprender nuevas construcciones 221