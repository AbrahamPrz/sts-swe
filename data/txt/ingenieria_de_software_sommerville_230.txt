8.1 ■ Pruebas de desarrollo  213 2. Una parte de llamada (call), en la cual se llama al objeto o al método que se va a  probar. 3. Una parte de declaración, en la cual se compara el resultado de la llamada con el resultado esperado. Si la información se evalúa como verdadera, la prueba tuvo éxito; pero si resulta falsa, entonces fracasó.  En ocasiones, el objeto que se prueba tiene dependencias de otros objetos que tal vez no se escribieron o que, si se utilizan, frenan el proceso de pruebas. Si su objeto llama a una base de datos, por ejemplo, esto requeriría un proceso de configuración lento antes de usarse. En tales casos, usted puede decidir usar objetos mock (simulados). Éstos  son objetos con la misma interfaz como los usados por objetos externos que simulan su funcionalidad. Por ende, un objeto mock que aparenta una base de datos suele tener sólo algunos ítems de datos que se organizan en un arreglo. Por lo tanto, puede entrar rápi-damente a ellos, sin las sobrecargas de llamar a una base de datos y acceder a discos. De igual modo, los objetos mock pueden usarse para simular una operación anormal o eventos extraños. Por ejemplo, si se pretende que el sistema tome acción en ciertas horas del día, su objeto mock simplemente regresará estas horas, independientemente de la hora real en el reloj.  8.1.2 Elección de casos de pruebas de unidad Las pruebas son costosas y consumen tiempo, así que es importante elegir casos efecti-vos de pruebas de unidad. La efectividad significa, en este caso, dos cuestiones: 1. Los casos de prueba tienen que mostrar que, cuando se usan como se esperaba, el  componente que se somete a prueba hace lo que se supone que debe hacer. 2. Si hay defectos en el componente, éstos deberían revelarse mediante los casos de prueba.  En consecuencia, hay que escribir dos tipos de casos de prueba. El primero debe refle-jar una operación normal de un programa y mostrar que el componente funciona. Por ejemplo, si usted va a probar un componente que crea e inicia el registro de un nuevo paciente, entonces, su caso de prueba debe mostrar que el registro existe en una base de datos, y que sus campos se configuraron como se especificó. El otro tipo de caso de prueba tiene que basarse en probar la experiencia de donde surgen problemas comunes. Debe usar entradas anormales para comprobar que se procesan de manera adecuada sin colapsar el componente. Aquí se discuten dos estrategias posibles que serían efectivas para ayudarle a elegir casos de prueba. Se trata de: 1. Prueba de partición, donde se identifican grupos de entradas con características  comunes y se procesan de la misma forma. Debe elegir las pruebas dentro de cada uno de dichos grupos. 2. Pruebas basadas en lineamientos, donde se usan lineamientos para elegir los casos de prueba. Dichos lineamientos reflejan la experiencia previa de los tipos de erro-res que suelen cometer los programadores al desarrollar componentes. M08_SOMMERVILLE_INGENIERIA_1ED_SE_205-233.indd   213M08_SOMMERVILLE_INGENIERIA_1ED_SE_205-233.indd   213 3/18/11   5:39:59 PM3/18/11   5:39:59 PM