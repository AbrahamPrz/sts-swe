if (schema.length() > 0) return = “-[” + schema + “]”; else return “”; } public string errormessage() throws exception { switch (errorcode) { case ok: throw new exception(“tilt: should not get here.”); case unexpected_argument: return unexpectedargumentmessage(); case missing_string: return string.format(“could not find string parameter for -%c.”, errorargumentid); case invalid_integer: return string.format(“argument -%c expects an integer but was ‘%s’.”, errorargumentid, errorparameter); case missing_integer: return string.format(“could not find integer parameter for -%c.”, errorargumentid); } return “”; } private string unexpectedargumentmessage() { stringbuffer message = new stringbuffer(“argument(s) -”); for {char c : unexpectedarguments) { message.append(c); } message.append(“ unexpected.”); return message.tostring(); } public boolean getboolean(char arg) { args.argumentmarshaler am = marshalers.get(arg); boolean b = false; try { b = am != null && (boolean) am.get(); } catch (classcastexception e) { b = false; } return b; } public string getstring(char arg) { args.argumentmarshaler am = marshalers.get (arg); try { return am == null ? “” : (string) am.get(); } catch (classcastexception e) { return “”; } } 295