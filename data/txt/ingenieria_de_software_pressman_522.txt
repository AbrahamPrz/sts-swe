CAPÍTULO 21  MODELADO Y VERIFICACIÓN FORMAL 491 Un conjunto llamado BLOCKS (bloques) consistirá de todo número de bloques. AllBlocks (to- dos los bloques) es un conjunto de bloques que se encuentra entre 1 y MaxBlocks (máximo de  bloques). El estado se modelará mediante dos conjuntos y una secuencia. Los dos conjuntos son used (utilizado) y free (libre). Ambos contienen bloques: el conjunto used contiene los que ac- tualmente se usan en los archivos y el conjunto free los que están disponibles para nuevos  archivos. La secuencia contendrá conjuntos de bloques que están listos para ser liberados de  los archivos que se borraron. El estado puede describirse como used, free: /H11936 BLOCKSBlockQueue: seq /H11936 BLOCKS Esto es muy parecido a la declaración de las variables de programa. Se afirma que used y free  serán conjuntos de bloques y que BlockQueu (fila de bloques) será una secuencia, cada elemento de la cual será un conjunto de bloques. La invariante de datos puede escribirse como used /H20669 free /H11005 ∅ /H11625used /H20668 free /H11005 AllBlocks /H11625/H7001 i: dom BlockQueue • BlockQueue i /H20661 used /H11625/H7001 i, j: dom BlockQueue • i /HS11005 j /H11005 BlockQueue i /H20669 BlockQueue j /H11005 ∅ Los componentes matemáticos de la invariante de datos coinciden con cuatro de las caracterís-ticas de los componentes de lenguaje natural descritos anteriormente. La primera línea de la in variante de datos afirma que no habrá bloques comunes en la colección utilizada y en las  colecciones libres de bloques. La segunda afirma que la colección de bloques utilizados y de bloques libres siempre será igual a la colección completa de bloques en el sistema. La tercera línea indica que el i-ésimo elemento en la fila de bloques siempre será un subconjunto de los  bloques utilizados. La línea final afirma que, para cualesquiera dos elementos de la fila de blo-ques que no son el mismo, no habrá bloques comunes en dichos elementos. Los dos compo-nentes de lenguaje natural finales de la invariante de datos se implementan en virtud del hecho de que used y free son conjuntos y, por tanto, no contendrán duplicados. La primera operación por definir es aquella que remueve un elemento de la cabeza de la fila  de bloques. La precondición es que debe haber al menos un ítem en la fila: #BlockQueue /H11022 0, La poscondición es que la cabeza de la fila debe removerse y colocarse en la colección de blo-ques libres y la fila debe ajustarse para mostrar la remoción: used′ /H11005 used \ head BlockQueue /H11625free′ /H11005 free /H20668 head BlockQueue /H11625BlockQueue′ /H11005 tail BlockQueue Una convención que se usa en muchos métodos formales es que el valor de una variable des-pués de una operación es prima. En consecuencia, el primer componente de la expresión pre-cedente afirma que los nuevos bloques usados ( used’) serán iguales a los antiguos bloques  usados menos los bloques que se removieron. El segundo componente señala que los nuevos bloques libres (free’) serán los antiguos bloques libres, con el agregado de la cabeza de la fila de bloques. El tercer componente afirma que la nueva fila de bloques será igual a la fila del valor antiguo de la fila de bloques, es decir, todos los elementos en la fila menos el primero. Una segunda operación agrega una colección de bloques, Ablocks, a la fila de bloques. La precondi-ción es que Ablocks es en la actualidad un conjunto de bloques utilizados: Ablocks /H20661 used La poscondición es que el conjunto de bloques se agrega al final de la fila de bloques y el con-junto de bloques usados y libres permanece invariable:¿Cómo pueden  representarse estados e invariantes de datos usando un conjunto y operadores lógicos?? ¿Cómo se representan las precondiciones y las poscondiciones??WebRef Amplia información de los métodos  formales se puede encontrar en www.afm.sbu .ac.uk. 21Pressman(478-500).indd   49121Pressman(478-500).indd   491 19/1/10   12:43:2719/1/10   12:43:27