21.3 ■ ingeniería de software con aspectos 583 este proceso, naturalmente, es un proceso iterativo en el que usted hace propuestas de diseño iniciales y luego las refina conforme analiza y comprende los conflictos del diseño. por lo general, esperaría refinar las extensiones identificadas en los requerimien-tos a un mayor número de aspectos. el resultado del proceso de diseño orientado a aspectos es un modelo de diseño orien-tado a aspectos. esto puede expresarse en una versión extendida del uml que incluye nuevas sentencias específicas de aspectos, tales como las propuestas por clarke y baniassad (2005) y jacobson y ng (2004). los elementos esenciales del “uml de aspec-tos” son un medio para modelar aspectos y especificar los puntos de enlace donde deben combinarse los consejos de aspecto con el sistema central. la figura 21.14 es un ejemplo de un modelo de diseño orientado a aspectos. se usó el estereotipo uml para un aspecto propuesto por jacobson y ng. la figura 21.14 muestra el sistema central para un inventario de servicios de emergencia más algunos aspectos que pueden combinarse con dicho núcleo. se exponen algunas clases del sistema central y algunos aspectos. ésta es una imagen simplificada; un modelo completo incluiría más clases y aspectos. observe cómo se usaron las notas uml para ofrecer información adi-cional acerca de las clases que son atravesadas (cross-cut) por algunos aspectos. la figura 21.15 es un modelo más detallado de un aspecto. desde luego, antes de diseñar aspectos, hay que tener un diseño del sistema central. como aquí no hay espacio para mostrar esto, se hicieron algunas suposiciones acerca de las clases y los métodos en el sistema central. la primera sección del aspecto establece los puntos de corte que especifican dónde se combinarán con el sistema central. por ejemplo, el primer punto de corte especifica que el aspecto puede combinarse en el punto de enlace call getiteminfo(..). la siguiente sección define las extensiones que implementa el aspecto. en este ejemplo, el enunciado de la extensión puede leerse como: en el método viewitem, después de llamar al método getiteminfo, debe incluirse un llamado al método displayhistory para mostrar el registro de mantenimiento. la programación orientada a aspectos (aop, por las siglas de aspect-oriented pro- gramming) se inició en los laboratorios parc de xerox, en 1997, con el desarrollo del inventario«aspecto» monitor equipo almacén ubicaciónbitácora«aspecto» mantenimiento «aspecto» pedido«aspecto» disponibilidadplataforma bd«punto de enlace» ubicación equipo«punto de enlace» plataforma figura 21.14 modelo de diseño orientado a aspectos m21_sommerville_ingenieria_1ed_se_565-590.indd  583m21_sommerville_ingenieria_1ed_se_565-590.indd  583 3/18/11  5:38:58 pm3/18/11  5:38:58 pm