sabíamos qué era lo que bloqueaba las terminales pero no qué provocaba la desincronización del búfer circular, por lo que añadimos un truco para resolver el problema. se podían leer los conmutadores del panel frontal en el ordenador (esto fue hace mucho, mucho, mucho tiempo). diseñamos una función de trampa que detectaba si uno de los conmutadores se había generado y después buscábamos un búfer circular que estuviera tanto lleno como vacío. si lo encontrábamos, lo variábamos. ¡ voilá ! la terminal bloqueada volvía a funcionar. de este modo no era necesario reiniciar el sistema si una terminal se bloqueaba. la sede nos llamaba y nos decía que había un bloqueo, nos acercábamos hasta la sala de ordenadores y pulsábamos un conmutador. en ocasiones ellos trabajan los fines de semana pero nosotros no. por ello, añadimos una función al programador que comprobaba los búfer circulares una vez por minuto y restablecía los que estuvieran tanto llenos como vacíos. de este modo se descongestionaban las pantallas antes de que la dirección llegara al teléfono. necesitamos varias semanas de análisis de código de lenguaje de ensamblado antes de localizar al culpable. habíamos calculado que la frecuencia de los bloqueos se debía a un uso desprotegido del búfer circular, así que sólo era necesario determinar el uso fallido. desafortunadamente, esto fue hace mucho tiempo y no disponíamos de herramientas de búsqueda, referencias cruzadas ni de otras técnicas automáticas de ayuda. teníamos que escudriñar los listados. en aquel frío invierno de 1971 en chicago aprendí que los bloqueos basados en el cliente son verdaderamente terribles. bloqueo basado en el servidor la duplicación se puede eliminar si modificamos integeriterator de esta forma: public class integeriteratorserverlocked { private integer nextvalue = 0; public synchronized integer getnextornull() { if (nextvalue < 100000) return nextvalue++; else return null; 418