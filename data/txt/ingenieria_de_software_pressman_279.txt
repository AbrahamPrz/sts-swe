248 PARTE DOS  MODELADO donde nombre  es el nombre del atributo, tipo-de-expresión  es el tipo de datos, valor-inicial  es el valor  que toma el atributo cuando se crea un objeto y cadena de propiedades  define una propiedad o ca- racterística del atributo. Durante la primera iteración del diseño en el nivel de componentes, los atributos normal- mente se describen por su nombre. De nuevo, en la figura 10.1, la lista de atributos para Impri- mirTrabajo sólo enlista los nombres de los atributos. No obstante, a medida que avanza la  elaboración del diseño, cada atributo se define con el formato de atributos UML mencionado.  Por ejemplo, Tipodepapel-peso  se define del modo siguiente: Tipodepapel-peso: cadena = “A” {contiene 1 de 4 valores – A, B, C o D} que define a Tipodepapel-peso  como una variable de cadena que se inicializa en el valor A y que  puede adoptar uno de cuatro valores del conjunto {A, B, C, D}. Si un atributo aparece en forma repetida en varias clases de diseño y tiene una estructura  relativamente compleja, es mejor crear una clase separada para que lo albergue. Paso 3d. Describir en detalle el flujo del pr ocesamiento dentro de cada operación.  Esto  se logra con el uso de seudocódigo basado en lenguaje de programación o con un diagrama UML de actividades. Cada componente del software se elabora a través de cierto número de iteraciones que apliquen paso a paso el concepto de refinamiento (capítulo 8). La primera iteración define cada operación como parte de la clase de diseño. En cada caso,  la operación debe caracterizarse en forma tal que asegure que haya mucha cohesión; es decir , la  operación debe estar dirigida a la ejecución de una sola función o subfunción. La siguiente ite-ración no hace más que expandir el nombre de la operación. Por ejemplo, la operación Calcu- larCostodelPapel( ) que aparece en la figura 10.1 se expande de la manera siguiente: CalcularCostodelPapel (peso, tamaño, color): numérico Esto indica que CalcularCostodelPapel( ) requiere como entrada los atributos peso, tamaño  y color,  y da como salida un valor numérico (valor en dólares). Si el algoritmo requerido para implantar CalcularCostodelPapel( ) es sencillo y entendido por  todos, tal vez no sea necesaria una mayor elaboración del diseño. El ingeniero de software que haga la codificación proveerá los detalles necesarios para implantar la operación. Sin embargo, si el algoritmo fuera más complejo o difícil de entender, se requeriría elaborar más el diseño. La figura 10.8 ilustra un diagrama UML de actividades para CalcularCostodelPapel( ) . Cuando se  usan diagramas de actividades para especificar el diseño en el nivel de componentes, por lo ImprimirTrabajoCalcularTrabajo IniciarTrabajo Trabajode ProducciónElaborarTrabajo EnviarTrabajoOrdendeTrabajo atributos apropiados ElaborarOrdendeTrabajo( )ObtenerDescripción delTrabajo FiladeTrabajos atributos apropiados VeriﬁcarPrioridad( )<<interfaz>> IniciarTrabajo PasarTrabajoaProducción( )FIGURA 10.7 Rediseño de interfaces  y definiciones de clase para ImprimirTrabajo Para refinar el diseño del  componente, utilice una elaboración stepwise. Siempre pregunte, “¿hay una forma de simplificar esto y que aun así se logre el mismo resultado?”CONSEJO 10Pressman(234-264).indd   24810Pressman(234-264).indd   248 26/1/10   17:33:2126/1/10   17:33:21