252 capítulo 9 ■ evolución del software un solo método en una superclase. los entornos de desarrollo interactivo, como eclipse, incluyen soporte para refactorización en sus editores. esto facilita encontrar partes depen-dientes de un programa que deban cambiarse para implementar la refactorización. la refactorización, realizada durante el desarrollo del programa, es una forma efectiva de reducir los costos a largo plazo en el mantenimiento de un programa. sin embargo, si se toma la responsabilidad del mantenimiento de un programa, cuya estructura esté significativamente degradada, entonces sería casi imposible refactorizar sólo el código. tal vez se tenga que considerar la refactorización del diseño, que probablemente resulte ser un problema más costoso y difícil. la refactorización del diseño implica identificar patrones de diseño relevantes (que se estudian en el capítulo 7) y sustituir el código existente con código que implemente dichos patrones de diseño (kerievsky, 2004). por cuestiones de espacio no se analiza esto aquí. 9.4 administración de sistemas heredados para los sistemas de software nuevos desarrollados con modernos procesos de ingeniería de software, como el desarrollo incremental y el cbse, es posible planear cómo integrar el desarrollo y la evolución del sistema. cada vez con mayor frecuencia, las compañías empiezan a entender que el proceso de desarrollo del sistema es un proceso de todo el ciclo de vida y que no es útil una separación artificial entre el desarrollo del software y su mantenimiento. sin embargo, todavía existen muchos sistemas heredados que son sistemas empresariales críticos. éstos tienen que extenderse y adaptarse a las cambiantes prácticas del comercio electrónico. la mayoría de las organizaciones, por lo general, tienen un portafolio de sistemas heredados, que se usan con un presupuesto limitado para mantenimiento y actualización. deben decidir cómo obtener el mejor retorno de la inversión. esto requiere hacer una valoración realista de sus sistemas heredados y, luego, decidir acerca de la estrategia más adecuada para hacer evolucionar dichos sistemas. existen cuatro opciones estratégicas: 1. desechar completamente el sistema esta opción debe elegirse cuando el sistema no vaya a realizar una aportación efectiva a los procesos empresariales. por lo gene-ral, esto ocurre cuando los procesos empresariales cambiaron desde la instalación del sistema y no se apoyan más en el sistema heredado. 2. dejar sin cambios el sistema y continuar el mantenimiento regular esta opción debe elegirse cuando el sistema todavía se requiera, pero sea bastante estable y los usuarios del sistema hagan relativamente pocas peticiones de cambio. 3. someter el sistema a reingeniería para mejorar su mantenibilidad esta opción debe elegirse cuando la calidad del sistema se haya degradado por el cambio y toda-vía se propone un nuevo cambio al sistema. este proceso podría incluir el desarrollo de nuevos componentes de interfaz, de modo que el sistema original logre trabajar con otros sistemas más recientes. 4. sustituir todo o parte del sistema con un nuevo sistema esta opción tiene que elegirse cuando factores como hardware nuevo signifiquen que el viejo sistema no pueda continuar en operación o donde sistemas comerciales (off-the-shelf) permiti-rían al nuevo sistema desarrollarse a un costo razonable. en muchos casos se adopta m09_sommerville_ingenieria_1ed_se_234-260.indd  252m09_sommerville_ingenieria_1ed_se_234-260.indd  252 3/18/11  4:52:25 pm3/18/11  4:52:25 pm