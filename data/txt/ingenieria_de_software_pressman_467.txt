436 parte tres administración de la calidad 18.6. lea beizer [bei95] o una fuente en web relacionada (por ejemplo, www.laynetworks.com/ discret%20mathematics_1g.htm) y determine cómo puede extenderse el programa que desarrolló en el problema 18.5 a fin de alojar varias enlaces ponderados. extienda su herramienta para procesar probabili-dades de ejecución o tiempos de procesamiento de liga. 18.7. diseñe una herramienta automatizada que reconozca bucles y que los clasifique como se indica en la sección 18.5.3. 18.8. extienda la herramienta descrita en el problema 18.7 a fin de generar casos de prueba para cada ca- tegoría de bucle, una vez encontrada. será necesario realizar esta función de manera interactiva con el examinador. 18.9. proporcione al menos tres ejemplos en los que la prueba de caja negra puede dar la impresión de que “todo está bien”, mientras que las pruebas de caja blanca pueden descubrir un error. proporcione al menos tres ejemplos en los que las pruebas de caja blanca pueden dar la impresión de que “todo está bien”, mientras que las pruebas de caja negra pueden descubrir un error. 18.10. ¿las pruebas exhaustivas (incluso si es posible para programas muy pequeños) garantizarán que el programa es 100 por ciento correcto? 18.11. pruebe un manual de usuario (o centro de ayuda) para una aplicación que use con frecuencia. en- cuentre al menos un error en la documentación.  lecturas adicionales y fuentes de información virtualmente, todos los libros dedicados a las pruebas de software consideran tanto estrategia como tácticas. por tanto, las lecturas adicionales anotadas para el capítulo 17 son igualmente aplicables para este capítulo. everett y raymond (software testing, wiley-ieee computer society press, 2007), black ( pragmatic software testing, wiley, 2007), spiller et al. (software testing process: test management, rocky nook, 2007), perry ( effec- tive methods for software testing, 3d. ed., wiley, 2005), lewis ( software testing and continuous quality impro- vement, 2a. ed., auerbach, 2004), loveland et al. (software testing techniques, charles river media, 2004), burnstein (practical software testing, springer, 2003), dustin (effective software testing, addison-wesley, 2002), craig y kaskiel (systematic software testing, artech house, 2002), tamres (introducing software testing, addison-wesley, 2002) y whittaker (how to break software, addison-wesley, 2002) son sólo una pequeña muestra de muchos libros que analizan los principios, conceptos, estrategias y métodos de las pruebas. una segunda edición del texto clásico de myers [mye79], producido por myers et al. ( the art of software testing, 2a. ed., wiley, 2004), cubre con mucho detalle las técnicas de diseño de casos de prueba. pezze y young (software testing and analysis, wiley, 2007), perry ( effective methods for software testing, 3a. ed., wiley, 2006), copeland (a practitioner’s guide to software test design, artech, 2003), hutcheson (software testing fundamentals, wiley, 2003), jorgensen ( software testing: a craftsman’s approach, 2a. ed., crc press, 2002) proporcionan cada uno presentaciones útiles de los métodos y técnicas del diseño de casos de prueba. el texto clásico de beizer [bei90] proporciona una amplia cobertura de las técnicas de caja blanca e introduce un nivel de rigor matemático que con frecuencia falta en otros tratamientos de las pruebas. su último libro [bei95] presenta un tratamiento conciso de métodos importantes. la prueba del software es una actividad que consume muchos recursos. es por esto que muchas organi- zaciones automatizan partes del proceso de prueba. los libros de li y wu ( effective software test automation, sybex, 2004); mosely y posey (just enough software test automation, prentice-hall, 2002); dustin, rashka, y poston ( automated software testing: introduction, management, and performance, addison-wesley, 1999); graham et al. (software test automation, addison-wesley, 1999) y poston (automating specification-based software testing, ieee computer society, 1996) exponen herramientas, estrategias y métodos para pruebas automatizadas. nquyen et al. (global software test automation, happy about press, 2006) presentan un pano- rama ejecutivo de la automatización de las pruebas. thomas et al. (java testing patterns, wiley, 2004) y binder [bin99] describen patrones de prueba que abar- can pruebas de métodos, clases/grupos, subsistemas, reutilización de componentes, marcos conceptuales y sistemas, así como la automatización de las pruebas y la prueba de bases de datos especializadas. en internet está disponible una amplia variedad de recursos de información acerca de los métodos de diseño de casos de pruebas. una lista actualizada de referencias en la world wide web que son relevantes para las técnicas de prueba puede encontrarse en el sitio del libro: www.mhhe.com/engcs/compsci/pressman/professional/olc/ser.htm 18pressman(411-436).indd  43618pressman(411-436).indd  436 21/1/10  10:59:0121/1/10  10:59:01