similar pero es más sofisticada. el objetivo es que los procesos del código se ejecuten en distinto orden en momentos diferentes. la combinación de pruebas bien escritas y ejecuciones aleatorias puede aumentar considerablemente la capacidad de detectar errores. recomendación : use estas estrategias para detectar errores . conclusión es complicado conseguir código concurrente correcto. el código sencillo se puede complicar al añadir varios procesos y datos compartidos. si tiene que crear código concurrente, tendrá que hacerlo con rigor o se enfrentará a sutiles y esporádicos fallos. en primer lugar, siga el principio de responsabilidad única. divida su sistema en varios pojo que separen el código compatible con procesos del resto. asegúrese de probar únicamente el código compatible con procesos y nada más, por lo que este código debe ser de tamaño reducido y específico. conozca los orígenes de los problemas de concurrencia: varios procesos que operen en datos compartidos o usen una agrupación de recursos común. los casos de límites, como el cierre correcto o la conclusión de la iteración de un bucle, pueden ser especialmente espinosos. conozca su biblioteca y los algoritmos fundamentales. debe comprender cómo las funciones de la biblioteca permiten resolver problemas similares a los de los algoritmos fundamentales. aprenda a localizar regiones del código que se puedan bloquear y bloquéelas. no bloquee otras regiones que no lo necesiten. evite invocar una sección bloqueada desde otra. para ello debe saber si un elemento está compartido o no. reduzca la cantidad de objetos compartidos y su ámbito. cambie los diseños de los objetos con datos compartidos para acomodar clientes en lugar de obligar a los clientes a gestionar el estado compartido. los problemas se acumularán. los que no aparezcan inicialmente suelen considerarse esporádicos y suelen producirse en la fase de carga o de modo aparentemente aleatorio. por tanto, debe poder ejecutar su código con 253