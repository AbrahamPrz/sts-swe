Me gusta que mi código sea elegante y eficaz. La lógica debe ser directa para evitar errores ocultos, las dependencias deben ser mínimas para facilitar el mantenimiento, el procesamiento de errores completo y sujeto a una estrategia articulada, y el rendimiento debe ser óptimo para que los usuarios no tiendan a estropear el código con optimizaciones sin sentido. El código limpio hace bien una cosa. Bjarne usa la palabra «elegante». Menuda palabra. Según el diccionario, «elegante» significa « dotado de gracia, nobleza y sencillez ». Aparentemente Bjarne piensa que el código limpio es un placer a la hora de leerlo. Su lectura debe hacernos sonreír, como una caja de música o un coche bien diseñado. Bjarne también menciona la eficacia, en  dos ocasiones . No debería sorprendemos viniendo del inventor de C++; pero considero que hay algo más que el mero deseo de velocidad. Los ciclos malgastados no son elegantes, no son un placer. Y fíjese en la palabra empleada por Bjarne para describir la consecuencia de esta falta de elegancia. Usa  tiendan . Una gran verdad. El código incorrecto  tiende  a aumentar el desastre. Cuando otros cambian código incorrecto, tienden a empeorarlo. Dave Thomas y Andy Hunt lo expresan de forma diferente. Usan la metáfora de las ventanas rotas [3] . Un edificio con ventanas rotas parece abandonado. Y hace que otros lo abandonen. Dejan que se rompan otras ventanas. E incluso las rompen a propósito. La fachada se ensucia con pintadas y se acumula la basura. Una ventana rota inicia el proceso de la decadencia. Bjarne también menciona que el procesamiento de errores debe ser completo, lo que se relaciona con la disciplina de prestar atención a los detalles. El procesamiento de errores abreviado es una forma de ignorar los detalles. Otras son las fugas de memoria, las condiciones de carrera o el uso 29