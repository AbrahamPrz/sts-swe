CAPÍTULO 31  TENDENCIAS EMERGENTES EN INGENIERÍA DEL SOFTWARE 709 acciones tiene una influencia muy fuerte sobre el éxito o el fracaso de todo el proceso de inge- niería del software. Y, sin embargo, la ingeniería de requerimientos (IR) se compara con “inten-tar poner una abrazadera de sujeción alrededor de una gelatina” [Gon04]. Como se señala en muchos lugares a lo largo de este libro, los requerimientos de software tienen la tendencia a seguir cambiando, y con la llegada de los sistemas de mundo abierto, los requerimientos emer-gentes (y el cambio casi continuo) pueden volverse la norma. En la actualidad, la mayoría de los enfoques de ingeniería de requerimientos “informales”  comienzan con la creación de escenarios de usuario (por ejemplo, casos de uso). Los enfoques más formales crean uno o más modelos de requerimientos y el uso de los mismos como base para el diseño. Los métodos formales permiten que un ingeniero de software represente los requerimientos, usando una notación matemática verificable. Todo puede funcionar razonable-mente bien cuando los requerimientos son estables, pero no se resuelve fácilmente el problema de los requerimientos dinámicos o emergentes. Existen algunas direcciones distintas en la investigación en ingeniería de requerimientos,  incluidos el procesamiento de lenguaje natural a partir de descripciones textuales traducidas en representaciones más estructuradas (por ejemplo, clases de análisis), mayor apoyo sobre bases de datos para estructurar y comprender los requerimientos de software, el uso de patrones IR para describir problemas y soluciones usuales cuando se realizan las tareas de ingeniería de requerimientos y la ingeniería de requerimientos orientada a metas. Sin embargo, industrial-mente, las acciones de IR siguen siendo más o menos informales y sorprendentemente básicas. Para mejorar la forma en la que se definen los requerimientos, la comunidad de ingeniería del software probablemente implementará tres subprocesos distintos conforme se lleve a cabo la IR [Gli07]: 1) adquisición de conocimiento mejorado y compartición de conocimiento que per-mita comprensión más completa de las restricciones del dominio de aplicación y las necesida-des de los participantes, 2) mayor énfasis en la iteración conforme se definen los requerimientos y 3) herramientas de comunicación y coordinación más efectivas que permitan a todos los par-ticipantes colaborar de manera efectiva. Los subprocesos IR señalados en el párrafo anterior solamente triunfarán si se integran de  manera adecuada en un enfoque evolutivo a la ingeniería del software. Conforme la resolución de problemas basada en patrones y las soluciones basadas en componentes comiencen a do-minar muchos dominios de aplicación, la IR debe acomodar el deseo de agilidad (rápida entrega incremental) y los requerimientos emergentes inherentes que resulten. La naturaleza concu-rrente de muchos modelos de proceso en ingeniería del software significa que la IR se integrará con actividades de diseño y construcción. En consecuencia, la noción de una “especificación de software” estática comienza a desaparecer, para ser sustituida por “requerimientos impulsados por valores” [Som05] derivada conforme los participantes responden a las características y fun-ciones entregadas en los incrementos de software anteriores. 31.4.5  Desarrollo de software impulsado por modelo Los ingenieros de software se aferran a la abstracción virtualmente en cada paso del proceso de ingeniería del software. Conforme comienza el diseño, las abstracciones arquitectónicas y en el nivel de componente se representan y valoran. Luego deben traducirse en una representación en lenguaje de programación que transforme el diseño (un nivel de abstracción relativamente alto) en un sistema operativo con un entorno de computación específico (un nivel de abstracción bajo). El desarrollo de software impulsado por modelo 11 acopla lenguajes de modelado específicos  de dominio con motores y generadores de transformación, de manera que facilita la represen-tación de la abstracción en niveles altos y luego los transforma en niveles más bajos [Sch06].PUNTO CLAVE “Los nuevos subprocesos IR incluyen:  1) adquisición de conocimiento mejorado, 2) incluso más iteración y 3) herramientas de comunicación y coordinación más efectivas”. PUNTO CLAVE El enfoque impulsado por modelo enfrenta un desafío permanente para todos los desarrolladores de software: cómo representar el software a un nivel mas alto de abstracción que en código. 11 También se usa el término ingeniería impulsada por modelo (IIM). 31Pressman(695-716).indd   70931Pressman(695-716).indd   709 26/1/10   17:33:4026/1/10   17:33:40