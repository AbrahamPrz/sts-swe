xmlbeanfactory bf = new xmlbeanfactory(new classpathresource(“app.xml”, getclass())); bank bank = (bank) bf.getbean(“bank”); como apenas se necesitan líneas de código java específico de spring, la aplicación se desconecta casi por completo de spring y desaparecen los problemas de conexión de sistemas como ejb2. aunque xml puede ser difícil de leer [64] , la directiva especificada en estos archivos de configuración es más sencilla que la complicada lógica de proxy y aspectos oculta a la vista y creada de forma automática. es una arquitectura tan atractiva que sistemas como spring modificaron totalmente el estándar ejb para la versión 3. ejb3 sigue el modelo de spring de aspectos transversales admitidos mediante declaraciones con archivos de configuración xml y/o anotaciones de java 5. el listado 11-5 muestra nuestro objeto bank reescrito en ejb3 [65] . listado 11-5 un ejb bank ejb3. package com.example.banking.model; import javax.persistence; import java.util.arraylist; import java.util.collection; @entity @table(name = “banks”) public class bank implements java.io.serializable { @id @generatedvalue(strategy=generationtype.auto) private int id; @embeddable // un objeto en línea en la fila db de bank public class address { protected string streetaddr1; protected string streetaddr2; protected string city; protected string state; protected string zipcode; } @embedded private address address; @onetomany (cascade = cascadetype.all, fetch = fetchtype.eager, mappedby=“bank”) private collection<account> accounts = new arraylist<account>(); 220