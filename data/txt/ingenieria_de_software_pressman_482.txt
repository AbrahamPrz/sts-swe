capítulo 19 prueba de aplicaciones orientadas a objetos 451 tamiento de clase da como resultado una colaboración con una o más clases, se usan diagramas de estado múltiple para rastrear el flujo de comportamiento del sistema. el modelo de estado puede recorrerse en una forma “ancho primero” [mcg94]. en este con- texto, ancho primero implica que un caso de prueba ejercita una sola transición y que, cuando se prueba una nueva transición, sólo se usan transiciones previamente probadas. considere un objeto creditcard que es parte del sistema bancario. el estado inicial de cre- ditcard es indefinido (es decir, no se proporcionó número de tarjeta de crédito). hasta leer la tarjeta de crédito durante una venta, el objeto toma un estado definido, es decir, se definen los atributos card number y expiration date, junto con identificadores específicos del banco. la tarjeta de crédito se somete cuando se envía para autorización y se aprueba cuando se recibe la autoriza-ción. la transición de creditcard de un estado a otro puede probarse al derivar casos de prueba que hacen que ocurra la transición. un enfoque de ancho primero aplicado a este tipo de prue-ba no ejercitaría submitted antes de ejercitar undefined y defined. si lo hiciera, usaría transiciones que no se probaron anteriormente y, por tanto, violaría el criterio de ancho primero. 19.7 r esumen el objetivo global de las pruebas orientadas a objetos (encontrar el número máximo de errores con una cantidad mínima de esfuerzo) es idéntico al de la prueba de software convencional. pero la estrategia y las tácticas de la prueba oo difieren significativamente. la visión de las pruebas se ensancha para incluir la revisión de los modelos de requerimientos y de diseño. además, el foco de la prueba se mueve alejándose del componente procedimental (el módulo) y acercándose hacia la clase. puesto que los modelos de requerimientos y diseño oo y el código fuente resultante están semánticamente acoplados, la prueba (en la forma de revisiones técnicas) comienza durante la actividad de modelado. por esta razón, la revisión de los modelos crc, objeto-relación y objeto-comportamiento puede verse como pruebas de primera etapa. una vez disponible el código, la prueba de unidad se aplica para cada clase. el diseño de pruebas para una clase usa varios métodos: prueba basada en fallo, prueba aleatoria y prueba de partición. cada uno de éstos ejercita las operaciones encapsuladas por la clase. las secuen-cias de prueba se diseñan para garantizar que se ejercitan las operaciones relevantes. el estado de la clase, representado por los valores de sus atributos, se examina para determinar si existen errores. la prueba de integración puede lograrse usando una estrategia basada en hebra o en uso. la prueba basada en hebra integra el conjunto de clases que colaboran para responder a una en-trada o evento. la prueba basada en uso construye el sistema en capas, comenzando con aque-llas clases que no utilizan clases servidor. la integración de métodos de diseño de caso de prueba también puede usar pruebas aleatorias y de partición. además, la prueba basada en escenario y las pruebas derivadas de los modelos de comportamiento pueden usarse para pro-bar una clase y a sus colaboradores. una secuencia de prueba rastrea el flujo de operaciones a través de las colaboraciones de clase. la prueba de validación del sistema oo está orientada a caja negra y puede lograrse al apli- car los mismos métodos de caja negra estudiados para el software convencional. sin embargo, la prueba basada en escenario domina la validación de los sistemas oo, lo que hace al caso de uso un impulsor primario para la prueba de validación.  problemas y puntos por evaluar 19.1. con sus palabras, describa por qué la clase es la unidad razonable más pequeña para probar dentro de un sistema oo. 19pressman(437-452).indd  45119pressman(437-452).indd  451 21/1/10  10:58:3621/1/10  10:58:36