CAPÍTULO 19  PRUEBA DE APLICACIONES ORIENTADAS A OBJETOS 443  3. Debe desarrollarse una lista de pasos de prueba para cada una de ellas, que debe con- tener: a. Una lista de estados especificados para la clase que se probará b.  Una lista de mensajes y operaciones que se ejercitarán como consecuencia de la  prueba c. Una lista de excepciones que pueden ocurrir conforme se prueba la clase d.  Una lista de condiciones externas (es decir , con la finalidad de realizar adecuada- mente las pruebas, cambios en el entorno externo al software que debe existir) e.  Información complementaria que ayudará a comprender o a implementar la prueba A diferencia del diseño con vencional de casos de prueba, que se activan mediante una visión  entrada-proceso-salida del software o con el detalle algorítmico de módulos individuales, la  prueba orientada a objetos se enfoca en el diseño de secuencias apropiadas de operaciones para ejercitar los estados de una clase. 19.4.1  Implicaciones del diseño de casos de prueba de los conceptos OO Conforme una clase evoluciona a través de los modelos de requerimientos y diseño, se convierte en un blanco para el diseño de casos de prueba. Puesto que los atributos y las operaciones es-tán encapsulados, por lo general es improductivo probar operaciones afuera de la clase. Aunque la encapsulación es un concepto de diseño esencial para OO, puede crear un obstáculo menor cuando se prueba. Como anota Binder [Bin94a]: “las pruebas requieren reportar el estado con-creto y abstracto de un objeto”. No obstante, la encapsulación puede hacer que esta información sea un poco difícil de obtener. A menos que se proporcionen operaciones internas a fin de re-portar los valores para los atributos de clase, puede ser difícil adquirir una instantánea del es-tado de un objeto. La herencia también puede presentar retos adicionales durante el diseño de casos de prueba.  Ya se anotó que cada nuevo contexto de uso requiere un nuevo examen, aun cuando se haya logrado el reuso. Además, la herencia múltiple 4 complica la prueba todavía más al aumentar el  número de contextos para los cuales se requiere la prueba [Bin94a]. Si dentro del mismo domi-nio de problema se usan subclases instanciadas de una superclase, es probable que el conjunto de casos de prueba derivados para la superclase pueda usarse cuando se prueba la subclase. Sin embargo, si la superclase se usa en un contexto completamente diferente, los casos de prueba de superclase tendrán poca aplicabilidad y debe diseñarse un nuevo conjunto de pruebas. 19.4.2   Aplicabilidad de los métodos convencionales de diseño de casos de prueba Los métodos de prueba de caja blanca descritos en el capítulo 18 pueden aplicarse a las opera- ciones definidas para una clase. Las técnicas de ruta básica, prueba de bucle o flujo de datos pueden ayudar a garantizar que se probaron todos los enunciados en una operación. Sin em-bargo, la estructura concisa de muchas operaciones de clase hace que algunos argumenten que el esfuerzo aplicado a la prueba de caja blanca puede redirigirse mejor para probar en un nivel de clase. Los métodos de prueba de caja negra son tan apropiados para los sistemas OO como para  los sistemas desarrollados, usando métodos de ingeniería del software convencional. Como se observó en el capítulo 18, los casos de uso pueden proporcionar entrada útil en el diseño de las pruebas de caja negra y en las basadas en estado. 4 Un concepto OO que debe usarse con cuidado extremo.WebRef Se puede encontrar una excelente serie  de documentos y recursos sobre pruebas OO en www.rbsc.com. 19Pressman(437-452).indd   44319Pressman(437-452).indd   443 21/1/10   10:58:3321/1/10   10:58:33