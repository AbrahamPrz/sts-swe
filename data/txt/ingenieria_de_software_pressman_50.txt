capítulo 1 el software y la ingeniería de software 19 encontraban trabajando deben dedicar tiempo para enseñar a los recién lle- gados, lo que disminuye la cantidad de tiempo dedicada al esfuerzo de desa-rrollo productivo. pueden agregarse individuos, pero sólo en forma planeada y bien coordinada. mito:  si decido subcontratar el proyecto de software a un tercero, puedo descansar y dejar que esa compañía lo elabore. realidad:  si una organización no comprende cómo administrar y controlar proyectos de software internamente, de manera invariable tendrá dificultades cuando sub-contrate proyectos de software. mitos del cliente. el cliente que requiere software de computadora puede ser la persona en el escritorio de al lado, un grupo técnico en el piso inferior , el departamento de mercadotecnia y ventas, o una compañía externa que solicita software mediante un contrato. en muchos casos, el cliente sostiene mitos sobre el software porque los gerentes y profesionales de éste hacen poco para corregir la mala información. los mitos generan falsas expectativas (por parte del cliente) y, en última instancia, la insatisfacción con el desarrollador. mito:  para comenzar a escribir programas, es suficiente el enunciado general de los objetivos —podremos entrar en detalles más adelante. realidad:  aunque no siempre es posible tener el enunciado exhaustivo y estable de los requerimientos, un “planteamiento de objetivos” ambiguo es una receta para el desastre. los requerimientos que no son ambiguos (que por lo general se obtienen en forma iterativa) se desarrollan sólo por medio de una comunica-ción eficaz y continua entre el cliente y el desarrollador. mito:  los requerimientos del software cambian continuamente, pero el cambio se asi-mila con facilidad debido a que el software es flexible. realidad:  es verdad que los requerimientos del software cambian, pero el efecto que los cambios tienen varía según la época en la que se introducen. cuando se solicitan al principio cambios en los requerimientos (antes de que haya co-menzado el diseño o la elaboración de código), el efecto sobre el costo es re-lativamente pequeño. 16 sin embargo, conforme pasa el tiempo, el costo au- menta con rapidez: los recursos ya se han comprometido, se ha establecido la estructura del diseño y el cambio ocasiona perturbaciones que exigen re-cursos adicionales y modificaciones importantes del diseño. mitos del profesional. los mitos que aún sostienen los trabajadores del software han sido alimentados por más de 50 años de cultura de programación. durante los primeros días, la pro-gramación se veía como una forma del arte. es difícil que mueran los hábitos y actitudes arrai-gados. mito:  una vez que escribimos el programa y hacemos que funcione, nuestro trabajo ha terminado. realidad:  alguien dijo alguna vez que “entre más pronto se comience a ‘escribir el có- digo’, más tiempo tomará hacer que funcione”. los datos de la industria indi-can que entre 60 y 80% de todo el esfuerzo dedicado al software ocurrirá después de entregarlo al cliente por primera vez. mito:  hasta que no se haga “correr” el programa, no hay manera de evaluar su cali-dad. 16 muchos ingenieros de software han adoptado un enfoque “ágil” que asimila los cambios en forma gradual y creciente, con lo que controlan su efecto y costo. los métodos ágiles se estudian en el capítulo 3.trabaje muy duro para entender qué es lo que tiene que hacer antes de empezar. quizás no pueda desarrollarlo a detalle, pero entre más sepa, menor será el riesgo que tome.consejo siempre que piense que no hay tiempo para la ingeniería de software, pregúntese: “¿tendremos tiempo de hacerlo otra vez?”.consejo 01pressman(001-024).indd  1901pressman(001-024).indd  19 14/1/10  13:31:0214/1/10  13:31:02