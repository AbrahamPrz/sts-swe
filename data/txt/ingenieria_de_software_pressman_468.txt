437capítulo 19prueba de aplicaciones orientadas a objetos conceptos clave  prueba aleatoria . . . . . . . . . 447 prueba basada en escenario . 445prueba basada en fallo . . . . 444prueba basada en hebra. . . . 442prueba basada en uso . . . . . 442prueba de clase. . . . . . . . . . 441prueba de clase múltiple . . . 449prueba de grupo . . . . . . . . . 442prueba de partición . . . . . . . 448 ¿qué es? la arquitectura del software orien- tado a objetos (oo) da como resultado una serie de subsistemas en capas que encapsulan clases colaboradoras. cada uno de estos ele- mentos de sistema (subsistemas y clases) realiza funciones que ayudan a lograr los requerimientos del sistema. es necesario probar un sistema oo en varios niveles diferen-tes con la intención de descubrir errores que puedan ocu-rrir conforme las clases colaboran unas con otras y confor-me los subsistemas se comunican a través de capas arquitectónicas. ¿quién lo hace? ingenieros de software y examinadores especializados realizan la prueba orientada a objetos. ¿por qué es importante? el programa tiene que ejecu- tarse antes de que llegue al cliente con la intención especí-fica de remover todos los errores, de modo que el cliente no experimente la frustración que produce encontrarse con un producto de calidad pobre. con la finalidad de encon-trar el mayor número posible de errores, las pruebas deben realizarse de manera sistemática y los casos de prueba deben diseñarse usando técnicas disciplinadas. ¿cuáles son los pasos? las pruebas oo son estratégica- mente análogas a la prueba de sistemas convencionales, pero tácticamente diferentes. puesto que el análisis oo y los modelos de diseño son similares en estructura y conte-nido con el programa oo resultante, las “pruebas” se inician con la revisión de dichos modelos. una vez gene-rado el código, la prueba oo comienza “en lo pequeño”, con las pruebas de clase. se diseña una serie de pruebas que ejercitan las operaciones de clase y que examinan si existen errores conforme una clase colabora con otras clases. en la medida en la que las clases se integran para formar un subsistema, se aplican pruebas basadas en hebra, en uso y de grupo, junto con enfoques basados en fallo, a fin de ejercitar por completo clases colaborado-ras. finalmente, se usan casos de uso (desarrollados como parte del modelo de requerimientos) para descubrir erro-res de validación del software. ¿cuál es el producto final? se diseña y documenta un conjunto de casos de prueba, diseñados para ejercitar clases, sus colaboraciones y comportamientos; se definen los resultados esperados y se registran los resultados rea-les. ¿cómo me aseguro de que lo hice bien? cuando comienzan las pruebas, cambia el punto de vista. ¡intente “romper” el software! diseñe casos de prueba en forma disciplinada y revise con minuciosidad los casos de prueba creados. una mirada  rápidaen el capítulo 18 se señaló que el objetivo de las pruebas, dicho de manera simple, es en- contrar la mayor cantidad posible de errores con una cantidad manejable de esfuerzo aplicado durante un lapso realista. aunque este objetivo fundamental permanece invaria- ble para el software orientado a objetos (oo), la naturaleza de los programas oo cambia en la estrategia y en las tácticas de las pruebas. podría argumentarse que, conforme las bibliotecas de clase reutilizables crecen en tamaño, un reuso mayor mitigará a los sistemas oo en su necesidad de pruebas pesadas. lo opuesto es exactamente cierto. binder [bin94b] analiza esto cuando afirma: cada reuso es un nuevo contexto de uso y es prudente una nueva comprobación. parece probable que se necesitarán más pruebas, no menos, para obtener alta confiabilidad en los sistemas orientados a objetos. para probar adecuadamente los sistemas oo, deben realizarse tres cosas: 1) ampliar la defi- nición de prueba para incluir las técnicas de descubrimiento de error aplicadas al análisis orien- tado a objetos y a modelos de diseño, 2) cambiar significativamente la estrategia para prueba de unidad e integración y 3) explicar las características únicas del software oo mediante el di-seño de casos de prueba. 19pressman(437-452).indd  43719pressman(437-452).indd  437 21/1/10  10:58:3121/1/10  10:58:31