632 PARTE CUATRO  ADMINISTRACIÓN DE PROYECTOS DE SOFTWARE sos adicionales sobre el área problemática: puede reasignarse al personal o redefinirse el calen- dario del proyecto. Cuando se enfrentan a severa presión debido a la fecha límite, los gerentes experimentados  en ocasiones usan un calendario de proyecto y técnica de control llamado time-boxing (encuadre  temporal) [Jal04]. La estrategia time-boxing reconoce que el producto completo no puede entre- garse en la fecha límite preestablecida. Por tanto, se elige un paradigma de software incremen-tal (capítulo 2) y se establece un calendario para cada entrega incremental. Las tareas asociadas con cada incremento se encuadran en el tiempo. Esto significa que el  calendario para cada tarea se ajusta trabajando en reversa desde la fecha de entrega hasta el momento del incremento. Alrededor de cada tarea se pone un “recuadro”. Cuando una tarea llega a la frontera de su encuadre temporal (más o menos 10 por ciento), el trabajo se detiene y comienza la siguiente tarea. Con frecuencia, la reacción inicial ante el enfoque time-boxing es negativa: “Si el trabajo no  se termina, ¿cómo puedo avanzar?”. La respuesta se encuentra en la forma en la que se logra el trabajo. Para cuando se llega a la frontera del encuadre temporal, es probable que 90 por ciento de la tarea esté completa. 9 El restante 10 por ciento, aunque importante, puede 1) demorarse  hasta el siguiente incremento o 2) completarse más tarde si se requiere. En lugar de quedarse “atascado” en una tarea, el proyecto avanza hacia la fecha de entrega. 27.5.3  Seguimiento del progreso para un proyecto OO Aunque un modelo iterativo es el mejor marco conceptual para un proyecto OO, el paralelismo de tareas hace difícil el seguimiento del proyecto. Acaso se tengan dificultades al establecer hitos significativos para un proyecto OO, debido a que algunas cosas diferentes ocurren a la vez. En general, los siguientes hitos importantes pueden considerarse “completos” cuando se satis-facen los criterios anotados. Hitos técnicos: análisis OO completo • Definición y revisión de todas las clases y de la jerarquía de clases. • Definición y revisión de los atributos de clase y de las operaciones asociadas. • Establecimiento y revisión de las relaciones de clase (capítulo 6). • Creación y revisión de un modelo de comportamiento (capítulo 7). • Anotación de las clases reutilizables. Hitos técnicos: diseño OO completo • Definición y revisión del conjunto de subsistemas. • Asignación de clases a subsistemas y su revisión. • Establecimiento y revisión de la asignación de tareas. • Identificación de responsabilidades y colaboraciones. • Diseño y revisión de atributos y operaciones. • Creación y revisión del modelo de comunicación. Hitos técnicos: programación OO completa • Implementación en código de cada nueva clase, a partir del modelo de diseño. • Implementación de las clases extraídas (a partir de la librería de reutilización). • Construcción de prototipo o incremento.PUNTO CLAVE Cuando se alcanza la fecha de  conclusión definida de una tarea encuadrada en el tiempo, el trabajo cesa para dicha tarea y comienza la siguiente. 9 Un cínico puede recordar el dicho: “el primer 90 por ciento del sistema requiere 90 por ciento del tiempo; el res- tante 10 por ciento del sistema requiere 90 por ciento del tiempo”. 27Pressman(620-639).indd   63227Pressman(620-639).indd   632 26/1/10   19:47:4426/1/10   19:47:44