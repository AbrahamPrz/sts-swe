748 APÉNDICE 2  CONCEPTOS ORIENTADOS A OBJETO problema que son visibles al usuario o cliente. El nivel de abstracción de cualquier clase de  análisis es relativamente alto. Conforme evoluciona el modelo de diseño, el equipo de software debe definir un conjunto de  clase de diseño  que 1) refinen las clases de análisis, proporcionando detalle de diseño que per- mitirá la implementación de las clases y 2) crear un nuevo conjunto de clases de diseño que im-plementen una infraestructura de software que dé apoyo a la solución empresarial. Se sugieren cinco tipos diferentes de clases de diseño, cada una como representación de una capa diferente de la arquitectura de diseño [Amb01]: • Clases de interfaz de usuario: definen todas las abstracciones que se necesitan para la interacción humano-computadora (IHC). • Clases de dominio empresarial: con frecuencia son refinamientos de las clases de análisis definidas anteriormente. Las clases identifican los atributos y operaciones (métodos) que se requieren para implementar algún elemento del dominio empresarial. • Clases de proceso: implementan abstracciones empresariales de nivel inferior requeridas para gestionar por completo las clases de dominio empresarial. • Clases persistentes: representan almacenes de datos (por ejemplo, una base de datos) que persistirá más allá de la ejecución del software. • Clases de sistema: implementan gestión de software y funciones de control que permiten al sistema operar y comunicarse dentro de su entorno de computación y con el mundo exterior. Conforme evoluciona el diseño arquitectónico, el equipo de software debe desarrollar un con-junto completo de atributos y operaciones para cada clase de diseño. El nivel de abstracción se reduce conforme cada clase de análisis se transforma en una representación de diseño. Es decir, las clases de análisis representan objetos (y métodos asociados que se les aplican), usando la jerga del dominio empresarial. Las clases de diseño presentan detalle significativamente más técnico como una guía para la implementación. Arlow y Neustadt [Arl02] sugieren que cada clase de diseño se revise para garantizar que está  “bien formada”. Definen cuatro características de una clase de diseño bien formada: Completa y suficiente. Una clase de diseño debe ser el encapsulamiento completo de to-dos los atributos y métodos que razonablemente pueda esperarse que existan para la clase (con base en una interpretación enterada del nombre de la clase). Por ejemplo, la clase Es- cena definida para software de edición de video es completa sólo si contiene todos los atri-butos y métodos que razonablemente puedan asociarse con la creación de una escena de video. La suficiencia garantiza que la clase de diseño contiene solamente aquellos métodos que son suficientes para lograr la intención de la clase, ni más y ni menos. Primitividad. Los métodos asociados con una clase de diseño deben enfocarse en lograr  una función específica para la clase. Una vez implementada la función con un método, la clase no debe proporcionar otra vía para lograr lo mismo. Por ejemplo, la clase VideoClip  del software de edición puede tener atributos punto-inicial y punto-final para indicar los puntos  de inicio y finalización del clip (observe que el video en bruto cargado en el sistema puede ser más largo que el clip que se usa). Los métodos, setStartPoint() y setEndPoint() proporcio- nan el único medio para establecer puntos de inicio y finalización para el clip. Alta cohesión. Una clase de diseño cohesiva tiene un solo propósito: tiene un pequeño  conjunto enfocado en responsabilidades y aplica atributos y métodos decisivos para imple-mentar dichas responsabilidades. Por ejemplo, la clase VideoClip del software de edición  de video puede contener un conjunto de métodos para editar el clip de video. En tanto cada  34Pressman(743-750)app2.indd   74834Pressman(743-750)app2.indd   748 26/1/10   17:32:2826/1/10   17:32:28