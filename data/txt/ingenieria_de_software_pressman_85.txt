54 PARTE UNO  EL PROCESO DEL SOFTWARE 2.14. ¿Cuáles son las ventajas y desventajas de desarrollar software en el que la calidad no es “suficiente- mente buena”? Es decir, ¿qué pasa cuando se pone el énfasis en la velocidad de desarrollo sobre la calidad del producto? 2.15. Dé tres ejemplos de proyectos de software que serían abordables con el modelo basado en compo- nentes. Sea específico. 2.16. ¿Es posible demostrar que un componente de software, o incluso un programa completo, es correcto?  Entonces, ¿por qué no todos lo hacen? 2.17. ¿Son lo mismo el proceso unificado y el UML? Explique su respuesta.   LECTURAS  ADICIONALES  Y FUENTES  DE INFORMACIÓN La mayor parte de los libros de ingeniería de software consideran en detalle los modelos de proceso tradi- cionales. Libros como el de Sommerville ( Software Engineering, 8a. ed., Addison-Wesley, 2006), Pfleeger y  Atlee ( Software Engineering , 3a. ed., Prentice-Hall, 2005), y Schach (Object-Oriented and Classical Software  Engineering, 7a. ed., McGraw-Hill, 2006) consideran los paradigmas tradicionales y estudian sus fortalezas y debilidades. Glass (Facts and Fallacies of Software Engineering, Prentice-Hall, 2002) da un punto de vista prag-mático y crudo del proceso de ingeniería de software. Aunque no se dedica específicamente al proceso, Brooks (The Mythical Man-Month, 2a. ed., Addison-Wesley, 1995) presenta la sabiduría antigua sobre los  proyectos y plantea que todo tiene que ver con el proceso. Firesmith y Henderson-Sellers ( The OPEN Process Framework: An Introduction , Addison-Wesley, 2001)  presenta una plantilla general para crear “procesos de software flexibles pero con disciplina” y analiza los atributos y objetivos del proceso. Madachy (Software Process Dynamics, Wiley-IEEE, 2008) estudia técnicas de modelado que permiten analizar los elementos técnicos y sociales interrelacionados del proceso del soft-ware. Sharpe y McDermott ( Workflow Modeling: Tools for Process Improvement and Application Development,  Artech House, 2001) presentan herramientas para modelar procesos tanto de software como de negocios. Lim (Managing Software Reuse, Prentice-Hall, 2004) estudia la reutilización desde la perspectiva del ge- rente. Ezran, Morisio y Tully ( Practical Software Reuse, Springer, 2002) y Jacobson, Griss y Jonsson ( Software  Reuse, Addison-Wesley, 1997) presentan mucha información útil sobre el desarrollo basado en componentes. Heineman y Council ( Component-Based Software Engineering, Addison-Wesley, 2001) describen el proceso  requerido para implementar sistemas basados en componentes. Kenett y Baker ( Software Process Quality:  Management and Control, Marcel Dekker, 1999) analizan la manera en la que se conectan íntimamente la administración de la calidad y el diseño del proceso. Nygard ( Release It!: Design and Deploy Production-Ready Software,  Pragmatic Bookshelf, 2007) y Richard- son y Gwaltney ( Ship it! A Practical Guide to Successful Software Projects, Pragmatic Bookshelf, 2005) presentan  una amplia colección de lineamientos útiles aplicables a la actividad de despliegue. Además del libro fundamental de Jacobson, Rumbaugh y Booch acerca del proceso unificado [Jac99], los  libros de Arlow y Neustadt (UML 2 and the Unified Process, Addison-Wesley, 2005), Kroll y Kruchten ( The  Rational Unified Process Made Easy, Addison-Wesley, 2003) y Farve ( UML and the Unified Process, IRM Press,  2003) proveen información complementaria excelente. Gibbs (Project Management with the IBM Rational Unified Process, IBM Press, 2006) analiza la administración de proyectos dentro del contexto del PU. En internet existe una amplia variedad de fuentes de información sobre la ingeniería de software y el  proceso del software. En el sitio web del libro, www.mhhe.com/engcs/compsci/pressman/professio- nal/olc/ser.htm, hay una lista actualizada de referencias en la Red Mundial que son relevantes para el proceso del software. 02Pressman(025-054).indd   5402Pressman(025-054).indd   54 14/1/10   13:36:5314/1/10   13:36:53