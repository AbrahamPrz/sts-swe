584 capítulo 21 ■ ingeniería de software orientada a aspectos lenguaje de programación aspectj. éste sigue siendo el lenguaje orientado a aspectos usado más ampliamente, aunque se han implementado también extensiones orienta-das a aspectos de otros lenguajes, tales como c# y c++. además, se han desarrollado otros lenguajes experimentales para soportar la separación explícita de las competencias y la composición de competencias, y existe implementación experimental de aop en el framework .net. la programación orientada a aspectos se cubre de manera extensa en otros libros (colyer et al., 2005; gradecki y lezeiki, 2003; laddad, 2003b). si usted siguió un enfoque orientado a aspectos para diseñar su sistema, ya identificó la funcionalidad central y las extensiones para que dicha funcionalidad se implemente como aspectos transversales. el enfoque del proceso de programación debe ser entonces escribir código que implemente la funcionalidad central y de extensión, y, de manera fun-damental, especificar los puntos de corte en los aspectos para que el consejo del aspecto se teja en el código base en los lugares correctos. es muy importante especificar de manera correcta los puntos de corte, pues éstos definen dónde se combinarán los consejos de aspecto con la funcionalidad central. si se comete un error en la especificación del punto de corte, entonces el consejo del aspecto se tejerá en el programa en el lugar equivocado. esto podría conducir a un comporta-miento inesperado e impredecible del programa. es esencial respetar los estándares de nomenclatura establecidos durante el diseño del sistema. también es necesario revisar todos los aspectos para garantizar que no ocurra interferencia de aspectos si dos o más aspectos se tejen en el sistema central en el mismo punto de enlace. en general, es mejor evitar esto por completo, pero, en ocasiones, puede ser la mejor forma para implementar una competencia. en tales circunstancias, hay que asegurarse de que los aspectos son completamente independientes. el comportamiento del programa no debe depender del orden en que los aspectos se tejan en el programa. 21.3.3 verificación y validación como se estudió en el capítulo 8, la verificación y la validación implican demostrar que un programa cumple su especificación (verificación) y satisface las necesidades reales de las partes interesadas (validación). las técnicas de verificación estática se enfocan en aná-lisis manual o automatizado del código fuente del programa. la validación o las pruebas dinámicas se usan para descubrir defectos en el programa o demostrar que el programa «aspecto» mantenimiento pointcuts viewmain = call getiteminfo (..)mainco = call removeitem (..)mainci = call additem (..) extensiones de clase viewmaintenance history <viewitem> {after (<viewmain>)displayhistory} más extensiones aquífigura 21.15 parte de un modelo de un aspecto m21_sommerville_ingenieria_1ed_se_565-590.indd  584m21_sommerville_ingenieria_1ed_se_565-590.indd  584 3/18/11  5:38:59 pm3/18/11  5:38:59 pm