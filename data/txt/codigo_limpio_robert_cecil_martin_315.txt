private void validateschemaelementid(char elementid) throws argsexception { if (!character.isletter(elementid)) { throw new argsexception(argsexception.errorcode.invalid_argument_name, elementid, null); } } private void parsearguments() throws argsexception { for (currentargument = argslist.iterator(); currentargument.hasnext();) { string arg = currentargument.next(); parseargument(arg); } } private void parseargument(string arg) throws argsexception { if (arg.startswith(“-”)) parseelements(arg); } private void parseelements(string arg) throws argsexception { for (int i = 1; i < arg.length(); i++) parseelement(arg.charat(i)); } private void parseelement(char argchar) throws argsexception { if (setargument(argchar)) argsfound.add(argchar); else { throw new argsexception(argsexception.errorcode.unexpected_argument, argchar, null); } } private boolean setargument(char argchar) throws argsexception { argumentmarshaler m = marshalers.get(argchar); if (m == null) return false; try { m.set(currentargument); return true; } catch (argsexception e) { e.seterrorargumentid(argchar); throw e; } } public int cardinality() { return argsfound.size(); } public string usage() { if (schema.length() > 0) return "-[" + schema + “]”; 316