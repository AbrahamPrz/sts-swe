funciones, argumentos, clases y paquetes. asignamos nombres a archivos y a directorios, a archivos jar, war y ear. usamos nombres constantemente. por ello, debemos hacerlo bien. a continuación, veremos algunas reglas básicas para crear nombres correctos. usar nombres que revelen las intenciones es fácil afirmar que los nombres deben revelar nuestras intenciones. lo que queremos recalcar es la importancia de hacerlo. elegir nombres correctos lleva tiempo, pero también ahorra trabajo. por ello, preste atención a los nombres y cámbielos cuando encuentre otros mejores. todo el que lea su código se lo agradecerá. el nombre de una variable, función o clase debe responder una serie de cuestiones básicas. debe indicar por qué existe, qué hace y cómo se usa. si un nombre requiere un comentario, significa que no revela su cometido. int d; // tiempo transcurrido en días el nombre d no revela nada. no evoca una sensación de tiempo transcurrido, ni de días. debe elegir un nombre que especifique lo que se mide y la unidad de dicha medida: int elapsedtimeindays; int dayssincecreation; int dayssincemodification; int fileageindays; la elección de nombres que revelen intenciones facilita considerablemente la comprensión y la modificación del código. ¿para qué sirve el siguiente código? public list<int[]> getthem() { list<int[]> list1 = new arraylist<int[]>(); for (int[] x : thelist) if (x[0] == 4) list1.add(x); return list1; } ¿por qué es complicado saber la función de este código? no hay expresiones complejas. los espacios y el sangrado son razonables. sólo hay tres variables y dos constantes. ni siquiera contiene clases complejas o 42