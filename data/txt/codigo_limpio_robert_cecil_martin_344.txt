listado daydate , vemos que estas funciones (líneas 638-724) devuelven una fecha creada por adddays (línea 571), que invoca createinstance (línea 808), que crea spreadsheetdate [g7]. no es recomendable que las clases base conozcan sus variantes. para corregirlo, debemos usar el patrón de factoría abstracta [98] y crear daydatefactory . esta factoría creará las instancias de daydate que necesitamos y también responderá a preguntas sobre la implementación, como las fechas máxima y mínima. public abstract class daydatefactory { private static daydatefactory factory = new spreadsheetdatefactory(); public static void set instance(daydatefactory factory) { daydatefactory.factory = factory; } protected abstract daydate _makedate(int ordinal); protected abstract daydate _makedate(int day, daydate.month month, int year); protected abstract daydate _makedate(int day, int month, int year); protected abstract daydate _makedate(java.util.date date); protected abstract int _getminimumyear(); protected abstract int _getmaximumyear(); public static daydate makedate(int ordinal) { return factory._makedate(ordinal); } public static daydate makedate(int day, daydate.month month, int year) { return factory._makedate(day, month, year); } public static daydate makedate(int day, int month, int year) { return factory._makedate(day, month, year); } public static daydate makedate(java.util.date date) { return factory._makedate(date); } public static int getminimumyear() { return factory._getminimumyear(); } public static int getmaximumyear() { return factory._getmaximumyear(); } } esta clase de factoría sustituye los métodos createinstance por métodos 345