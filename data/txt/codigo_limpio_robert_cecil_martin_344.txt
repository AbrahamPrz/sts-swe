listado  DayDate , vemos que estas funciones (líneas  638-724)  devuelven una fecha creada por  addDays  (línea 571), que invoca  createInstance  (línea 808), que crea  SpreadsheetDate  [G7]. No es recomendable que las clases base conozcan sus variantes. Para corregirlo, debemos usar el patrón de  factoría abstracta [98]  y crear DayDateFactory . Esta factoría creará las instancias de  DayDate  que necesitamos y también responderá a preguntas sobre la implementación, como las fechas máxima y mínima. public abstract class DayDateFactory { private static DayDateFactory factory = new SpreadsheetDateFactory(); public static void set Instance(DayDateFactory factory) { DayDateFactory.factory = factory; } protected abstract DayDate _makeDate(int ordinal); protected abstract DayDate _makeDate(int day, DayDate.Month month, int year); protected abstract DayDate _makeDate(int day, int month, int year); protected abstract DayDate _makeDate(java.util.Date date); protected abstract int _getMinimumYear(); protected abstract int _getMaximumYear(); public static DayDate makeDate(int ordinal) { return factory._makeDate(ordinal); } public static DayDate makeDate(int day, DayDate.Month month, int year) { return factory._makeDate(day, month, year); } public static DayDate makeDate(int day, int month, int year) { return factory._makeDate(day, month, year); } public static DayDate makeDate(java.util.Date date) { return factory._makeDate(date); } public static int getMinimumYear() { return factory._getMinimumYear(); } public static int getMaximumYear() { return factory._getMaximumYear(); } } Esta clase de factoría sustituye los métodos  createInstance  por métodos 345