capítulo 8 conceptos de diseño 189 8.3 conceptos de diseño durante la historia de la ingeniería de software, ha evolucionado un conjunto de conceptos fundamentales sobre su diseño. aunque con el paso de los años ha variado el grado de interés en cada concepto, todos han soportado la prueba del tiempo. cada uno da al diseñador del software el fundamento desde el que pueden aplicarse métodos de diseño sofisticados. todos ayudan a responder las preguntas siguientes: • ¿qué criterios se usan para dividir el software en sus componentes individuales? • ¿cómo se extraen los detalles de la función o la estructura de datos de la representación conceptual del software? • ¿cuáles son los criterios uniformes que definen la calidad técnica de un diseño de software? m. a. jackson [jac75] dijo: “el principio de la sabiduría [para un ingeniero de software] es reconocer la diferencia que hay entre hacer que un programa funcione y lograr que lo haga bien”. los conceptos fundamentales del diseño del software proveen la estructura necesaria para “hacerlo bien”. en las secciones que siguen, se da un panorama breve de los conceptos importantes del di- seño de software, tanto del desarrollo tradicional como del orientado a objeto. 8.3.1 abstracción cuando se considera una solución modular para cualquier problema, es posible plantear mu-chos niveles de abstracción. en el más elevado se enuncia una solución en términos gruesos con el uso del lenguaje del ambiente del problema. en niveles más bajos de abstracción se da la descripción más detallada de la solución. la terminología orientada al problema se acopla con la que se orienta a la implementación, en un esfuerzo por enunciar la solución. por último, 1. estudiar el modelo del dominio de la informa- ción y diseñar las estructuras de datos apropiadas para los objetos de datos y sus atributos. 2. seleccionar un estilo de arquitectura que sea ade- cuado para el software con el uso del modelo de análisis. 3. hacer la partición del modelo de análisis en subsistemas de diseño y asignar éstos dentro de la arquitectura:   asegúrese de que cada subsistema sea cohesivo   en sus funciones.   diseñe interfaces del subsistema.  asigne clases de análisis o funciones a cada subsistema. 4. crear un conjunto de clases de diseño o componentes:  traduzca la descripción de clases de análisis a una clase   de diseño.   compare cada clase de diseño con los criterios de diseño;   considere los aspectos hereditarios.   defina métodos y mensajes asociados con cada clase   de diseño.   evalúe y seleccione patrones de diseño para una clase   de diseño o subsistema.  revise las clases de diseño y, si se requiere, modifíquelas. 5. diseñar cualesquiera interfaces requeridas con sistemas o dis- positivos externos. 6. diseñar la interfaz de usuario.  revise los resultados del análisis de tareas.  especifique la secuencia de acciones con base   en los escenarios de usuario.   cree un modelo de comportamiento de la interfaz.  defina los objetos de la interfaz y los mecanismos de control.  revise el diseño de la interfaz y, si se requiere, modifíquelo. 7. efectuar el diseño en el nivel de componente.  especifique todos los algoritmos en un nivel   de abstracción relativamente bajo.   mejore la interfaz de cada componente.  defina estructuras de datos en el nivel de componente.  revise cada componente y corrija todos los errores   que se detecten. 8. desarrollar un modelo de despliegue.conjunto de tareas conjunto de tareas generales para el diseño cita: “la abstracción es uno de los modos fundamentales con los que los humanos luchamos con la complejidad.” grady booch 08pressman(183-205).indd  18908pressman(183-205).indd  189 14/1/10  14:31:0814/1/10  14:31:08