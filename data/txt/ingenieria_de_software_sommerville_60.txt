2.3 ■ Cómo enfrentar el cambio  43  2.2.4 Evolución del software La flexibilidad de los sistemas de software es una de las razones principales por las  que cada vez más software se incorpora en los sistemas grandes y complejos. Una vez tomada la decisión de fabricar hardware, resulta muy costoso hacer cambios a su diseño. Sin embargo, en cualquier momento durante o después del desarrollo del sistema, pueden hacerse cambios al software. Incluso los cambios mayores son todavía más baratos que los correspondientes cambios al hardware del sistema. En la historia, siempre ha habido división entre el proceso de desarrollo del software y el proceso de evolución del software (mantenimiento de software). Las personas conside-ran el desarrollo de software como una actividad creativa, en la cual se diseña un sistema de software desde un concepto inicial y a través de un sistema de trabajo. No obstante, consideran en ocasiones el mantenimiento del software como insulso y poco interesante. Aunque en la mayoría de los casos los costos del mantenimiento son varias veces los costos iniciales de desarrollo, los procesos de mantenimiento se consideran en ocasiones como menos desafiantes que el desarrollo de software original. Esta distinción entre desarrollo y mantenimiento es cada vez más irrelevante. Es muy difícil que cualquier sistema de software sea un sistema completamente nuevo, y tiene mucho más sentido ver el desarrollo y el mantenimiento como un continuo. En lugar de dos procesos separados, es más realista pensar en la ingeniería de software como un proceso evolutivo (figura 2.8), donde el software cambia continuamente a lo largo de su vida, en función de los requerimientos y las necesidades cambiantes del cliente.  2.3 Cómo enfrentar el cambio El cambio es inevitable en todos los grandes proyectos de software. Los requerimientos del sistema varían conforme la empresa procura que el sistema responda a presiones externas y se modifican las prioridades administrativas. A medida que se ponen a dispo-sición nuevas tecnologías, surgen nuevas posibilidades de diseño e implementación. Por ende, cualquiera que sea el modelo del proceso de software utilizado, es esencial que ajuste los cambios al software a desarrollar.Especificación de requerimientosEspecificación del sistema Prueba de aceptaciónPrueba de integración del sistemaPrueba de integración del subsistemaDiseño del sistemaDiseño detallado ServicioMódulo y código de unidad y pruebaPlan de prueba de aceptaciónPlan de prueba de integración del sistemaPlan de prueba de integración de subsistemas Figura 2.7  Probando fases en un proceso de software dirigido por un plan M02_SOMMERVILLE_INGENIERIA_1ED_SE_027-055.indd   43M02_SOMMERVILLE_INGENIERIA_1ED_SE_027-055.indd   43 3/18/11   4:45:31 PM3/18/11   4:45:31 PM