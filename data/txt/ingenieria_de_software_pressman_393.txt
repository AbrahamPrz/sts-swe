362 PARTE TRES  ADMINISTRACIÓN DE LA CALIDAD una revisión continua a medida que se crea el producto (diseño o código). El beneficio es el  inmediato descubrimiento de los errores y, en consecuencia, la mejora de la calidad del pro-ducto. En su estudio sobre la eficacia de la programación por pares, Williams y Kessler [Wil00] afir- man lo siguiente: Las evidencias anecdóticas e iniciales señalan que la programación por pares es una técnica poderosa  para generar productivamente trabajos de software de alta calidad. Los elementos de la pareja laboran y comparten sus ideas para resolver las complejidades del desarrollo del software. Realizan de manera continua inspecciones de lo que hace cada quien, lo que conduce a una forma de eliminación de de-fectos más rápida y eficiente. Además, se mantienen centrados intensamente en la tarea uno del otro. Algunos ingenieros de software dicen que la redundancia inherente construida en la programa- ción por parejas es un desperdicio de recursos. Después de todo, ¿por qué asignar dos personas a un trabajo que podría ejecutar sólo una? La respuesta a esta pregunta se encuentra en la sec-ción 15.3.2. Si la calidad del producto del trabajo generado como consecuencia de la programa-ción en parejas es mucho mejor que el trabajo de un individuo, los ahorros relacionados con la calidad justifican de sobra la “redundancia” implícita en la programación por parejas. Aun cuando las revisiones estén bien organizadas y se lle- ven a cabo de manera apropiada, no es mala idea dar a  los revisores una “criba”. Es decir, es útil tener una lista de verifica-ción que dé a cada revisor las preguntas que debe plantear acerca del producto específico del trabajo que se revisa. Una de las listas más completas es la desarrollada por la NASA  en el Centro Goddard de Vuelos Espaciales, disponible en la direc-ción http://sw-assurance.gsfc.nasa.gov/disciplines/qua-lity/index.php Hay otras listas útiles de revisión técnica que han sido propuestas  por las siguientes entidades:Process Impact (www.processimpact.com/pr_goodies. shtml) Software Dioxide (www.softwaredioxide.com/Channels/ ConView.asp?id=6309) Macadamian (www.macadamian.com)The Open Group Architecture Review Checklist (www.open- group.org/architecture/togaf7-doc/arch/p4/comp/clists/syseng.htm) DFAS (puede descargarse, www.dfas.mil/technology/ pal/ssps/docstds/spm036.doc)INFORMACIÓN Listas de verificación para revisión  15.6 R EVISIONES  TÉCNICAS  FORMALES Una revisión técnica formal (RTF) es una actividad del control de calidad del software realizada  por ingenieros de software (y otras personas). Los objetivos de una RTF son: 1) descubrir los  errores en funcionamiento, lógica o implementación de cualquier representación del software; 2) verificar que el software que se revisa cumple sus requerimientos; 3) garantizar que el soft-ware está representado de acuerdo con estándares predefinidos; 4) obtener software desarro-llado de manera uniforme y 5) hacer proyectos más manejables. Además, la RTF sirve como método de capacitación, pues permite que los ingenieros principiantes observen distintos enfo-ques de análisis, diseño e implementación del software. La RTF también funciona para estimu-lar el respaldo y la continuidad debido a que varias personas se familiarizan con software que de otra manera no hubieran visto. La RTF en realidad es una clase que incluye walkthroughs e inspecciones. Cada RTF se reali- za como una reunión y tendrá éxito sólo si se planea, controla y ejecuta en forma apropiada. En las secciones que siguen se presentan lineamientos similares a aquellos usados para un walk-through, como representativos de la revisión técnica formal. Si el lector tiene interés en las ins-Cita: “No hay nada más urgente para  alguien que corregir el trabajo de los demás.” Mark Twain 15Pressman(354-367).indd   36215Pressman(354-367).indd   362 14/1/10   16:53:4414/1/10   16:53:44