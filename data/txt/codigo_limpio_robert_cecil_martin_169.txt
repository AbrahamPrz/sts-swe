desechable que creábamos para asegurarnos de que nuestros programas funcionaban. escribíamos clases y métodos, y después código ad hoc para probarlos, lo que implicaba algún tipo de programa controlador que nos permitiera interactuar manualmente con el programa que habíamos escrito. recuerdo crear un programa de c++ para un sistema incrustado de tiempo real a mediados de la década de 1990. el programa era un sencillo temporizador con la siguiente firma: void timer::schedulecommand(command* thecommand, int milliseconds) la idea era sencilla; el método execute de command se ejecutaba en un nuevo subproceso tras el número especificado de milisegundos. el problema era cómo probarlo. confeccioné un sencillo programa controlador que escuchaba al teclado. cada vez que se introducía un carácter, se programaba un comando que escribía el mismo carácter cinco segundos después. introduje una rítmica melodía en el teclado y esperé a que se reprodujera en pantalla cinco segundos después: «i… want-a-girl… just… like-the-girl-who-marr… ied… dear… old… dad.» incluso tarareé la melodía mientras pulsaba la tecla, y la volví a cantar cuando aparecieron los puntos en la pantalla. ésa fue mi prueba. cuando vi que funcionaba y se lo mostré a mis compañeros, me deshice del código de prueba. como he afirmado, nuestra profesión ha evolucionado mucho. ahora crearía una prueba que garantizara el funcionamiento de hasta el más mínimo detalle del código. aislaría el código del sistema operativo en lugar de invocar las funciones estándar de temporización. las imitaría para tener control total sobre el tiempo. programaría comandos que definieran indicadores booleanos y avanzaría el tiempo, para observar los indicadores y asegurarme de que pasaran de false a true al cambiar el tiempo al valor correcto. cuando superara una serie de pruebas, comprobaría que fueran adecuadas para todo el que tuviera que trabajar con el código. me aseguraría de comprobar las pruebas y el código en el mismo paquete. sí, hemos 170