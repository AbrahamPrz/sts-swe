capítulo 17 estrategias de prueba de software 393 graría m6. luego se construyen las rutas de control central y derecha. la integración primero en anchura incorpora todos los componentes directamente subordinados en cada nivel, y se mueve horizontalmente a través de la estructura. de la figura, los componentes m2, m3 y m4 se integra- rían primero. le sigue el siguiente nivel de control, m5, m6, etc. el proceso de integración se realiza en una serie de cinco pasos: 1. el módulo de control principal se usa como un controlador de prueba y los representan- tes (stubs) se sustituyen con todos los componentes directamente subordinados al mó-dulo de control principal. 2. dependiendo del enfoque de integración seleccionado (es decir, primero en profundidad o anchura), los representantes subordinados se sustituyen uno a la vez con componen- tes reales. 3. las pruebas se llevan a cabo conforme se integra cada componente. 4. al completar cada conjunto de pruebas, otro representante se sustituye con el compo- nente real. 5. las pruebas de regresión (que se analizan más adelante en esta sección) pueden reali- zarse para asegurar que no se introdujeron nuevos errores. el proceso continúa desde el paso 2 hasta que se construye todo la estructura del pro- grama. la estrategia de integración descendente verifica los principales puntos de control o de deci- sión al principio en el proceso de prueba. en una estructura de programa “bien factorizada”, la toma de decisiones ocurre en niveles superiores en la jerarquía y , por tanto, se encuentra pri- mero. si existen grandes problemas de control, el reconocimiento temprano es esencial. si se selecciona la integración primero en profundidad, es posible implementar y demostrar un fun-cionamiento completo del software. la demostración temprana de la capacidad funcional es un constructor de confianza para todos los participantes. pareciera que la estrategia descendente no tiene complicaciones, pero, en la práctica, pueden surgir problemas logísticos. el más común de éstos ocurre cuando se requiere procesamiento en niveles bajos en la jerarquía a fin de probar de manera adecuada los niveles superiores. los representantes (stubs) sustituyen los módulos de bajo nivel al comienzo de la prueba descen-dente; por tanto, ningún dato significativo puede fluir hacia arriba en la estructura del programa. a la persona que realiza la prueba le quedan tres opciones: 1) demorar muchas pruebas hasta que los representantes se sustituyan con módulos reales, 2) desarrollar resguardos que realicen funciones limitadas que simulen al módulo real o 3) integrar el software desde el fondo de la jerarquía y hacia arriba. el primer enfoque (demorar las pruebas hasta que los representantes se sustituyan con mó- dulos reales) puede hacerle perder algo de control sobre la correspondencia entre pruebas es-pecíficas y la incorporación de módulos específicos. esto puede conducir a dificultades para determinar la causa de los errores y tiende a violar la naturaleza enormemente restrictiva del enfoque descendente. el segundo enfoque vale la pena, pero puede conducir a una sobrecarga significativa conforme los representantes se vuelven cada vez más complejos. el tercero, lla-mado integración ascendente, se analiza en los siguientes párrafos. integración ascendente. la prueba de integr ación ascendente, como su nombre implica, co- mienza la construcción y la prueba con módulos atómicos (es decir, componentes en los niveles inferiores dentro de la estructura del programa). puesto que los componentes se integran de abajo hacia arriba, la funcionalidad que proporcionan los componentes subordinados en deter-minado nivel siempre está disponible y se elimina la necesidad de representantes (stubs). una estrategia de integración ascendente puede implementarse con los siguientes pasos:¿cuáles son los pasos para la integración descendente?? ¿qué problemas pueden encontrarse cuando se elige la integración descendente?? 17pressman(383-410).indd  39317pressman(383-410).indd  393 21/1/10  10:59:2221/1/10  10:59:22