public void testSimpleDoublePresent() throws Exception { Args args = new Args(“x##”, new String[](“-x”, “42.3”}); assertEquals(1, args.cardinality()); assertTrue(args.has(‘x’)); assertEquals(42.3, args.getDouble(‘x’), .001); } public void testInvalidDouble() throws Exception { try { new Args(“x##”, new String []{“-x”, “Forty two”}); fail(); } catch (ArgsException e) { assertEquals(ArgsException.ErrorCode.INVALID_DOUBLE, e.getErrorCode()); assertEquals(‘x’, e.getErrorArgumentId()); assertEquals(“Forty two”, e.getErrorParameter()); } } public void testMissingDouble() throws Exception { try { new Args(“x##”, new String[]{“-x”}); fail(); } catch (ArgsException e) { assertEquals(ArgsException.ErrorCode.MISSING_DOUBLE, e.getErrorCode()); assertEquals(‘x’, e.getErrorArgumentId()); } } } Listado 14-14 ArgsExceptionTest.java. public class ArgsExceptionTest extends TestCase { public void testUnexpectedMessage() throws Exception { ArgsException e = new ArgsException(ArgsException.ErrorCode.UNEXPECTED_ARGUMENT, ‘x’, null); assertEquals(“Argument -x unexpected.”, e.errorMessage()); } public void testMissingStringMessage() throws Exception { ArgsException e = new ArgsException(ArgsException.ErrorCode.MISSING_STRING, ‘x’, null); assertEquals(“Could not find string parameter for –x.”, e.errorMessage()); } public void testInvalidIntegerMessage() throws Exception { ArgsException e = new ArgsException(ArgsException.ErrorCode.INVALID_INTEGER, 312