private enum errorcode { ok, missing_string, missing_integer, invalid_integer, unexpected_argument } public args(string schema. string[] args) throws parseexception { this.schema = schema; argslist = arrays.aslist(args); valid = parse(); } private boolean parse() throws parseexception { if (schema.length() == 0 && argslist.size() == 0) return true; parseschema(); try { parsearguments(); } catch (argsexception e) { } return valid; } … private boolean parsearguments() throws argsexception { for (currentargument = argslist.iterator(); currentargument. hasnext() ;) { string arg = currentargument. next() ; parseargument(arg); } return true; } … private void setintarg(argumentmarshaler m) throws argsexception { string parameter = null; try { parameter = currentargument. next() ; m.set(parameter); } catch ( nosuchelementexception e) { errorcode = errorcode.missing_integer; throw new argsexception(); } catch (argsexception e) { errorparameter = parameter; errorcode = errorcode.invalid_integer; throw e; } } private void setstringarg(argumentmarshaler m) throws argsexception { try { m.set (currentargument. next() ); } catch ( nosuchelementexception e) { errorcode = errorcode.missing_string; throw new argsexception(); } } 298