private enum ErrorCode { OK, MISSING_STRING, MISSING_INTEGER, INVALID_INTEGER, UNEXPECTED_ARGUMENT } public Args(String schema. String[] args) throws ParseException { this.schema = schema; argsList = Arrays.asList(args); valid = parse(); } private boolean parse() throws ParseException { if (schema.length() == 0 &&  argsList.size()  == 0) return true; parseSchema(); try { parseArguments(); } catch (ArgsException e) { } return valid; } … private boolean parseArguments() throws ArgsException { for (currentArgument =  argsList.iterator();  currentArgument. hasNext() ;) { String arg = currentArgument. next() ; parseArgument(arg); } return true; } … private void setIntArg(ArgumentMarshaler m) throws ArgsException { String parameter = null; try { parameter = currentArgument. next() ; m.set(parameter); } catch ( NoSuchElementException  e) { errorCode = ErrorCode.MISSING_INTEGER; throw new ArgsException(); } catch (ArgsException e) { errorParameter = parameter; errorCode = ErrorCode.INVALID_INTEGER; throw e; } } private void setStringArg(ArgumentMarshaler m) throws ArgsException { try { m.set (currentArgument. next() ); } catch ( NoSuchElementException  e) { errorCode = ErrorCode.MISSING_STRING; throw new ArgsException(); } } 298