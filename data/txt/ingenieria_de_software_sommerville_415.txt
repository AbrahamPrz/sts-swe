398 capítulo 15 ■ garantía de confiabilidad y seguridad validación de sistemas concurrentes, que son notoriamente difíciles de probar debido a su sensibilidad al tiempo. el comprobador puede explorar transiciones concurrentes entremezcladas y descubrir problemas potenciales. un conflicto clave en la comprobación de modelos es la creación del modelo del sistema. si el modelo debe crearse manualmente (a partir de un documento de requeri-mientos o de diseño), es un proceso costoso, pues la elaboración del modelo requiere de gran cantidad de tiempo. además, existe la posibilidad de que el modelo creado no sea un modelo preciso de los requerimientos o del diseño. por lo tanto, es mejor si el modelo puede diseñarse automáticamente a partir del código fuente del programa. el sistema java pathfinder (visser et al., 2003) es un ejemplo de un sistema de comprobación de modelo que trabaja directamente desde una representación de código java. la comprobación del modelo es muy costosa desde el punto de vista computacional, pues usa un enfoque exhaustivo para comprobar todas las rutas a lo largo del modelo del sistema. conforme aumenta el tamaño del sistema, sucede lo mismo con el número de estados, con un consecuente aumento en el número de rutas a comprobar. esto significa que, para sistemas grandes, la comprobación del modelo podría resultar impráctica, debido al tiempo de cómputo requerido para operar las comprobaciones. sin embargo, a medida que mejoran los algoritmos que identifican aquellas partes del estado que no se han explorado para comprobar una propiedad particular, se volverá cada vez más práctico usar con frecuencia la comprobación del modelo en el desarrollo de sistemas críticos. en realidad, aunque no es aplicable a sistemas organizacionales orientados a datos, puede usarse para verificar sistemas de software embebidos que se modelan como máquinas de estado. 15.1.3 análisis estático automático como se estudió en el capítulo 8, las inspecciones de programa están dirigidas con regularidad por listas de verificación de errores y heurística. éstas identifican errores comunes en diferentes lenguajes de programación. para algunos errores y heurísticas, es posible automatizar el proceso de comprobar programas contra dichas listas, lo que da por resultado el desarrollo de analizadores estáticos automatizados en que es posible encontrar fragmentos de código que sean incorrectos. las herramientas de análisis estático trabajan sobre el código fuente de un sistema y, almenos para ciertos tipos de análisis, no se requieren más entradas. esto significa que los programadores no necesitan aprender notaciones especializadas para escribir especificacio-nes de programa para que los beneficios del análisis sean claros de inmediato. esto hace que el análisis estático automatizado se introduzca con más facilidad en un proceso de desarrollo, que la verificación formal o la comprobación de modelo. por lo tanto, quizás es la técnica de análisis estático de mayor uso.construcción del modelo requerimientos, diseño o programa especificación de la propiedadmodelo de sistema de estado finito extendido propiedades deseadas del sistemacomprobador modelo confirmación o contraejemplo figura 15.1 comprobación del modelo m15_sommerville_ingenieria_1ed_se_393-422.indd  398m15_sommerville_ingenieria_1ed_se_393-422.indd  398 3/18/11  5:01:19 pm3/18/11  5:01:19 pm