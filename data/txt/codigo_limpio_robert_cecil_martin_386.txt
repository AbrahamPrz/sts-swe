los argumentos de línea de comandos se analizan en la primera línea ejecutable de fitnesse. los valores predeterminados de dichos argumentos se especifican al inicio de la clase argument . no tiene que buscar instrucciones como la siguiente en los niveles inferiores del sistema: if (arguments.port == 0) // usar 80 de forma predeterminada las constantes de configuración se encuentran en un nivel superior y son fáciles de cambiar. se pasan al resto de la aplicación. los niveles inferiores de la aplicación no poseen los valores de estas constantes. g36: evitar desplazamientos transitivos por lo general, no es recomendable que un módulo sepa demasiado sobre sus colaboradores. en concreto, si a colabora con b y b con c, no queremos que los módulos que usan a sepan nada sobre c (por ejemplo, o queremos a.getb().getc().dosomething(); ). es lo que en ocasiones se denomina ley de demeter. los programadores pragmáticos lo denominan crear código silencioso [115] . en cualquier caso, se trata de garantizar que los módulos sólo tienen conocimiento de sus colaboradores inmediatos y no del mapa de navegación completo del sistema. si varios módulos usan alguna variante de la instrucción a.getb().getc() , sería complicado cambiar el diseño y la arquitectura para intercalar q entre b y c. tendría que localizar todas las instancias de a.getb().getc() y convertirlas a a.getb().getq().getc() . es la forma en que las arquitecturas se vuelven rígidas. demasiados módulos saben demasiado sobre la arquitectura. por el contrario, queremos que nuestros colaboradores intermedios ofrezcan todos los servicios que necesitamos. no debemos deambular por el gráfico de objetos del sistema en busca del método que necesitamos invocar. bastaría con poder usar: mycollaborator.dosomething(). java 387