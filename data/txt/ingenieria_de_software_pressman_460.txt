capítulo 18 prueba de aplicaciones convencionales 429 18.7 p rueba basada en modelo la prueba basada en modelo (pbm) es una técnica de prueba de caja negra que usa la informa- ción contenida en el modelo de requerimientos como la base para la generación de casos de prueba. en muchos casos, la técnica de prueba basada en modelo usa diagramas de estado uml, un elemento del modelo de comportamiento (capítulo 7), como la base para el diseño de los casos de prueba. 7 la técnica pbm requiere cinco pasos: 1. analizar un modelo de comportamiento existente par a el software o crear uno. recuerde que un modelo de comportamiento indica cómo responderá el software a los eventos o estímulos externos. para crear el modelo, debe realizar los pasos expues-tos en el capítulo 7: 1) evaluar todos los casos de uso para comprender por completo la secuencia de interacción dentro del sistema, 2) identificar los eventos que impul-sen la secuencia de interacción y entender cómo dichos eventos se relacionan con objetos específicos, 3) crear una secuencia para cada caso de uso, 4) construir un diagrama de estado uml para el sistema (por ejemplo, véase la figura 7.6), y 5) revisar el modelo de comportamiento para verificar precisión y congruencia. 2. recorr er el modelo de comportamiento y especificar las entradas que forza- rán al software a realizar la transición de estado a estado. las entradas dispara- rán eventos que harán que ocurra la transición. 3. re visar el modelo de comportamiento y observar las salidas esperadas,  conforme el software realiza la transición de estado a estado. recuerde que  cada transición de estado se dispara mediante un evento y que, como consecuencia de la transición, se invoca alguna función y se crean salidas. para cada conjunto de entra-das (casos de prueba) especificado en el paso 2, las salidas esperadas se especifican como se caracterizan en el modelo de comportamiento. “una suposición fundamental de esta prueba es que existe cierto mecanismo, un oráculo de prueba, que determinará si los resultados de una prueba de ejecución son o no correctos” [dac03]. en esencia, un oráculo de prueba establece la base para cualquier determinación de lo correcto de la salida. en la mayoría de los casos, el oráculo es el modelo de requerimientos, pero también podría ser otro documento o aplicación, datos registrados en cualquier otro lado o, incluso, un experto humano. 4. ejecutar los casos de prueba. las pruebas pueden ejecutarse manualmente o crearse y ejecutarse un guión de prueba usando una herramienta de prueba. 5. compar ar los resultados reales y esperados y adoptar una acción correctiva según se requiera. la pbm ayuda a descubrir errores en el comportamiento del software y, como consecuencia, es extremadamente útil cuando se prueban aplicaciones impulsadas por un evento. 18.8 p rueba para entornos , arquitecturas  y aplicaciones especializados en ocasiones, los lineamientos y enfoques únicos para pruebas se garantizan cuando se consi- deran entornos, arquitecturas y aplicaciones especializados. aunque las técnicas de prueba estudiadas anteriormente en este capítulo, y en los capítulos 19 y 20, con frecuencia pueden 7 la prueba basada en modelo también puede usarse cuando los requerimientos del software se representan con tablas de decisión, gramáticas o cadenas de markov [dac03].cita: “es suficientemente difícil encontrar un error en el código cuando se le busca; pero es todavía más difícil cuando se supone que el código está libre de errores.” steve mcconnell 18pressman(411-436).indd  42918pressman(411-436).indd  429 21/1/10  10:58:5921/1/10  10:58:59