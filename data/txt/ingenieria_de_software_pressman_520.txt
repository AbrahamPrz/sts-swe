CAPÍTULO 21  MODELADO Y VERIFICACIÓN FORMAL 489 estar en uno de muchos estados y cada uno representa un modo de comportamiento observable  de manera externa. Sin embargo, una definición diferente para el término estado se usa en el  lenguaje Z (sección 21.7.2). En Z (y en lenguajes relacionados), el estado de un sistema se re-presenta por los datos almacenados del sistema (por ende, Z sugiere un número mucho mayor de estados, lo que representa cada posible configuración de los datos). Al usar la última defini-ción en el ejemplo del programa de tabla simbólica, el estado es la tabla simbólica. El concepto final es el de operación. Ésta es una acción que tiene lugar dentro de un sistema  y que lee o escribe datos. Si el programa de tabla simbólica tiene que ver con agregar y remover nombres de la tabla simbólica, entonces se asociará con dos operaciones: una operación para add() (agregar) un nombre específico a la tabla simbólica y otra para remove() (remover) un nombre existente de la tabla. 6 Si el programa proporciona la facilidad para comprobar si  un nombre específico está contenido en la tabla, entonces habría una operación que regresaría alguna indicación acerca de si el nombre está en la tabla. Pueden asociarse tres tipos de condiciones con las operaciones: invariantes, precondiciones  y poscondiciones. Una invariante define lo que se garantiza que no cambia. Por ejemplo, la tabla  simbólica tiene una invariante que afirma que el número de elementos siempre es menor que o igual a MaxIds. Una precondición define las circunstancias en las cuales es válida una operación  particular. Por ejemplo, la precondición para una operación que agrega un nombre a una tabla simbólica de identificadores de personal es válida sólo si el nombre que se agrega no está con-tenido en la tabla y también si hay menos de MaxIds identificadores de personal en ella. La  poscondición de una operación define lo que se garantiza que es verdadero hasta completar una operación. Esto se define por su efecto sobre los datos. Para la operación add( ), la poscondición especificaría matemáticamente que la tabla aumentó con el nuevo identificador. Ejemplo 2: un manipulador de bloques.  Una de las partes más importantes de un sistema  operativo simple es el subsistema que mantiene los archivos creados por los usuarios. Parte del subsistema de llenado es el manipulador de bloques. El almacén de archivos está compuesto de  bloques de almacenamiento que se mantienen en un dispositivo de almacenamiento de archi-vos. Durante la operación de la computadora, se crearán y borrarán archivos, lo que requiere adquisición y liberación de bloques de almacenamiento. Para poder lidiar con esto, el subsis-tema de llenado mantendrá un reservorio de bloques no utilizados (libres) y seguirá la pista de los bloques que estén en uso actual. Cuando los bloques se liberan de un archivo borrado, por  lo  general se agregan a una fila de bloques que esperan para incorporarse al reservorio de bloques no utilizados. Esto se muestra en la figura 21.8, donde se presentan algunos componentes: el reservorio de bloques no utilizados, los bloques que en la actualidad constituyen los archi-vos administrados por el sistema operativo y los bloques que esperan agregarse al reservorio. Los bloques que esperan se mantienen en una fila en la que cada elemento contiene un conjunto de bloques de un archivo borrado. Para este subsistema, el estado es la colección de bloques libres, la colección de bloques usados  y la fila de bloques regresados. La invariante de datos, que se expresa en lenguaje natural, es • Ningún bloque se marcará como no utilizado y usado al mismo tiempo. • Todos los conjuntos de bloques que se conservan en la fila serán subconjuntos de la  colección de los bloques actualmente utilizados. • Ningún elemento de la fila contendrá el mismo número de bloque. • La colección de bloques utilizados y bloques que no se usan será la colección total de  bloques que constituyen los archivos.Otra forma de apreciar la noción de  estado es señalar que los datos determinan el estado. Es decir, puede examinar los datos para ver en qué estado se encuentra el sistema.CONSEJO 6 Debe observarse que agregar un nombre no puede ocurrir en el estado full (lleno) y borrar un nombre es impo- sible en el estado empty (vacío).Las técnicas de lluvia de ideas pueden funcionar bien cuando debe desarrollar una invariante de datos para una función razonablemente compleja. Haga que los miembros del equipo de software escriban enlaces, restricciones y limitaciones para la función; luego, combínelas y edítelas.CONSEJO 21Pressman(478-500).indd   48921Pressman(478-500).indd   489 19/1/10   12:43:2619/1/10   12:43:26