398 parte tres administración de la calidad general, una clase encapsulada es el foco de la prueba de unidad. no obstante, las operaciones (métodos) dentro de la clase son las unidades comprobables más pequeñas. puesto que una clase puede contener algunas operaciones diferentes, y una operación particular puede existir como parte de algunas clases diferentes, las tácticas aplicadas a la prueba de unidad deben cambiar. ya no es posible probar una sola operación en aislamiento (la visión convencional de la prueba de unidad) sino más bien como parte de una clase. para ilustrarlo, considere una jerar-quía de clase en la que una operación x se define para la superclase y la heredan algunas sub-clases. cada subclase usa la operación x, pero se aplica dentro del contexto de los atributos y operaciones privados que se definieron para la subclase. dado que el contexto en el que se usa la operación x varía sutilmente, es necesario probar la operación x en el contexto de cada una de las subclases. esto significa que por lo general no es efectivo probar la operación x en forma aislada (el enfoque de prueba de unidad convencional) en el contexto orientado a objeto. la prueba de clase para software oo es el equivalente de la prueba de unidad para software convencional. a diferencia de la prueba de unidad del software convencional, que tiende a en-focarse sobre el detalle algorítmico de un módulo y en los datos que fluyen a través de la inter-faz de módulo, la prueba de clase para software oo la dirigen las operaciones encapsuladas por la clase y el comportamiento de estado de ésta. 17.4.2 prueba de integración en el contexto oo puesto que el software orientado a objeto no tiene una estructura de control jerárquico obvia, las estrategias tradicionales descendente y ascendente (sección 17.3.2) tienen poco significado. además, con frecuencia es imposible integrar las operaciones una a la vez en una clase (el en-foque de integración incremental convencional) debido a las “interacciones directa e indirecta de los componentes que constituyen la clase” [ber93]. existen dos estrategias diferentes para la prueba de integración de los sistemas oo [bin94b]. la primera, la prueba basada en hebra, integra el conjunto de clases requeridas para responder a una entrada o evento para el sistema. cada hebra se integra y prueba de manera individual. la prueba de regresión se aplica para asegurar que no ocurran efectos colaterales. el segundo enfoque de integración, la prueba basada en uso , comienza la construcción del sistema al probar dichas clases (llamadas clases independientes) que usan muy pocas clases servidor (si es que usan alguna). después de probar las clases independientes, se prueba la siguiente capa de clases, llamadas dependientes, que usan las clases independientes. esta secuencia de probar capas de clases dependientes continúa hasta que se construye todo el sistema. el uso de controladores y representantes también cambia cuando se realiza la prueba de integración de los sistemas oo. los controladores pueden usarse para probar operaciones en el nivel más bajo, y para la prueba de todos los grupos de clases. también puede usarse un con-trolador para sustituir la interfaz de usuario, de modo que las pruebas de funcionalidad del sistema puedan realizarse antes de la implementación de la interfaz. los representantes ( stubs) pueden usarse en situaciones donde se requiere la colaboración entre clases pero donde una o más de las clases colaboradoras todavía no se implementan por completo. la prueba de grupo es un paso en la prueba de integración del software oo. aquí, un grupo de clases colaboradoras (determinadas al examinar el crc y el modelo objeto relacional) se ejercita al diseñar casos de prueba que intentan descubrir errores en las colaboraciones. 17.5 e strategias de prueba para webapps la estrategia para probar webapps adopta los principios básicos para todas las pruebas de soft- ware y aplica una estrategia y tácticas que se usan para sistemas orientados a objetos. los si-guientes pasos resumen el enfoque:punto clave la prueba de clase para software oo es análoga a la prueba de módulo para software convencional. no es aconsejable probar operaciones en aislamiento. punto clave una importante estrategia para la prueba de integración del software oo es la prueba basada en hebra. las hebras son conjuntos de clases que responden a una entrada o evento. las pruebas basadas en uso se enfocan en clases que no colaboran fuertemente con otras clases. 17pressman(383-410).indd  39817pressman(383-410).indd  398 21/1/10  10:59:2321/1/10  10:59:23