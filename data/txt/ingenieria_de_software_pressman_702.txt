capítulo 29 mantenimiento y reingeniería 671 las funciones del sistema de gestión de base de datos existente y la arquitectura de datos de la base de datos existente deben someterse a ingeniería inversa como precursor del rediseño de la capa cimiento de la base de datos. en algunos casos, se crea un nuevo modelo de datos (capítulo 6). en todo caso, la base de datos cliente-servidor se somete a reingeniería para ga-rantizar que las transacciones se ejecutan en forma consistente, que todas las actualizaciones se realizan sólo por usuarios autorizados, que las reglas empresariales núcleo se refuerzan (por ejemplo, antes de borrar el registro de un vendedor, el servidor se asegura de que no existan cuentas por pagar, contratos o comunicaciones para dicho proveedor), que las consultas pue-dan acomodarse de manera eficiente y que se establece la capacidad completa de archivado. las capas de reglas empresariales representan software residente tanto en el cliente como en el servidor. este software realiza tareas de control y coordinación para garantizar que las transacciones y consultas entre la aplicación cliente y la base de datos se conforman con el proceso empresarial establecido. las capas de aplicaciones cliente implementan funciones empresariales que requieren gru- pos específicos de usuarios finales. en muchas instancias, una aplicación mainframe se seg-menta en algunas aplicaciones de escritorio más pequeñas sometidas a reingeniería. la comu-nicación entre aplicaciones de escritorio (cuando sea necesario) se controla mediante la capa de reglas empresariales. un análisis profundo del diseño y reingeniería de software cliente-servidor se deja para libros dedicados a la materia. si tiene más interés, consulte [van02], [cou00] u [orf99]. 29.8.2 ingeniería hacia adelante para arquitecturas orientadas a objetos la ingeniería de software orientada a objetos se ha convertido en el paradigma de desarrollo elegido por muchas organizaciones de software. pero, ¿qué hay de las aplicaciones existentes que se desarrollaron usando métodos convencionales? en algunos casos, la respuesta es dejar tales aplicaciones “como están”. en otras, las aplicaciones antiguas deben someterse a reinge-niería, de modo que puedan integrarse con facilidad en sistemas grandes orientados a objetos. la reingeniería de software convencional en una implementación orientada a objeto usa muchas de las mismas técnicas estudiadas en la parte 2 de este libro. primero, el software exis-tente se somete a ingeniería inversa para que puedan crearse modelos adecuados de datos, funciones y comportamientos. si el sistema sometido a reingeniería extiende la funcionalidad o comportamiento de la aplicación original, se crean casos de uso (capítulos 5 y 6). los modelos de datos creados durante la ingeniería inversa se usan entonces en conjunción con el modelado crc (capítulo 6) para establecer la base para la definición de clases. se definen entonces las jerarquías de clase, modelos objeto-relacional, modelos objeto- comportamiento y subsistemas, y se comienza el diseño orientado a objetos. conforme avanza la ingeniería hacia adelante orientada a objetos desde el análisis hacia el diseño, puede invocarse un modelo de proceso isbc (capítulo 10). si la aplicación existente reside dentro de un dominio que ya está poblado con muchas aplicaciones orientadas a objetos, es probable que exista una robusta librería de componentes y que pueda usarse durante la in-geniería hacia adelante. para aquellas clases que deban someterse a ingeniería desde cero, es posible reutilizar algo- ritmos y estructuras de datos de la aplicación convencional existente. no obstante, las mismas deben rediseñarse para estar de acuerdo con la arquitectura orientada a objetos. 29.9 e conomía de la reingeniería en un mundo perfecto, todo programa no mantenible se retiraría de inmediato para sustituirlo con aplicaciones sometidas a reingeniería de alta calidad desarrolladas mediante modernas 29pressman(655-674).indd  67129pressman(655-674).indd  671 26/1/10  17:33:0326/1/10  17:33:03