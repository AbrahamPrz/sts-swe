CAPÍTULO 10  DISEÑO EN EL NIVEL DE COMPONENTES 247 donde [condición de guardia]  se escribe en Lenguaje de Restricción de Objetos (LRO)5 y especifi- ca cualesquiera condiciones que deban cumplirse antes de que pueda enviarse el mensaje; ex- presión de secuencia  es un valor entero (u otro indicador de ordenación, por ejemplo, 3.1.2) que  indica el orden secuencial en el que se envía el mensaje; (devuelve valor)  es el nombre de la infor- mación que devuelve la operación invocada por el mensaje; nombre del mensaje  identifica la ope- ración que va a invocarse y (lista de argumentos)  es la lista de atributos que se pasan a la opera- ción. Paso 3b. Identificar interf aces apropiadas para cada componente.  En el contexto del  diseño en el nivel de componentes, una interfaz UML es un “grupo de operaciones visibles ex- ternamente (para el público). La interfaz no contiene estructura interna, ni atributos ni asocia-ciones…” [Ben02]. Dicho con más formalidad, una interfaz es el equivalente de una clase abs-tracta que pro vee una conexión controlada entre clases de diseño. En la figura 10.1 se ilustra la  elaboración de interfaces. En esencia, las operaciones definidas para la clase de diseño se cla-sifican en una o más clases abstractas. Cada operación dentro de la clase abstracta (la interfaz) debe ser cohesiva, es decir, debe tener un procesamiento que se centre en una función o subfun-ción limitada. En relación con la figura 10.1, puede afirmarse que la interfaz IniciarTrabajo no tiene sufi- ciente cohesión. En realidad, ejecuta tres subfunciones diferentes: elaborar una orden de tra-bajo, verificar la prioridad del trabajo y pasar el trabajo a producción. La interfaz debe redise-ñarse. Un enfoque podría consistir en volver a estudiar las clases de diseño y definir una nueva, OrdendeTrabajo, que se haría cargo de todas las actividades asociadas con la formación de una orden de trabajo. La operación ElaborarOrdendeTrabajo( ) se vuelve parte de esa clase. De  manera similar, se definiría una clase FiladeTrabajos que incorporaría la operación Verificar- Prioridad( ). Una clase TrabajodeProducción podría incorporar toda la información asociada con un trabajo que pasara a las instalaciones de producción. La interfaz IniciarTrabajo podría  adoptar la forma que se muestra en la figura 10.7. Ahora la interfaz IniciarTrabajo es cohesiva y  se centra en una función. Las interfaces asociadas con TrabajodeProducción, OrdendeTra-bajo y FiladeTrabajos también tienen un solo objetivo. Paso 3c. Elabor  ar atributos y definir tipos y estructuras de datos requeridos para  implantarlos.   En general, las estructuras y tipos de datos usados para definir atributos se  definen en el contexto del lenguaje de programación que se va a usar para la implantación. El UML define un tipo de datos del atributo que usa la siguiente sintaxis: nombre : tipo-de-expresión = valor-inicial {cadena de propiedades} 5 En el apéndice 1 se analiza brevemente el LRO.:Trabajode Producción :OrdendeTrabajo :FiladeTrabajos1: ElaborarTrabajo (número de ordende trabajo)2: EnviarTrabajo(número de orden de trabajo)FIGURA 10.6 Diagrama de  colaboración con mensajería 10Pressman(234-264).indd   24710Pressman(234-264).indd   247 26/1/10   17:33:2026/1/10   17:33:20