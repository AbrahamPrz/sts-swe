stringvalue = s; } public string getstring() { return stringvalue == null ? “” : stringvalue; } } de nuevo, estos cambios se realizaron individualmente para conservar las pruebas, aunque fallaran. si una prueba fallaba, me aseguraba de que fuera correcta antes de continuar con el siguiente cambio. ya debería reconocer mi intención. tras incluir el comportamiento de señalización en la clase base argumentmarshaler , comencé a transferirlo a las variantes, para de esta forma mantener el funcionamiento mientras cambiaba gradualmente la forma del programa. el siguiente paso consistía en transferir la funcionalidad del argumento int a argumentmarshaler . de nuevo, no hubo sorpresas. private map<character, argumentmarshaler > intargs = new hashmap<character, argumentmarshaler >(); … private void parseintegerschemaelement(char elementid) { intargs.put(elementid, new integerargumentmarshaler() ); } … private void setintarg(char argchar) throws argsexception { currentargument++; string parameter = null; try { parameter = args[currentargument]; intargs. get (argchar). setinteger (integer.parseint(parameter)); } catch (arrayindexoutofboundsexception e) { valid = false; errorargumentid = argchar; errorcode = errorcode.missing_integer; throw new argsexception(); } catch (numberformatexception e) { valid = false; errorargumentid = argchar; errorparameter = parameter; errorcode = errorcode.invalid_integer; throw new argsexception(); } } … public int getint(char arg) { args.argumentmarshaler am = intargs.get(arg); return am == null ? 0 : am.getinteger(); } 280