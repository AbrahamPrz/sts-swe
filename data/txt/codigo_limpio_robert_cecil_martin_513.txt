126 127 public int getyear() { 128 return year; 129 } 130 131 public month getmonth() { 132 return month; 133 } 134 135 public int getdayofmonth() { 136 return day; 137 } 138 139 protected day getdayofweekforordinalzero() {return day.saturday;} 140 141 public boolean equals(object object) { 142 if (!(object instanceof daydate)) 143 return false; 144 145 daydate date = (daydate) object; 146 return date.getordinalday() == getordinalday(); 147 } 148 149 public int hashcode() { 150 return getordinalday(); 151 } 152 153 public int compareto(object other) { 154 return dayssince((daydate) other); 155 } 156 157 private int calcordinal(int day, month month, int year) { 158 int leapdaysforyear = dateutil.leapyearcount(year - 1); 159 int daysuptoyear = (year - minimum_year_supported) * 365 + leapdaysforyear; 160 int daysuptomonth = aggregate_days_to_end_of_preceding_month[month.toint()]; 161 if (dateutil.isleapyear(year) && month.toint() > february.toint()) 162 daysuptomonth++; 163 int daysinmonth = day - 1; 164 return daysuptoyear + daysuptomonth + daysinmonth + earliest_date_ordinal; 165 } 166 167 private void calcdaymonthyear() { 168 int days = ordinalday - earliest_date_ordinal; 514