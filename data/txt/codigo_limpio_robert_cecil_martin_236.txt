comprender y ofrece diversas formas de separar las preocupaciones. pongamos por caso el modelo servlet estándar de aplicaciones web. estos sistemas se ejecutan bajo un contenedor web o ejb que gestiona parcialmente la concurrencia. los servlet se ejecutan de forma asíncrona cuando se reciben solicitudes web. el programador de los servlet no tiene que gestionar todas las solicitudes entrantes. en principio, la ejecución de cada servlet vive en un mundo propio y se desvincula del resto. evidentemente, si fuera tan sencillo, no necesitaríamos este capítulo. de hecho, la desvinculación proporcionada por los contenedores web dista mucho de ser perfecta. los programadores de servlet deben asegurarse de que sus programas sean correctos. no obstante, las ventajas estructurales del modelo de servlet son significativas. pero la estructura no es el único motivo para adoptar la concurrencia. algunos sistemas tienen limitaciones de tiempo de respuesta y producción que requieren soluciones concurrentes manuales. imagine un dispositivo para añadir información, con un solo proceso, que obtiene datos de distintos sitios web y los combina en un resumen diario. al tener un solo proceso, accede por turnos a cada sitio web y siempre termina uno antes de comenzar el siguiente. su recorrido diario debe ejecutarse en menos de 24 horas. sin embargo, al añadir nuevos sitios web, el tiempo aumenta hasta necesitarse más de 24 horas para recopilar todos los datos. el único proceso implica una prolongada espera para completar la e/s. podríamos mejorar el rendimiento con ayuda de un algoritmo de subprocesamiento múltiple que visite más de un sitio web por vez. imagine un sistema que procesa un usuario por vez y sólo requiere un segundo por cada uno. su capacidad de respuesta es válida para un número reducido de usuarios pero si aumenta, también lo hace el tiempo de respuesta del sistema. ningún usuario querrá esperar a otros 150. podríamos mejorar el tiempo de respuesta de este sistema procesando varios usuarios a la vez. imagine un sistema que interprete grandes conjuntos de datos pero que sólo ofrezca una solución completa tras procesarlos todos. se podría procesar cada conjunto de datos en un equipo distinto, para poder procesarlos todos en paralelo. 237