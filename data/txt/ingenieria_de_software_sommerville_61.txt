44  Capítulo 2 ■ Procesos de software  El cambio se agrega a los costos del desarrollo de software debido a que, por lo general,  significa que el trabajo ya terminado debe volver a realizarse. A esto se le llama reha-cer. Por ejemplo, si se analizaron las relaciones entre los requerimientos en un sistema y se identifican nuevos requerimientos, parte o todo el análisis de requerimientos tiene que repetirse. Entonces, es necesario rediseñar el sistema para entregar los nuevos requerimien-tos, cambiar cualquier programa que se haya desarrollado y volver a probar el sistema. Existen dos enfoques relacionados que se usan para reducir los costos del rehacer: 1. Evitar el cambio, donde el proceso de software incluye actividades que anticipan cam- bios posibles antes de requerirse la labor significativa de rehacer. Por ejemplo, puede  desarrollarse un sistema prototipo para demostrar a los clientes algunas características clave del sistema. Ellos podrán experimentar con el prototipo y refinar sus requeri-mientos, antes de comprometerse con mayores costos de producción de software. 2. Tolerancia al cambio, donde el proceso se diseña de modo que los cambios se ajusten  con un costo relativamente bajo. Por lo general, esto comprende algunas formas de desarrollo incremental. Los cambios propuestos pueden implementarse en incremen-tos que aún no se desarrollan. Si no es posible, entonces tal vez sólo un incremento (una pequeña parte del sistema) tendría que alterarse para incorporar el cambio.  En esta sección se estudian dos formas de enfrentar el cambio y los requerimientos cambiantes del sistema. Se trata de lo siguiente: 1. Prototipo de sistema, donde rápidamente se desarrolla una versión del sistema o una  parte del mismo, para comprobar los requerimientos del cliente y la factibilidad de  algunas decisiones de diseño. Esto apoya el hecho de evitar el cambio, al permitir que los usuarios experimenten con el sistema antes de entregarlo y así refinar sus requerimientos. Como resultado, es probable que se reduzca el número de propues-tas de cambio de requerimientos posterior a la entrega. 2. Entrega incremental, donde los incrementos del sistema se entregan al cliente para  su comentario y experimentación. Esto apoya tanto al hecho de evitar el cambio como a tolerar el cambio. Por un lado, evita el compromiso prematuro con los reque-rimientos para todo el sistema y, por otro, permite la incorporación de cambios en incrementos mayores a costos relativamente bajos.  La noción de refactorización, esto es, el mejoramiento de la estructura y organización de un programa, es también un mecanismo importante que apoya la tolerancia al cambio. Este tema se explica en el capítulo 3, que se ocupa de los métodos ágiles.Valoración de sistemas existentesDefinición de requerimientos del sistemaPropuesta de cambios al sistemaModificación de sistemas Nuevo sistemaSistemas existentesFigura 2.8 Evolución  del sistema M02_SOMMERVILLE_INGENIERIA_1ED_SE_027-055.indd   44M02_SOMMERVILLE_INGENIERIA_1ED_SE_027-055.indd   44 3/18/11   4:45:31 PM3/18/11   4:45:31 PM