402 PARTE TRES  ADMINISTRACIÓN DE LA CALIDAD rante a las fallas, es decir, las fallas del procesamiento no deben causar el cese del funciona- miento del sistema global. En otros casos, la falla de un sistema debe corregirse dentro de un periodo de tiempo específico u ocurrirán severos daños económicos. La recuperación es una prueba del sistema que fuerza al software a fallar en varias formas y  que verifica que la recuperación se realice de manera adecuada. Si la recuperación es automá-tica (realizada por el sistema en sí), se evalúa el reinicio, los mecanismos de puntos de verifica-ción, la recuperación de datos y la reanudación para correcciones. Si la recuperación requiere intervención humana, se evalúa el tiempo medio de reparación (TMR) para determinar si está dentro de límites aceptables. 17.7.2  Pruebas de seguridad Cualquier sistema basado en computadora que gestione información sensible o cause acciones que puedan dañar (o beneficiar) de manera inadecuada a individuos es un blanco de penetra-ción inadecuada o ilegal. La penetración abarca un amplio rango de actividades: hackers que  intentan penetrar en los sistemas por deporte, empleados resentidos que intentan penetrar por venganza, individuos deshonestos que intentan penetrar para obtener ganancia personal ilícita. La prueba de seguridad intenta verificar que los mecanismos de protección que se construyen  en un sistema en realidad lo protegerán de cualquier penetración impropia. Para citar a Beizar [Bei84]: “La seguridad del sistema debe, desde luego, probarse para ser invulnerable ante ata-ques frontales; pero también debe probarse su invulnerabilidad contra ataques laterales y tra-seros.” Durante la prueba de seguridad, quien realiza la prueba juega el papel del individuo que de- sea penetrar al sistema. ¡Cualquier cosa vale! Quien realice la prueba puede intentar adquirir contraseñas por medios administrativos externos; puede atacar el sistema con software a la medida diseñado para romper cualquier defensa que se haya construido; puede abrumar al sis-tema, y por tanto negar el servicio a los demás; puede causar a propósito errores del sistema con la esperanza de penetrar durante la recuperación; puede navegar a través de datos insegu-ros para encontrar la llave de la entrada al sistema. Con los suficientes tiempo y recursos, las buenas pruebas de seguridad a final de cuentas  penetran en el sistema. El papel del diseñador de sistemas es hacer que el costo de la penetra-ción sea mayor que el valor de la información que se obtendrá. 17.7.3  Pruebas de esfuerzo Los primeros pasos de la prueba del software dieron como resultado una evaluación extensa de las funciones y el rendimiento normales del programa. Las pruebas de esfuerzo se diseñan para enfrentar los programas con situaciones anormales. En esencia, la persona que realiza las prue-bas de esfuerzo pregunta: “¿cuánto podemos doblar esto antes de que se rompa?”. La prueba de esfuerzo ejecuta un sistema en forma que demanda recursos en cantidad, fre- cuencia o volumen anormales. Por ejemplo, pueden 1) diseñarse pruebas especiales que gene-ren diez interrupciones por segundo, cuando una o dos es la tasa promedio, (2) aumentarse las tasas de entrada de datos en un orden de magnitud para determinar cómo responderán las fun-ciones de entrada, 3) ejecutarse casos de prueba que requieran memoria máxima y otros recur-sos, 4) diseñarse casos de prueba que puedan causar thrashing (que es un quebranto del sistema por hiperpaginación) en un sistema operativo virtual, 5) crearse casos de prueba que puedan causar búsqueda excesiva por datos residentes en disco. En esencia, la persona que realiza la prueba intenta romper el programa. Una variación de la prueba de esfuerzo es una técnica llamada prueba de sensibilidad. En  algunas situaciones (la más común ocurre en algoritmos matemáticos), un rango muy pequeño Cita: “Si intenta encontrar verdaderos  errores del sistema y no sujeta su software a una verdadera prueba de esfuerzo, entonces es el momento de comenzar.” Boris Beizer 17Pressman(383-410).indd   40217Pressman(383-410).indd   402 21/1/10   10:59:2421/1/10   10:59:24