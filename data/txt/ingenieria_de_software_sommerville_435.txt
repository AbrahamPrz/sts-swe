418  Capítulo 15 ■ Garantía de confiabilidad y seguridad ■ La validación de la seguridad es difícil porque los requerimientos de seguridad establecen  lo que no debe ocurrir en un sistema, en lugar de lo que debe ocurrir. Más aún, los atacantes del sistema son inteligentes y, para sondear las debilidades, dedican más tiempo que el que se destina a las pruebas de seguridad. ■ La validación de la seguridad puede realizarse mediante análisis basados en la experiencia, análisis basados en herramientas o “equipos tigre”, que simulan ataques a un sistema. ■ Es importante tener un proceso certificado bien definido para el desarrollo de sistemas críticos de protección. El proceso debe incluir la identificación y la monitorización de peligros potenciales. ■ Los casos de protección y confiabilidad reúnen toda la evidencia que demuestre que un sistema es seguro y confiable. Los casos de protección se requieren cuando un regulador externo debe certificar el sistema antes de su uso. ■ Por lo general, los casos de protección se basan en argumentos estructurados. Los argumentos estructurados de protección demuestran que una condición peligrosa identificada nunca ocurrirá, al considerar todas las rutas del programa que conduzcan a una condición no protegida y al probar que la condición es insostenible. LECTURAS SUGERIDAS Software Reliability Engineering: More Reliable Software, Faster and Cheaper, 2nd edition .  Probablemente este libro sea clave para el uso de perfiles operativos y modelos de fiabilidad para la valoración de la fiabilidad. Incluye detalles de experiencias con pruebas estadísticas. (J. D. Musa, McGraw-Hill, 2004.) “NASA’s Mission Reliable”. Una explicación de cómo la NASA usa el análisis estático y la  comprobación de modelos para asegurar la fiabilidad del software de sus naves espaciales. (P. Regan y S. Hamilton, IEEE Computer, 37 (1), enero de 2004.) http:/ /dx. doi. org/ 10. 1109/ MC. 2004. 1260727. Dependability cases. Introducción basada en ejemplos a la definición de un caso de confiabilidad.  (C. B. Weinstock, J. B. Goodenough, J. J. Hudak, Software Engineering Institute, CMU/SEI-2004-TN-016, 2004.) http:/ /www. sei. cmu. edu/ publications/ documents/ 04. reports/ 04tn016. html. How to Break Web Software: Functional and Security Testing of Web Applications and Web Services .  Un libro breve que ofrece buenos y prácticos consejos sobre cómo correr pruebas de seguridad en  aplicaciones en red. (M. Andrews y J. A. Whittaker, Addison-Wesley, 2006.) “Using static analysis to find bugs”. Este ensayo describe a Findbugs, un analizador estático Java  que utiliza técnicas sencillas para encontrar violaciones potenciales a la seguridad y errores en tiempo de operación. (N. Ayewah et al., IEEE Software, 25 (5), Sept/Oct 2008.) http:/ /dx. doi. org/ 10. 1109/ MS. 2008. 130. M15_SOMMERVILLE_INGENIERIA_1ED_SE_393-422.indd   418M15_SOMMERVILLE_INGENIERIA_1ED_SE_393-422.indd   418 3/18/11   5:01:20 PM3/18/11   5:01:20 PM