72 parte uno el proceso del software 3.5.4 cristal alistar cockburn [coc05] creó la familia cristal de métodos ágiles15 a fin de obtener un enfoque de desarrollo de software que premia la “maniobrabilidad” durante lo que cockburn caracteriza como “un juego cooperativo con recursos limitados, de invención y comunicación, con el obje- tivo primario de entregar software útil que funcione y con la meta secundaria de plantear el si- guiente juego” [coc02]. para lograr la maniobrabilidad, cockburn y highsmith definieron un conjunto de metodolo- gías, cada una con elementos fundamentales comunes a todos, y roles, patrones de proceso, producto del trabajo y prácticas que son únicas para cada uno. la familia cristal en realidad es un conjunto de ejemplos de procesos ágiles que han demostrado ser efectivos para diferentes tipos de proyectos. el objetivo es permitir que equipos ágiles seleccionen al miembro de la fa-milia cristal más apropiado para su proyecto y ambiente. 3.5.5 desarrollo impulsado por las características (dic) el desarrollo impulsado por las características (dic) lo concibió originalmente peter coad y sus colegas [coa99] como modelo práctico de proceso para la ingeniería de software orientada a objetos. stephen palmer y john felsing [pal02] ampliaron y mejoraron el trabajo de coad con la descripción de un proceso adaptativo y ágil aplicable a proyectos de software de tamaño mode-rado y grande. igual que otros proyectos ágiles, dic adopta una filosofía que: 1) pone el énfasis en la colabo- ración entre los integrantes de un equipo dic; 2) administra la complejidad de los problemas y del proyecto con el uso de la descomposición basada en las características, seguida de la inte-gración de incrementos de software, y 3) comunica los detalles técnicos en forma verbal, gráfica y con medios basados en texto. el dic pone el énfasis en las actividades de aseguramiento de la calidad del software mediante el estímulo de la estrategia de desarrollo incremental, el uso de inspecciones del diseño y del código, la aplicación de auditorías de aseguramiento de la ca-lidad del software (véase el capítulo 16), el conjunto de mediciones y el uso de patrones (para el análisis, diseño y construcción). en el contexto del dic, una característica “es una función valiosa para el cliente que puede implementarse en dos semanas o menos” [coa99]. el énfasis en la definición de características proporciona los beneficios siguientes: • debido a que las características son bloques pequeños de funcionalidad que se entrega, los usuarios las describen con más facilidad, entienden cómo se relacionan entre sí y las revisan mejor en busca de ambigüedades, errores u omisiones. • las características se organizan por jerarquía de grupos relacionados con el negocio. • como una característica es el incremento de software dic que se entrega, el equipo desarrolla características operativas cada dos semanas. • el diseño y representación en código de las características son más fáciles de inspec- cionar con eficacia porque éstas son pequeñas. • la planeación, programación de actividades y seguimiento son determinadas por la jerarquía de características, y no por un conjunto de tareas de ingeniería de software adoptadas en forma arbitraria. coad y sus colegas [coa99] sugieren el esquema siguiente para definir una característica: <acción> el <resultado> <a|por|de|para> un <objeto> 15 el nombre “cristal” se deriva de los cristales de minerales, cada uno de los cuales tiene propiedades específicas de color, forma y dureza.punto clave cristal es una familia de modelos de proceso con el mismo “código genético” pero diferentes métodos para adaptarse a las características del proyecto. webref en la dirección www. featuredrivendevelopment.com/ se encuentra una amplia variedad de artículos y presentaciones sobre el dic. 03pressman(055-080).indd  7203pressman(055-080).indd  72 14/1/10  13:41:1314/1/10  13:41:13