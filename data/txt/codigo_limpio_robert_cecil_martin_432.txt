import java.io.ioexception; import java.net.serversocket; import java.net.socket; import java.net.socketexception; import common.messageutils; public class server implements runnable { serversocket serversocket; volatile boolean keepprocessing = true; public server(int port, int millisecondstimeout) throws ioexception { serversocket = new serversocket(port); serversocket.setsotimeout(millisecondstimeout); } public void run() { system.out.printf(“server starting\n”); while (keepprocessing) { try { system.out.printf(“accepting client\n”); socket socket = serversocket.accept(); system.out.printf(“got client\n”); process(socket); } catch (exception e) { handle(e); } } } private void handle(exception e) { if (!(e instanceof socketexception)) { e.printstacktrace(); } } public void stopprocessing() { keepprocessing = false; closeignoringexception(serversocket); } void process(socket socket) { if (socket == null) return; try { system.out.printf(“server: getting message\n”); string message = messageutils.getmessage(socket); system.out.printf(“server: got message: %s\n”, message); thread.sleep(1000); system.out.printf(“server: sending reply: %s\n”, message); messageutils.sendmessage(socket, “processed: ” + message); system.out.printf(“server: sent\n”); 433