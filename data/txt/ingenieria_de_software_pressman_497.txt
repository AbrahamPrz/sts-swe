466 parte tres administración de la calidad 20.5 p rueba en el nivel de componente la prueba en el nivel de componente , también llamada prueba de función, se enfoca en un con- junto de pruebas que intentan descubrir errores en funciones de las webapps. cada función de una webapp es un componente de software (implantado en uno de varios lenguajes de progra- mación o lenguajes de guiones) y puede probarse usando técnicas de caja negra (y en algunos casos de caja blanca), como se estudió en el capítulo 18. los casos de prueba en el nivel de componente con frecuencia se derivan de la entrada a formularios. una vez definidos los datos de los formularios, el usuario selecciona un botón u otro mecanismo de control para iniciar la ejecución. son usuales los siguientes métodos de di-seño de caso de prueba (capítulo 18): • partición de equivalencia. el dominio de entrada de la función se divide en categorías o clases de entrada a partir de las cuales se derivan casos de prueba. el formulario de entrada se valora para determinar cuáles clases de datos son relevantes para la función. los casos de prueba para cada clase de entrada se derivan y ejecutan, mientras que otras clases de entrada se mantienen constantes. por ejemplo, una aplicación de comercio electrónico puede implantar una función que calcule los cargos de embarque. entre una variedad de información de embarque proporcionada mediante un formulario, está el código postal del usuario. los casos de prueba se diseñan con la intención de descubrir errores en el procesamiento del código postal al especificar valores de código postal que puedan descubrir diferentes clases de errores (por ejemplo, un código postal incompleto, un código postal incorrecto, un código postal inexistente, un formato de código postal erróneo). • análisis de valor de frontera. los datos de los formularios se prueban en sus fronteras. por ejemplo, la función de cálculo de embarque anotada anteriormente solicita el número máximo de días requeridos para la entrega del producto. en el formulario se anota un mínimo de 2 días y un máximo de 14. sin embargo, las pruebas de valor de frontera pueden ingresar valores de 0, 1, 2, 13, 14 y 15 para determinar cómo reacciona la función de datos en y afuera de las fronteras de entrada válida. 9 • prueba de rutas. si la complejidad lógica de la función es alta,10 puede usarse la prueba de rutas (un método de diseño de casos de prueba de caja blanca) para garantizar que se ejercitó cada ruta independiente en el programa. además de estos métodos de diseño de casos de prueba, se usa una técnica llamada prueba de error forzado [ngu01] para derivar casos de prueba que a propósito conducen al componente obtenga recomendaciones de componentes casasegura podemos ejercitar la semántica de cada ruta.doug: mientras estás ahí, verifica el contenido que aparece en cada nodo de navegación. vinod: desde luego... y los elementos funcionales también. ¿quién prueba la usabilidad?doug: oh... el proveedor examinador coordinará la prueba de usabilidad. contratamos una firma de investigación de mercado a fin de alinear 20 usuarios comunes para al estudio de usabilidad, pero si tus chicos descubren algún conflicto de usabilidad... vinod: ya sé, pásenlos de largo.doug: gracias, vinod. 9 en este caso, un mejor diseño de entrada puede eliminar errores potenciales. el número máximo de días podría seleccionarse de un menú desplegable, lo que impide al usuario especificar entrada fuera de fronteras. 10 la complejidad lógica puede determinarse al calcular la complejidad ciclomática del algoritmo. vea el capítulo 18 para detalles adicionales. 20pressman(453-477).indd  46620pressman(453-477).indd  466 21/1/10  10:58:1021/1/10  10:58:10