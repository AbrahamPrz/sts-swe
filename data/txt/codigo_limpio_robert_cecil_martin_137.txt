rectangle r = (rectangle)shape; return r.height * r.width; } else if (shape instanceof circle) { circle c = (circle)shape; return pi * c.radius * c.radius; } throw new nosuchshapeexception(); } } los programadores orientados a objetos se quejarán de que es un ejemplo de procedimiento, y tienen razón. imagine qué pasaría si añadimos la función perimeter() a geometry . ¡las clases de formas no se verían afectadas! ¡y las demás clases que dependieran de las formas tampoco! por otra parte, si añado una nueva forma, tendría que cambiar todas las funciones de geometry . vuélvalo a leer. comprobará que las dos condiciones son diametralmente opuestas. fíjese ahora en la solución orientada a objetos del listado 6-6. aquí, el método area() es polimórfico. no se necesita una clase geometry . por tanto, si añado una nueva forma, ninguna de las funciones existentes se ven afectadas, pero si añado otra función, habrá que cambiar todas las formas [29] . listado 6-6 formas polimórficas. public class square implements shape { private point topleft; private double side; public double area() { return side*side; } public class rectangle implements shape { private point topleft; private double height; private double width; public double area() { return height * width; } } public class circle implements shape { private point center; 138