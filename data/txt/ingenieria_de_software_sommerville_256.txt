9.1 ■ procesos de evolución 239 2. si los cambios a los sistemas que operan el entorno tienen efectos inesperados que perturban la operación normal. 3. si hay cambios no anticipados a la empresa que opera el sistema, como el surgi-miento de competidores nuevos o la introducción de una nueva legislación que afecte al sistema. en tales casos, la necesidad de realizar el cambio rápidamente significa que quizá no pueda seguir el proceso formal de análisis de cambio. en vez de modificar los requerimien-tos y el diseño, se puede hacer una reparación de emergencia al programa para resolver el problema de inmediato (figura 9.6). sin embargo, el riesgo es que los requerimientos, el diseño del software y el código se vuelvan inconsistentes. aunque se trate de documentar el cambio en los requerimientos y el diseño, es posible que el software requiera reparacio-nes de emergencia adicionales, las cuales tienen prioridad sobre la documentación. con el tiempo, el cambio original se olvida y la documentación y el código del sistema nunca se realinean. por lo general, las reparaciones de emergencia del sistema tienen que completarse tan rápido como sea posible. se elige una solución rápida y viable, en lugar de la mejor solución en cuanto a la estructura del sistema. esto acelera el proceso de degeneración del software, de modo que los cambios futuros se vuelven progresivamente más difíciles y, con ello, aumenta el costo de mantenimiento. idealmente, cuando se hacen reparaciones de emergencia al código, la petición de cambio debería quedar pendiente después de reparar las fallas de código. entonces, se pueden volver a implementar de manera más cuidadosa después de mayor análisis. desde luego, el código de la reparación es reutilizable. una mejor solución al problema surgirá cuando haya más tiempo disponible para el análisis. sin embargo, en la práctica es casi inevitable que dichas mejoras tengan baja prioridad. con frecuencia se olvidan y, si se realizan más cambios al sistema, entonces se vuelve imposible reelaborar las repa-raciones de emergencia. los métodos y procesos ágiles, que se estudiaron en el capítulo 3, se utilizan tanto para la evolución del programa como para su desarrollo. de hecho, puesto que dichos métodos se basan en el desarrollo incremental, hacer la transición del desarrollo ágil a la evolución posterior a la entrega no debería tener complicaciones. las técnicas como las pruebas de regresión automatizadas son útiles cuando se realizan cambios al sistema. los cambios pueden expresarse como historias de usuario, y el involucramiento del cliente priorizará los cambios que se requieran en un sistema operacional. en resumen, la evolu-ción simplemente implica la continuación del proceso de desarrollo ágil.actualización de requerimientosdesarrollo del softwareanálisis de requerimientoscambios propuestosfigura 9.5 implementación del cambio modificar el código fuenteentregar el sistema modificadoanalizar el código fuentepeticiones de cambiofigura 9.6 proceso de reparación de emergencia m09_sommerville_ingenieria_1ed_se_234-260.indd  239m09_sommerville_ingenieria_1ed_se_234-260.indd  239 3/18/11  4:52:24 pm3/18/11  4:52:24 pm