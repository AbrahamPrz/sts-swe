controller.tic(); asserttrue(hw.heaterstate()); asserttrue(hw.blowerstate()); assertfalse(hw.coolerstate()); assertfalse(hw.hitempalarm()); asserttrue(hw.lotempalarm()); } aquí hay muchos detalles. por ejemplo, ¿para qué sirve la función tic ? de hecho, la ignoraría mientras leemos esta prueba. intente centrarse en saber si está de acuerdo en que el estado final del sistema tiene que ver con que la temperatura sea demasiado baja. al leer la prueba, la vista tiene que cambiar entre el nombre del estado comprobado y el sentido del estado comprobado. vemos heaterstate y después la vista salta a asserttrue . vemos coolerstate y nos fijamos en assertfalse . resulta tedioso y dificulta la lectura de la prueba. he conseguido mejorar la legibilidad de la prueba transformándola en el listado 9-4. listado 9-4 environmentcontrollertest.java (refactorizado) @test public void turnonlotempalarmatthreshold() throws exception { waytoocold(); assertequals(“hbchl”, hw.getstate()); } evidentemente, he ocultado el detalle de la función tic creando una función waytoocold . pero lo importante es la extraña cadena de assertequals . las mayúsculas significan activado y las minúsculas desactivado, y las letras siempre aparece en este orden: {heater, blower, cooler, hi-temp-alarm, lo-temp-alarm} . aunque prácticamente sea un incumplimiento de las reglas de asignación mental [39] , en este caso parece apropiado. una vez que conocemos el significado, la vista pasa por la cadena y podemos interpretar los resultados. la lectura de la prueba es casi un placer. fíjese en el listado 9-5 y compruebe con qué facilidad entiende las pruebas. 178