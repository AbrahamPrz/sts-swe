capítulo 17 estrategias de prueba de software 405 3. el síntoma en realidad puede no ser causado por errores (por ejemplo, imprecisiones de redondeo). 4. el síntoma puede ser causado por un error humano que no se rastrea con facilidad. 5. el síntoma puede ser resultado de problemas de temporización más que de problemas de procesamiento. 6. puede ser difícil reproducir con precisión las condiciones de entrada (por ejemplo, una aplicación en tiempo real en la que el orden de la entrada esté indeterminado). 7. el síntoma puede ser intermitente, particularmente común en sistemas embebidos que acoplan hardware y software de manera inextricable. 8. el síntoma puede deberse a causas que se distribuyen a través de algunas tareas que corren en diferentes procesadores. durante la depuración, encontrará errores que varían desde los ligeramente desconcertantes (por ejemplo, un formato de salida incorrecto) hasta los catastróficos (por ejemplo, la falla del sistema, que pro voca serio daño económico o físico). conforme aumentan las consecuencias de un error, también aumenta la cantidad de presión por encontrar la causa. con frecuencia, la presión fuerza a algunos de los desarrolladores del software a corregir un error y, al mismo tiempo, introducir dos más. 17.8.2 consideraciones psicológicas por desgracia, parece haber cierta evidencia de que la hazaña de la depuración es un rasgo humano innato. algunas personas son buenas en ello y otras no lo son. aunque la evidencia experimental de la depuración está abierta a muchas interpretaciones, se reportan grandes va-riaciones en la habilidad depuradora para programadores con la misma educación y experien-cia. al comentar acerca de los aspectos humanos de la depuración, shneiderman [shn80] afirma:pruebas de regresión correcciones causas identiﬁcadaspruebas adicionales causas sospechosasresultados depuracióncasos de pruebafigura 17.7 el proceso de depuración “todo mundo sabe que la depuración es el doble de difícil que escribir un programa por primera vez. de modo que, si se es tan inteligente como se puede ser cuando se escribe el programa, ¿cómo es que se depurará?”. brian kernighan? 17pressman(383-410).indd  40517pressman(383-410).indd  405 21/1/10  10:59:2521/1/10  10:59:25