8 CAPÍTULO 1  EL SOFTWARE Y LA INGENIERÍA DE SOFTWARE sarrollando un proceso que sea ágil y suficientemente adaptable para que acepte los cambios  profundos en la tecnología y las reglas de los negocios que seguramente surgirán en la década siguiente. 1.1.3 Software heredado Cientos de miles de programas de cómputo caen en uno de los siete dominios amplios de apli-cación que se estudiaron en la subsección anterior. Algunos de ellos son software muy nuevo, disponible para ciertos individuos, industria y gobierno. Pero otros programas son más viejos, en ciertos casos muy viejos. Estos programas antiguos —que es frecuente denominar software heredado — han sido centro  de atención y preocupación continuas desde la década de 1960. Dayani-Fard y sus colegas [Day99] describen el software heredado de la manera siguiente: Los sistemas de software heredado […] fueron desarrollados hace varias décadas y han sido modifi- cados de manera continua para que satisfagan los cambios en los requerimientos de los negocios y plataformas de computación. La proliferación de tales sistemas es causa de dolores de cabeza para las organizaciones grandes, a las que resulta costoso mantenerlos y riesgoso hacerlos evolucionar. Liu y sus colegas [Liu98] amplían esta descripción al hacer notar que “muchos sistemas hereda- dos continúan siendo un apoyo para las funciones básicas del negocio y son ‘indispensables’ para éste”. Además, el software heredado se caracteriza por su longevidad e importancia críti-ca para el negocio. Desafortunadamente, en ocasiones hay otra característica presente en el software heredado:  mala calidad . 5 Hay veces en las que los sistemas heredados tienen diseños que no son suscepti- bles de extenderse, código confuso, documentación mala o inexistente, casos y resultados de pruebas que nunca se archivaron, una historia de los cambios mal administrada… la lista es muy larga. A pesar de esto, dichos sistemas dan apoyo a las “funciones básicas del negocio y son indispensables para éste”. ¿Qué hacer? La única respuesta razonable es: hacer nada, al menos hasta que el sistema heredado tenga  un cambio significativo. Si el software heredado satisface las necesidades de sus usuarios y corre de manera confiable, entonces no falla ni necesita repararse. Sin embargo, conforme pase el tiempo será frecuente que los sistemas de software evolucionen por una o varias de las si-guientes razones: • El software debe adaptarse para que cumpla las necesidades de los nuevos ambientes  del cómputo y de la tecnología. • El software debe ser mejorado para implementar nuevos requerimientos del negocio. • El software debe ampliarse para que sea operable con otros sistemas o bases de datos  modernos. • La arquitectura del software debe rediseñarse para hacerla viable dentro de un ambiente  de redes. Cuando ocurren estos modos de evolución, debe hacerse la reingeniería del sistema heredado (capítulo 29) para que sea viable en el futuro. La meta de la ingeniería de software moderna es “desarrollar metodologías que se basen en el concepto de evolución; es decir, el concepto de que los sistemas de software cambian continuamente, que los nuevos sistemas de software se  5 En este caso, la calidad se juzga con base en el pensamiento moderno de la ingeniería de software, criterio algo  injusto, ya que algunos conceptos y principios de la ingeniería de software moderna tal vez no hayan sido bien  entendidos en la época en que se desarrolló el software heredado.¿Qué hago si encuentro  un sistema heredado de mala calidad?? ¿Qué tipos de cambios se hacen a los sistemas heredados?? Todo ingeniero de software debe reconocer que el cambio es natural. No trate de evitarlo.CONSEJO 01Pressman(001-024).indd   801Pressman(001-024).indd   8 14/1/10   13:30:5714/1/10   13:30:57