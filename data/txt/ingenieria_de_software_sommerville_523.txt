506 capítulo 18 ■ ingeniería de software distribuido lecturas sugeridas “middleware: a model for distributed systems services”. aunque un poco arcaico en algunas partes, éste es un excelente ensayo panorámico que resume el papel del middleware en sistemas distribuidos y analiza el rango de servicios middleware que pueden proporcionarse. (p. a. bernstein, comm. acm, 39 (2), febrero de 1996.) http:/ /dx. doi. org/ 10. 1145/ 230798. 230809. peer-to-peer: harnessing the power of disruptive technologies . aun cuando este libro no tiene mucha información sobre arquitecturas p2p, es una excelente introducción a la computación p2p que explica la organización y el enfoque utilizados en algunos sistemas p2p. (a. oram (ed.), o’reilly and associates inc., 2001.) “turning software into a service”. un buen ensayo que analiza los principios de la computación orientada a servicios. a diferencia de muchos ensayos acerca de este tema, no oculta los principios detrás de una discusión de los estándares implicados. (m. turner, d. budgen y p. brereton, ieee computer, 36 (10), octubre de 2003.) http:/ /dx. doi. org/ 10. 1109/ mc. 2003. 1236470. distributed systems: principles and paradigms, 2nd edition . un libro de texto completo que describe todos los aspectos del diseño y la implementación de sistemas distribuidos. sin embargo, no incluye una amplia discusión del paradigma orientado a servicios. (a.s. tanenbaum y m. van steen, addison-wesley, 2007.) “software as a service; the spark that will change software engineering”. un ensayo breve que argumenta que la llegada de saas llevará todo el desarrollo de software a un modelo iterativo. (g. goth, distributed systems online, 9 (7), julio de 2008.) http:/ /dx. doi. org/ 10. 1109/ mdso. 2008. 21. ejercicios 18.1. ¿qué entiende por “escalabilidad”? discuta las diferencias entre “expansión” ( scaling up) y “ampliación” (scaling out) y explique cuándo pueden usarse estos diferentes enfoques a la escalabilidad. 18.2. explique por qué los sistemas de software distribuidos son más complejos que los sistemas de software centralizados, donde toda la funcionalidad del sistema se implementa en una sola computadora. 18.3. use un ejemplo de una solicitud de procedimiento remoto para explicar cómo el middleware coordina la interacción de las computadoras en un sistema distribuido. 18.4. ¿cuál es la diferencia fundamental entre un enfoque de cliente pesado y uno de cliente ligero para las arquitecturas de sistemas cliente-servidor? 18.5. al lector se le pide diseñar un sistema seguro que requiera autenticación y autorización. el sistema debe diseñarse de forma que las comunicaciones entre partes del sistema no puedan interceptarse ni leerse por un atacante. sugiera la arquitectura cliente-servidor más adecuada para este sistema y, argumentando razones para su respuesta, proponga cómo debe distribuirse la funcionalidad del sistema entre el cliente y el servidor. 18.6. su cliente quiere desarrollar un sistema para información de acciones donde los operadores puedan acceder a información de compañías y evaluar varios escenarios de inversión m18_sommerville_ingenieria_1ed_se_479-507.indd  506m18_sommerville_ingenieria_1ed_se_479-507.indd  506 3/18/11  5:03:57 pm3/18/11  5:03:57 pm