al instrumentar el código con contest, la tasa de éxito pasó de un fallo por cada millón de iteraciones a un fallo en 30 iteraciones. los valores de bucle de las distintas ejecuciones de la prueba tras la instrumentación son los siguientes: 13, 23, 0, 54, 16, 14, 6, 69, 107, 49, 2. evidentemente, las clases instrumentadas fallaban antes y con mayor fiabilidad. conclusión en este capítulo hemos realizado un breve recorrido por el vasto y complejo territorio de la programación concurrente. apenas hemos mostrado la superficie. nos hemos centrado en disciplinas para mantener la limpieza del código concurrente, pero hay mucho más que aprender si tiene pensado diseñar sistemas concurrentes. le recomendamos que empiece por el libro de doug lea concurrent programming in java: design principles and patterns [124] . en este capítulo hemos presentado la actualización concurrente y las disciplinas de sincronización y bloqueo para evitarla. hemos visto cómo los subprocesos pueden mejorar la producción de un sistema vinculado a e/s y las técnicas limpias para lograr dichas mejoras. hemos descrito el bloqueo mutuo y las disciplinas para evitarlo de forma limpia. por último, hemos analizado estrategias para mostrar problemas de concurrencia mediante la instrumentación del código. ejemplos de código completos cliente/servidor sin subprocesos listado a-3 server.java package com.objectmentor.clientserver.nonthreaded; 432