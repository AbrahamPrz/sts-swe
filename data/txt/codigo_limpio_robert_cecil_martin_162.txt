Aprender el código de terceros es complicado, y también integrarlo. Hacer ambas cosas al mismo tiempo es el doble de complicado. Necesitamos un enfoque diferente. En lugar de experimentar y probar el nuevo material en nuestro código de producción, podríamos crear pruebas que analicen nuestro entendimiento del código de terceros. Jim Newkirk las denomina  pruebas de aprendizaje [34] . En las pruebas de aprendizaje, invocamos la API de terceros como supuestamente la usaríamos en nuestra aplicación. Básicamente realizamos experimentos controlados para comprobar si la entendemos. Las pruebas se centran en lo que queremos obtener de la API. Aprender  log4j Imagine que desea usar el paquete de Apache  log4j  en lugar de su propio dispositivo de registro personalizado. Lo descarga y abre la página inicial de la documentación. Sin una lectura exhaustiva, crea el primer caso de prueba con la esperanza de que escriba  hello  en la consola. @Test public void testLogCreate() { Logger logger = Logger.getLogger(“MyLogger”); logger.info(“hello”); } Al ejecutarlo, el registrador genera un error que nos indica que necesitamos algo denominado  Appender . Tras investigar, descubrimos que existe un elemento  ConsoleAppender . Creamos  ConsoleAppender  y comprobamos si hemos conseguido revelar los secretos del registro en la consola. @Test public void testLogAddAppender() { Logger logger = Logger.getLogger (“MyLogger”); ConsoleAppender appender = new ConsoleAppender(); logger.addAppender(appender); logger.info(“hello”); } En esta ocasión descubrimos que  Appender  carece de flujo de salida, algo extraño, ya que parece lógico que lo tuviera. Tras recurrir a Google, 163