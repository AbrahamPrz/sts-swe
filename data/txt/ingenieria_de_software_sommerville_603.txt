586  Capítulo 21 ■ Ingeniería de software orientada a aspectos  En un sistema orientado a aspectos, existen dos problemas con este enfoque: 1. ¿Cómo puede usarse el conocimiento del programa para derivar sistemáticamente  pruebas del programa? 2. ¿Qué significa exactamente cobertura de prueba?  Para diseñar pruebas en un programa estructurado (por ejemplo, pruebas del código de un método) sin ramificaciones incondicionales, usted puede derivar un gráfico de flujo de programa, que revele toda la ruta de ejecución lógica a través de dicho programa. Entonces se examina el código y, para cada ruta a través del gráfico de flujo, se eligen valores de entrada que harán que la ruta se ejecute. Sin embargo, un programa orientado a aspectos no es un programa estructurado. El flujo de control se interrumpe mediante enunciados “viene de” (Constantinos et al., 2004). En algún punto de enlace en la ejecución del código base, puede ejecutarse un aspec-to. El autor no está seguro de que en tal situación sea posible construir un diagrama de flujo estructurado. Por lo tanto, es difícil diseñar sistemáticamente pruebas de programa que garanticen la ejecución de todas las combinaciones de código base y los aspectos. En un programa orientado a aspectos, existe también el problema de decidir qué signi-fica “cobertura de prueba”. ¿Significa que el código de cada aspecto se ejecuta al menos una vez? Ésta es una condición muy débil, debido a la interacción entre los aspectos y el código base en los puntos de enlace donde se tejen los aspectos. ¿La idea de cobertura de prueba debe extenderse de manera que el código del aspecto se ejecute al menos una vez en cada punto de enlace especificado en el punto de corte del aspecto? En tales situaciones, ¿qué sucede si diferentes aspectos definen el mismo punto de corte? Se trata de problemas tanto teóricos como prácticos. Se necesitan herramientas para soportar las pruebas de los programas orientados a aspectos, que ayudarán a valorar la medida de la obertura de pruebas de un sistema. Como se estudiará en el capítulo 24, los grandes proyectos tienen por lo general un equipo de aseguramiento de calidad separado, que establece los estándares de las prue-bas y requiere un aseguramiento formal de que las revisiones y pruebas del sistema se completan bajo dichos estándares. Los problemas de inspeccionar y derivar pruebas para programas orientados a aspectos son una significativa barrera para la adopción del desa-rrollo de software orientado a aspectos en los proyectos de software grandes. Además de los problemas con las inspecciones y las pruebas de caja blanca, Katz (2005) identificó problemas adicionales en las pruebas de los programas orientados a aspectos: 1. ¿Cómo deben especificarse los aspectos de manera que puedan derivarse pruebas  para dichos aspectos? 2. ¿Cómo pueden probarse los aspectos independientemente del sistema base con el que deben tejerse? 3. ¿Cómo puede someterse a prueba la interferencia de aspectos? Como se estudió, la interferencia de aspectos ocurre cuando dos o más aspectos usan la misma especifi-cación de punto de corte. 4. ¿Cómo pueden diseñarse pruebas de manera que se ejecuten todos los puntos de enlace de programa y se apliquen pruebas de aspecto adecuadas? M21_SOMMERVILLE_INGENIERIA_1ED_SE_565-590.indd   586M21_SOMMERVILLE_INGENIERIA_1ED_SE_565-590.indd   586 3/18/11   5:38:59 PM3/18/11   5:38:59 PM