imagine que existieran cuatro sencillas reglas para crear diseños de calidad. imagine que siguiéndolas accediera a la estructura y al diseño de su código y facilitara la aplicación de principios como srp y dip. imagine que estas cuatro reglas facilitaran la emergencia de diseños de calidad. muchos consideramos que las cuatro reglas de kent beck de diseño sencillo [72] son fundamentales para crear un software bien diseñado. según kent, un diseño es sencillo si cumple estas cuatro reglas: ejecuta todas las pruebas. no contiene duplicados. expresa la intención del programador. minimiza el número de clases y métodos. describiremos estas reglas en orden de importancia. primera regla del diseño sencillo: ejecutar todas las pruebas en primer lugar, un diseño debe generar un sistema que actúe de la forma prevista. un sistema puede tener un diseño perfecto sobre el papel pero si no existe una forma sencilla de comprobar que realmente funciona de la forma esperada, el esfuerzo sobre el papel es cuestionable. un sistema minuciosamente probado y que supera todas las pruebas en todo momento se denomina sistema testable. es una afirmación obvia, pero importante. los sistemas que no se pueden probar no se pueden verificar, y un sistema que no se puede verificar no debe implementarse. afortunadamente, crear sistemas testables hace que diseñemos clases de tamaño reducido y un solo cometido. resulta más sencillo probar clases que cumplen el srp. cuantas más pruebas diseñemos, más nos acercaremos a elementos más fáciles de probar. por lo tanto, hacer que nuestro sistema se pueda probar nos ayuda a crear mejores diseños. las conexiones rígidas dificultan la creación de pruebas. del mismo modo, cuantas más pruebas creemos, más usaremos principios como dip y 228