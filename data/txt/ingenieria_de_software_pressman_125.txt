94 parte dos modelado principio 9. el diseño debe desarrollarse en forma iterativa. el diseñador debe bus- car más sencillez en cada iteración. igual que ocurre con casi todas las actividades creativas, el diseño ocurre de manera iterativa. las primeras iteraciones sirven para mejo-rar el diseño y corregir errores, pero las posteriores deben buscar un diseño tan sencillo como sea posible. cuando se aplican en forma apropiada estos principios de diseño, se crea uno que exhibe factores de calidad tanto externos como internos [mye78]. los factores de calidad externos son aquellas propiedades del software fácilmente observables por los usuarios (por ejemplo, veloci- dad, confiabilidad, corrección y usabilidad). los factores de calidad internos son de importancia para los ingenieros de software. conducen a un diseño de alta calidad desde el punto de vista técnico. para obtener factores de calidad internos, el diseñador debe entender los conceptos básicos del diseño (véase el capítulo 8). 4.3.4 principios de construcción la actividad de construcción incluye un conjunto de tareas de codificación y pruebas que lleva a un software operativo listo para entregarse al cliente o usuario final. en el trabajo de ingenie-ría de software moderna, la codificación puede ser 1) la creación directa de lenguaje de progra-mación en código fuente (por ejemplo, java), 2) la generación automática de código fuente que usa una representación intermedia parecida al diseño del componente que se va a construir o 3) la generación automática de código ejecutable que utiliza un “lenguaje de programación de cuarta generación” (por ejemplo, visual c++). las pruebas dirigen su atención inicial al componente, y con frecuencia se denomina prueba unitaria. otros niveles de pruebas incluyen 1) de integración (realizadas mientras el sistema está en construcción), 2) de validación, que evalúan si los requerimientos se han satisfecho para todo el sistema (o incremento de software) y 3) de aceptación , que efectúa el cliente en un esfuerzo por utilizar todas las características y funciones requeridas. los siguientes principios y concep-tos son aplicables a la codificación y prueba: principios de codificación. los principios que guían el trabajo de codificación se relacionan de cerca con el estilo, lenguajes y métodos de programación. sin embargo, puede enunciarse cierto número de principios fundamentales: principios de preparación: antes de escribir una sola línea de código, asegúr ese de: • entender el problema que se trata de resolver. • comprender los principios y conceptos básicos del diseño. • elegir un lenguaje de programación que satisfaga las necesidades del software que se va a elaborar y el ambiente en el que operará. • seleccionar un ambiente de programación que disponga de herramientas que hagan más fácil su trabajo. • crear un conjunto de pruebas unitarias que se aplicarán una vez que se haya terminado el componente a codificar. principios de programación: cuando comience a escribir código, asegúr ese de: • restringir sus algoritmos por medio del uso de programación estructurada [boh00]. • tomar en consideración el uso de programación por parejas. • seleccionar estructuras de datos que satisfagan las necesidades del diseño. • entender la arquitectura del software y crear interfaces que son congruentes con ella. • mantener la lógica condicional tan sencilla como sea posible.cita: “durante gran parte de mi vida he sido un mirón del software, y observo furtivamente el código sucio de otras personas. a veces encuentro una verdadera joya, un programa bien estructurado escrito en un estilo consistente, libre de errores, desarrollado de modo que cada componente es sencillo y organizado, y que está diseñado de modo que el producto es fácil de cambiar.” david parnas evite desarrollar un programa elegante que resuelva el problema equivocado. ponga especial atención al primer principio de preparación.consejo 04pressman(081-100).indd  9404pressman(081-100).indd  94 26/1/10  17:32:0026/1/10  17:32:00