private void parseelement(char argchar) { if (setargument(argchar)) argsfound.add(argchar); else { unexpectedarguments.add(argchar); valid = false; } } private boolean setargument(char argchar) { boolean set = true; if (isboolean(argchar)) setbooleanarg(argchar, true); else if (isstring(argchar)) setstringarg (argchar, “”); else set = false; return set; } private void setstringarg(char argchar, string s) { currentargument++; try { stringargs.put(argchar, args[currentargument]); } catch (arrayindexoutofboundsexception e) { valid = false; errorargument = argchar; errorcode = errorcode.missing_string; } } private boolean isstring(char argchar) { return stringargs.containskey(argchar); } private void setbooleanarg(char argchar, boolean value) { booleanargs.put(argchar, value); } private boolean isboolean(char argchar) { return booleanargs.containskey(argchar); } public int cardinality() { return argsfound.size(); } public string usage() { if (schema.length() > 0) return “-[” + schema + “]”; else return “”; } 274