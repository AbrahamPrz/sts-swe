178  Capítulo 7 ■ Diseño e implementación 2. Introducir importantes temas de implementación que no se tratan normalmente en  los libros de programación. En ellos se incluyen la reutilización de software, la  administración de la configuración y el desarrollo de código abierto.  Como hay gran variedad de plataformas de desarrollo, el capítulo no se desvía hacia algún lenguaje de programación o tecnología de implementación específicos. Por lo tanto, todos los ejemplos se presentan usando el UML en vez de un lenguaje de progra-mación como Java o Python.  7.1 Diseño orientado a objetos con el uso del UML Un sistema orientado a objetos se constituye con objetos que interactúan y mantienen su propio estado local y ofrecen operaciones sobre dicho estado. La representación del estado es privada y no se puede acceder directamente desde afuera del objeto. Los proce-sos de diseño orientado a objetos implican el diseño de clases de objetos y las relaciones entre dichas clases; tales clases definen tanto los objetos en el sistema como sus interac-ciones. Cuando el diseño se realiza como un programa en ejecución, los objetos se crean dinámicamente a partir de estas definiciones de clase. Los sistemas orientados a objetos son más fáciles de cambiar que aquellos sistemas desarrollados usando enfoques funcionales. Los objetos incluyen datos y operaciones para manipular dichos datos. En consecuencia, pueden entenderse y modificarse como entidades independientes. Cambiar la implementación de un objeto o agregar servicios no afectará a otros objetos del sistema. Puesto que los objetos se asocian con cosas, con frecuencia hay un mapeo claro entre entidades del mundo real (como componentes de hardware) y sus objetos controladores en el sistema. Esto mejora la comprensibilidad y, por ende, la mantenibilidad del diseño. Para desarrollar un diseño de sistema desde el concepto hasta el diseño detallado orientado a objetos, hay muchas cuestiones por hacer: 1. Comprender y definir el contexto y las interacciones externas con el sistema. 2. Diseñar la arquitectura del sistema.Métodos de diseño estructurado Los métodos de diseño estructurado refieren que el diseño del software debe realizarse en una forma  metódica. Diseñar un sistema incluye seguir los pasos del método, así como corregir el diseño de un sistema en niveles cada vez más detallados. En la década de 1990 había algunos métodos en competencia para diseño orientado a objetos. Sin embargo, los creadores de los métodos de uso más común se reunieron e inventaron el UML, que unificó las anotaciones usadas con los diferentes métodos. En lugar de enfocarse en los métodos, la mayoría de las discusiones son ahora sobre procesos donde el diseño  se ve como parte del proceso global de desarrollo del software. El proceso racional unificado (RUP, por las siglas de Rational Unified Process) es una buena muestra de proceso de desarrollo genérico. http://www.SoftwareEngineering-9.com/Web/Structured-methods/ M07_SOMMERVILLE_INGENIERIA_1ED_SE_176-204.indd   178M07_SOMMERVILLE_INGENIERIA_1ED_SE_176-204.indd   178 3/18/11   4:50:12 PM3/18/11   4:50:12 PM