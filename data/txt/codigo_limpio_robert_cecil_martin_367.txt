cambio y se facilita el mantenimiento de los sistemas. g8: exceso de información los módulos bien definidos tienen interfaces reducidas que nos permiten hacer mucho con poco. los módulos definidos de forma incorrecta tienen interfaces más amplias que nos obligan a usar distintos gestos para realizar operaciones sencillas. una interfaz bien definida no ofrece demasiadas funciones y las conexiones son reducidas. una interfaz definida de forma incorrecta ofrece multitud de funciones que invocar y, por tanto, las conexiones son elevadas. los buenos programadores de software aprenden a limitar la parte de sus clases y módulos que muestran en sus interfaces. cuantos menos métodos tenga una clase, mejor. cuantas menos variables conozca una función, mejor. cuantas menos variables de instancia tenga una clase, mejor. oculte sus datos. oculte sus funciones de utilidad. oculte sus constantes y elementos temporales. no cree clases con multitud de métodos y variables de instancia. no cree multitud de variables y funciones protegidas para sus subclases. concéntrese en crear interfaces concisas y de tamaño reducido. limite la información para reducir las conexiones. g9: código muerto el código muerto es el que no se ejecuta. se encuentra en el cuerpo de una instrucción if que comprueba una condición que no sucede. se encuentra en el bloque catch de una instrucción try que carece de throws . se encuentra en pequeños métodos de utilidad que nunca se invocan o en condiciones switch/case inexistentes. el problema del código muerto es que con el tiempo empieza a oler. cuanto más antiguo es, más profundo el hedor que despide. se debe a que el código muerto no se actualiza al cambiar los diseños. sigue compilándose pero no se rige por nuevas convenciones o reglas. se creó en un momento en el que el sistema era diferente . debe tener un entierro digno. bórrelo del 368