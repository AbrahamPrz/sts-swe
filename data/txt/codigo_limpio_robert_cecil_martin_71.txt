a la función a través de argumentos y extraída a través de un valor devuelto. no esperamos que la información se devuelva a través de los argumentos. por ello, los argumentos de salida suelen obligamos a realizar una comprobación doble. un argumento de salida es la mejor opción, después de la ausencia de argumentos. setupteardownincluder.render(pagedata) se entiende bien. evidentemente, vamos a representar los datos en el objeto pagedata . formas monádicas habituales hay dos motivos principales para pasar un solo argumento a una función. puede que realice una pregunta sobre el argumento, como en boolean fileexists(“myfile”), o que procese el argumento, lo transforme en otra cosa y lo devuelva. por ejemplo, inputstream fileopen(“myfile”) transforma un nombre de archivo string en un valor devuelto inputstream . los usuarios esperan estos dos usos cuando ven una función. debe elegir nombres que realicen la distinción con claridad y usar siempre ambas formas en un contexto coherente (consulte el apartado sobre separación de consultas de comandos). una forma menos habitual pero muy útil para un argumento es un evento. en esta forma, hay argumento de entrada pero no de salida. el programa debe interpretar la invocación de la función como evento y usar el argumento para alterar el estado del sistema, por ejemplo, void passwordattemptfailedntimes(int attempts) . use esta forma con precaución. debe ser claro para el lector que se trata de un evento. elija nombres y contextos con atención. intente evitar funciones monádicas que no tengan estas formas, por ejemplo, void includesetuppageinto(stringbuffer pagetext) . el uso de un argumento de salida en lugar de un valor devuelto para realizar transformaciones resulta confuso. si una función va a transformar su argumento de entrada, la transformación debe aparecer como valor devuelto. sin duda stringbuffertransform(stringbuffer in) es mejor que void 72