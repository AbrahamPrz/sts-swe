7.3 ■ Conflictos de implementación  193 embargo, si su problema es diferente, quizá descubra que es difícil encontrar un patrón  adecuado entre los cientos de patrones propuestos. Los patrones son una gran idea, pero para usarlos de manera efectiva se necesita expe-riencia en diseño de software. Hay que reconocer las situaciones donde se aplicaría un patrón. Los programadores inexpertos, incluso si leyeron los libros acerca de patrones, siempre descubrirán que es difícil decidir si deben reutilizar un patrón o necesitan desa-rrollar una solución de propósito especial.  7.3 Conflictos de implementación La ingeniería de software incluye todas las actividades implicadas en el desarrollo de software, desde los requerimientos iniciales del sistema hasta el mantenimiento y la administración del sistema desplegado. Una etapa crítica de este proceso es, desde luego, la implementación del sistema, en la cual se crea una versión ejecutable del software. La implementación quizá requiera el desarrollo de programas en lenguajes de programación de alto o bajo niveles, o bien, la personalización y adaptación de sistemas comerciales genéricos para cubrir los requerimientos específicos de una organización. Se supone que la mayoría de los lectores de este libro comprenderán los principios de programación y tendrán alguna experiencia al respecto. Como este capítulo tiene la intención de ofrecer un enfoque independiente de lenguaje, no se centró en conflictos de la buena práctica de programación, pues para esto se tendrían que usar ejemplos espe-cíficos de lenguaje. En su lugar, se introducen algunos aspectos de implementación que son muy importantes para la ingeniería de software que, por lo general, no se tocan en los textos de programación. Éstos son: 1. Reutilización La mayoría del software moderno se construye por la reutilización de  los componentes o sistemas existentes. Cuando se desarrolla software, debe usarse el código existente tanto como sea posible. 2. Administración de la configuración  Durante el proceso de desarrollo se crean  muchas versiones diferentes de cada componente de software. Si usted no sigue la huella de dichas versiones en un sistema de gestión de configuración, estará proclive a incluir en su sistema las versiones equivocadas de dichos componentes. 3. Desarrollo de huésped-objetivo  La producción de software no se ejecuta por lo  general en la misma computadora que el entorno de desarrollo de software. En vez de ello, se diseña en una computadora (el sistema huésped) y se ejecuta en una computadora separada (el sistema objetivo). Los sistemas huésped y objetivo son algunas veces del mismo tipo, aunque suelen ser completamente diferentes.  7.3.1 Reutilización De la década de 1970 a la de 1990, gran parte del nuevo software se desarrolló desde cero, al escribir todo el código en un lenguaje de programación de alto nivel. La única reutilización o software significativo era la reutilización de funciones y objetos en las  M07_SOMMERVILLE_INGENIERIA_1ED_SE_176-204.indd   193M07_SOMMERVILLE_INGENIERIA_1ED_SE_176-204.indd   193 3/18/11   4:50:13 PM3/18/11   4:50:13 PM