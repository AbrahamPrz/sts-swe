capítulo 4 principios que guían la práctica 95 • crear lazos anidados en forma tal que se puedan probar con facilidad. • seleccionar nombres significativos para las variables y seguir otros estándares locales de codificación. • escribir código que se documente a sí mismo. • crear una imagen visual (por ejemplo, líneas con sangría y en blanco) que ayude a entender. principios de validación: una vez que hay a terminado su primer intento de codifi- cación, asegúrese de: • realizar el recorrido del código cuando sea apropiado. • llevar a cabo pruebas unitarias y corregir los errores que se detecten. • rediseñar el código. se han escrito más libros sobre programación (codificación) y sobre los principios y conceptos que la guían que sobre cualquier otro tema del proceso de software. los libros sobre el tema incluyen obras tempranas sobre estilo de programación [ker78], construcción de software prác-tico [mcc04], perlas de programación [ben99], el arte de programar [knu98], temas pragmáticos de programación [hun99] y muchísimos temas más. el análisis exhaustivo de estos principios y conceptos está más allá del alcance de este libro. si tiene interés en profundizar, estudie una o varias de las referencias que se mencionan. principios de la prueba. en un libro clásico sobre las pruebas de software , glen myers [mye79] enuncia algunas reglas que sirven bien como objetivos de prueba: • la prueba es el proceso que ejecuta un programa con objeto de encontrar un error. • un buen caso de prueba es el que tiene alta probabilidad de encontrar un error que no se ha detectado hasta el momento. • una prueba exitosa es la que descubre un error no detectado hasta el momento. estos objetivos implican un cambio muy grande en el punto de vista de ciertos desarrolladores de software. ellos avanzan contra la opinión común de que una prueba exitosa es aquella que no encuentra errores en el software. el objetivo es diseñar pruebas que detecten de manera sistemática diferentes clases de errores, y hacerlo con el mínimo tiempo y esfuerzo. si las pruebas se efectúan con éxito (de acuerdo con los objetivos ya mencionados), descu- brirán errores en el software. como beneficio secundario, la prueba demuestra que las funciones de software parecen funcionar de acuerdo con las especificaciones, y que los requerimientos de comportamiento y desempeño aparentemente se cumplen. además, los datos obtenidos con-forme se realiza la prueba dan una buena indicación de la confiabilidad del software y ciertas indicaciones de la calidad de éste como un todo. pero las pruebas no pueden demostrar la inexistencia de errores y defectos; sólo demuestran que hay errores y defectos. es importante recordar esto (que de otro modo parecería muy pesimista) cuando se efectúe una prueba. davis [dav95b] sugiere algunos principios para las pruebas, 6 que se han adaptado para usar- los en este libro: principio 1. todas las pruebas deben poder rastrearse hasta los requerimientos del cliente. 7 el objetivo de las pruebas de software es descubrir errores. entonces, los defec-en un contexto amplio del diseño de software, recuerde que se comienza “por lo grande” y se centra en la arquitectura del software, y que se termina “en lo pequeño” y se atiende a los componentes. para la prueba sólo se invierte el proceso.consejo¿cuáles son los objetivos de probar el software??webref en la dirección www. literateprogramming.com/fpstyle.html, hay una amplia variedad de vínculos a estándares de codificación. 6 aquí sólo se mencionan pocos de los principios de prueba de davis. para más información, consulte [dav95b]. 7 este principio se refiere a las pruebas funcionales, por ejemplo, aquellas que se centran en los requerimientos. las pruebas estructurales (las que se centran en los detalles de arquitectura o lógica) tal vez no aborden directamente los requerimientos específicos. 04pressman(081-100).indd  9504pressman(081-100).indd  95 26/1/10  17:32:0026/1/10  17:32:00