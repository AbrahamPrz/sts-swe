tareas, más probabilidades existen de que el código carezca de una sección crítica o se produzcan bloqueos. ejecutar en diferentes plataformas en 2007 diseñamos un curso sobre programación concurrente, principalmente en os x. la clase se presentó con windows xp ejecutado en una mv. se crearon pruebas para ilustrar condiciones de fallo que fallaban con más frecuencia en os x que en xp. en todos los casos, el código probado era incorrecto. esto refuerza el hecho de que cada sistema operativo tiene una política de procesos diferente que afecta a la ejecución del código. el código con procesos múltiples se comporta de forma distinta en cada entorno [89] . debe ejecutar sus pruebas en todos los entornos de implementación posibles. recomendación : ejecute el código con procesos en todas las plataformas de destino con frecuencia y en las fases iniciales . diseñar el código para probar y forzar fallos es habitual que los fallos del código concurrente se oculten. las pruebas sencillas no suelen mostrarlos. en realidad, suelen ocultarse durante el procesamiento normal. pueden aparecer horas, días o semanas después. la razón de que los problemas de procesos sean infrecuentes, esporádicos y apenas se repitan es que sólo fallan algunas de las miles de rutas posibles que recorren una sección vulnerable. por tanto, la probabilidad de adoptar una ruta fallida es realmente baja, lo que dificulta la detección y la depuración. se preguntará cómo aumentar las posibilidades de capturar estos casos. puede diseñar el código y forzarle a que se ejecute en diferentes órdenes añadiendo métodos como object.wait() , object.sleep() , object.yield() y object.priority() . estos métodos afectan al orden de ejecución y, por tanto, aumentan las posibilidades de detectar un error. resulta más adecuado que el código 250