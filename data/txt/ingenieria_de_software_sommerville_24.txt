1.1 ■ desarrollo de software profesional 7 que desee comprarlos. ejemplos de este tipo de productos incluyen software para pc, como bases de datos, procesadores de texto, paquetes de dibujo y herramientas de administración de proyectos. también abarcan las llamadas aplicaciones verticales diseñadas para cierto propósito específico, tales como sistemas de información de librería, sistemas de contabilidad o sistemas para mantener registros dentales. 2. productos personalizados (o a la medida) son sistemas que están destinados para un cliente en particular. un contratista de software desarrolla el programa especial-mente para dicho cliente. ejemplos de este tipo de software incluyen los sistemas de control para dispositivos electrónicos, sistemas escritos para apoyar cierto proceso empresarial y los sistemas de control de tráfico aéreo. una diferencia importante entre estos tipos de software es que, en productos gené- ricos, la organización que desarrolla el software controla la especificación del mismo. para los productos personalizados, la organización que compra el software generalmente desarrolla y controla la especificación, por lo que los desarrolladores de software deben trabajar siguiendo dicha especificación. sin embargo, la distinción entre estos tipos de producto de sistemas se vuelve cada vez más difusa. ahora, cada vez más sistemas se construyen con un producto genérico como base, que luego se adapta para ajustarse a los requerimientos de un cliente. los sis-temas enterprise resource planning (erp, planeación de recursos empresariales), como el sistema sap, son los mejores ejemplos de este enfoque. aquí, un sistema grande y complejo se adapta a una compañía al incorporar la información acerca de las reglas y los procesos empresariales, los reportes requeridos, etcétera. cuando se habla de la calidad del software profesional, se debe considerar que el software lo usan y cambian personas, además de sus desarrolladores. en consecuencia, la calidad no tiene que ver sólo con lo que hace el software. en cambio, debe incluir el comportamiento del software mientras se ejecuta, y la estructura y organización de los programas del sis-tema y la documentación asociada. esto se refleja en los llamados calidad o atributos no funcionales del software. ejemplos de dichos atributos son el tiempo de respuesta del soft-ware ante la duda de un usuario y la comprensibilidad del código del programa. el conjunto específico de atributos que se espera de un sistema de software depende evidentemente de su aplicación. así, un sistema bancario debe ser seguro, un juego inte-ractivo debe tener capacidad de respuesta, un sistema de conmutación telefónica debe ser confiable, etcétera. esto puede generalizarse en el conjunto de atributos que se muestra en la figura 1.2, los cuales consideran las características esenciales de un sistema de software profesional. 1.1.1 ingeniería de software la ingeniería de software es una disciplina de ingeniería que se interesa por todos los aspectos de la producción de software, desde las primeras etapas de la especificación del sistema hasta el mantenimiento del sistema después de que se pone en operación. en esta definición se presentan dos frases clave: 1. disciplina de ingeniería los ingenieros hacen que las cosas funcionen. aplican teorías, métodos y herramientas donde es adecuado. sin embargo, los usan de manera m01_sommerville_ingenieria_1ed_se_001-026.indd  7m01_sommerville_ingenieria_1ed_se_001-026.indd  7 3/18/11  4:44:28 pm3/18/11  4:44:28 pm