21.2 ■ Aspectos, puntos de enlace y puntos de corte  573 logging (conexión lógica). O bien, el sistema podría modificarse de forma que cada vez  que se solicite un método update, las llamadas del método se agreguen antes del llamado para hacer authentication, y después para registrar los cambios efectuados. Sin embargo, ninguna de éstas es una excelente solución para este problema: 1. El primer enfoque conduce a una implementación enredada. Lógicamente, actua- lizar una base de datos, autenticar la fuente de una actualización y registrar los de-talles de la actualización son competencias ( concerns) no relacionadas. Tal vez  usted quiera incluir authentication en alguna otra parte del sistema sin ingresar al sistema o desee registrar las acciones separadas de la acción update (actualización). El mismo código authentication y logging debe incluirse dentro de varios métodos diferentes. 2. El enfoque alternativo conduce a una implementación dispersa. Si explícitamente comprende llamadas de método para hacer authentication y logging antes y después de cada llamada a los métodos update, entonces este código se incluye en el sistema en varios lugares diferentes.  Authentication y logging cortan transversalmente las competencias centrales del sis-tema y posiblemente deban incluirse en varios lugares diferentes. En un sistema orien-tado a aspectos, es posible representar estas competencias transversales como aspectos separados. Un aspecto incluye una especificación de dónde debe tejerse en el programa la competencia transversal, y el código para implementar dicha competencia. Esto se ilustra en la figura 21.5, que define un aspecto authentication. La notación que se usa en este ejemplo sigue el estilo de AspectJ, pero usa una sintaxis simplificada que debe ser comprensible sin conocimiento de Java o de AspectJ. Los aspectos son completamente diferentes de otras abstracciones del programa en las que el aspecto en sí incluye una especificación en torno a dónde debe ejecutarse. aspect authentication { before: call (public void update* (..)) // éste es un punto de corte{ // éste es el consejo –advice- que debe ejecutarse cuando se teje –weaving- en // el sistema en ejecuciónint tries = 0 ; string  userPassword = Password.Get ( tries ) ;while (tries < 3 && userPassword != thisUser.password ( ) ){ // permite 3 intentos para ingresar la contraseña correctatries = tries + 1 ;userPassword = Password.Get ( tries ) ; } if (userPassword != thisUser.password ( )) then //si la contraseña es equivocada, supone que el usuario olvidó su contraseñaSystem.Logout (thisUser.uid) ; } } // authentication Figura 21.5 Un aspecto de la autenticación (aspect authentication) M21_SOMMERVILLE_INGENIERIA_1ED_SE_565-590.indd   573M21_SOMMERVILLE_INGENIERIA_1ED_SE_565-590.indd   573 3/18/11   5:38:58 PM3/18/11   5:38:58 PM