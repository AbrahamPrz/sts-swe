222 capítulo 8 ■ pruebas de software en la figura 8.9 se ilustra el proceso tdd fundamental. los pasos en el proceso son los siguientes: 1. se comienza por identificar el incremento de funcionalidad requerido. éste usual- mente debe ser pequeño y aplicable en pocas líneas del código. 2. se escribe una prueba para esta funcionalidad y se implementa como una prueba automatizada. esto significa que la prueba puede ejecutarse y reportarse, sin impor-tar si aprueba o falla. 3. luego se corre la prueba, junto con todas las otras pruebas que se implementaron. inicialmente, no se aplica la funcionalidad, de modo que la nueva prueba fallará. esto es deliberado, pues muestra que la prueba añade algo al conjunto de pruebas. 4. luego se implementa la funcionalidad y se opera nuevamente la prueba. esto puede incluir la refactorización del código existente, para perfeccionarlo y adicionar nuevo código a lo ya existente. 5. una vez puestas en funcionamiento con éxito todas las pruebas, se avanza a la implementación de la siguiente funcionalidad. un entorno automatizado de pruebas, como el entorno junit que soporta pruebas del programa java (massol y husted, 2003), es esencial para tdd. conforme el código se desarrolla en incrementos muy pequeños, uno tiene la posibilidad de correr cada prueba, cada vez que se adiciona funcionalidad o se refactoriza el programa. por consiguiente, las pruebas se incrustan en un programa independiente que corre las pruebas y apela al sis-tema que se prueba. al usar este enfoque, en unos cuantos segundos se efectúan cientos de pruebas independientes. un argumento consistente con el desarrollo dirigido por pruebas es que ayuda a los programadores a aclarar sus ideas acerca de lo que realmente debe hacer un segmento de código. para escribir una prueba, es preciso entender lo que se quiere, pues esta com-prensión facilita la escritura del código requerido. desde luego, si el conocimiento o la comprensión son incompletos, entonces no ayudará el desarrollo dirigido por pruebas. por ejemplo, si su cálculo implica división, debería comprobar que no divide los núme-ros entre cero. en caso de que olvide escribir una prueba para esto, en el programa nunca se incluirá el código a comprobar. además de la mejor comprensión del problema, otros beneficios del desarrollo diri-gido por pruebas son: 1. cobertura de código en principio, cualquier segmento de código que escriba debe tener al menos una prueba asociada. por lo tanto, puede estar seguro de que cual-identificar la nueva funcionalidad escribir la prueba correr la pruebaimplementar la funcionalidad y refactorizaciónfallapasa figura 8.9 desarrollo dirigido por pruebas m08_sommerville_ingenieria_1ed_se_205-233.indd  222m08_sommerville_ingenieria_1ed_se_205-233.indd  222 3/18/11  5:40:00 pm3/18/11  5:40:00 pm