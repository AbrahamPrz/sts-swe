//Nuestro mejor intento de obtener una condición de carrera //creando un gran número de procesos. for (int i = 0; i < 25000; i++) { WidgetBuilderThread widgetBuiIderThread = new WidgetBuilderThread(WidgetBuilder, text, parent, failFlag); Thread thread = new Thread(WidgetBuilderThread); thread.start(); } assertEquals(false, failFlag.get()); } Clarificación En ocasiones, basta con traducir el significado de un argumento o valor devuelto en algo más legible. Por lo general, conviene buscar la forma de que el argumento o el valor devuelto sean claros por sí mismos; pero cuando forma parte de una biblioteca estándar o de código que no se puede alterar, un comentario aclarativo puede ser muy útil. public void testCompareTo() throws Exception { WikiPagePath a = PathParser.parse(“PageA”); WikiPagePath ab = PathParser.parse(“PageA.PageB”); WikiPagePath b = PathParser.parse(“PageB”); WikiPagePath aa = PathParser.parse(“PageA.PageA”); WikiPagePath bb = PathParser.parse(“PageB.PageB”); WikiPagePath ba = PathParser.parse(“PageB.PageA”); assertTrue(a.compareTo(a) == 0); // a == a assertTrue(a.compareTo(b) != 0); // a != b assertTrue(ab.compareTo(ab) == 0); // ab == ab assertTrue(a.compareTo(b) == -1); // a < b assertTrue(aa.compareTo(ab) == -1); // aa < ab assertTrue(ba.compareTo(bb) == -1); // ba < bb assertTrue(b.compareTo(a) == 1); // b > a assertTrue(ab.compareTo (aa) == 1); // ab > aa assertTrue(bb.compareTo(ba) == 1); // bb > ba } Pero también existe el riesgo de que un comentario aclarativo sea incorrecto. En el ejemplo anterior, compruebe lo difícil que resulta comprobar si los comentarios son correctos. Esto explica por qué la clarificación es necesaria y también arriesgada. Por ello, antes de escribir estos comentarios, asegúrese de que no hay una solución mejor y también de que sean precisos. 92