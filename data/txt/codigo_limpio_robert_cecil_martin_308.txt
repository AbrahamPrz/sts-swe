} } public Object get() { return intValue; } } private class DoubleArgumentMarshaler implements ArgumentMarshaler { private double doubleValue = 0; public void set(Iterator<String> currentArgument) throws ArgsException { String parameter = null; try { parameter = currentArgument.next(); doubleValue = Double.parseDouble(parameter); } catch (NoSuchElementException e) { errorCode =  ArgsException .ErrorCode.MISSING_DOUBLE; throw new ArgsException(); } catch (NumberFormatException e) { errorParameter = parameter; errorCode =  ArgsException .ErrorCode.INVALID_DOUBLE; throw new ArgsException); } } public Object get() { return doubleValue; } } } Muy bien. Ahora,  Args  solamente genera  ArgsException . Al desplazar ArgsException  a un módulo propio, podemos añadir a dicho módulo gran parte del código de error y extraerlo del módulo  Args . Es una posición natural y evidente para incluir todo el código y nos permitirá limpiar posteriormente el módulo  Args . Ya hemos separado el código de excepciones y de error del módulo  Args (véanse los listados del 14-13 al 14-16). Para ello realizamos una serie de 30 pasos mínimos y las pruebas fueron satisfactorias entre todos ellos. Listado 14-13 ArgsTest.java. package com.objectmentor.utilities.args; import junit.framework.TestCase; 309