} } public object get() { return intvalue; } } private class doubleargumentmarshaler implements argumentmarshaler { private double doublevalue = 0; public void set(iterator<string> currentargument) throws argsexception { string parameter = null; try { parameter = currentargument.next(); doublevalue = double.parsedouble(parameter); } catch (nosuchelementexception e) { errorcode = argsexception .errorcode.missing_double; throw new argsexception(); } catch (numberformatexception e) { errorparameter = parameter; errorcode = argsexception .errorcode.invalid_double; throw new argsexception); } } public object get() { return doublevalue; } } } muy bien. ahora, args solamente genera argsexception . al desplazar argsexception a un módulo propio, podemos añadir a dicho módulo gran parte del código de error y extraerlo del módulo args . es una posición natural y evidente para incluir todo el código y nos permitirá limpiar posteriormente el módulo args . ya hemos separado el código de excepciones y de error del módulo args (véanse los listados del 14-13 al 14-16). para ello realizamos una serie de 30 pasos mínimos y las pruebas fueron satisfactorias entre todos ellos. listado 14-13 argstest.java. package com.objectmentor.utilities.args; import junit.framework.testcase; 309