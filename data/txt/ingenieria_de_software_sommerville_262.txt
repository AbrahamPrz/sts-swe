9.3 ■ Mantenimiento del software  245 en costos de desarrollo da como resultado una reducción porcentual comparable en cos- tos totales del sistema. Dichas estimaciones son hipotéticas; sin embargo, no hay duda de que desarrollar soft-ware para hacerlo más mantenible es efectivo en costo, si se toman en cuenta todos los costos de por vida. Ésta es la razón para refactorizar en el desarrollo ágil. Sin la refactori-zación, el código se vuelve cada vez más difícil y costoso de cambiar. Sin embargo, en el desarrollo basado en un plan, la realidad es que la inversión adicional en el mejoramien-to del código rara vez se hace durante el desarrollo. Esto se debe principalmente a las formas en que la mayoría de las organizaciones aplican sus presupuestos. Invertir en la mantenibilidad conduce a aumentos de costo a corto plazo, los cuales son mensurables. Por desgracia, las ganancias a largo plazo no pueden medirse al mismo tiempo, de modo que las compañías son renuentes a gastar dinero en un rendimiento futuro incierto. En general, resulta más costoso agregar funcionalidad después de que un sistema está en operación, que implementar la misma funcionalidad durante el desarrollo. Las razones son: 1. Estabilidad del equipo Después de que un sistema se entrega, es normal que el  equipo de desarrollo se separe y que los individuos trabajen en nuevos proyectos. El nuevo equipo o los individuos responsables del mantenimiento del sistema no entienden el sistema o los antecedentes de las decisiones de diseño del mismo. Necesitan emplear tiempo para comprender el sistema existente, antes de implementar cambios en él. 2. Práctica de desarrollo deficiente El contrato para mantener un sistema por lo general está separado del contrato de desarrollo del sistema. El contrato de manteni-miento puede otorgarse a una compañía diferente, y no al desarrollador original del sistema. Este factor, junto con la falta de estabilidad del equipo, indica que no hay incentivo para que un equipo de desarrollo escriba software mantenible. Si el equipo de desarrollo puede buscar atajos para ahorrar esfuerzo durante el desarrollo, para ellos vale la pena hacerlo, incluso si esto significa que el software sea más difícil de cambiar en el futuro. 3. Habilidades del personal El personal de mantenimiento con frecuencia es relati-vamente inexperto y no está familiarizado con el dominio de aplicación. El mante-nimiento tiene una mala imagen entre los ingenieros de software. Lo ven como un proceso que requiere menos habilidades que el desarrollo de sistemas y se asigna a menudo al personal más novato. Más aún, los sistemas antiguos pueden estar escri-tos en lenguajes de programación obsoletos. Es posible que el personal de man-tenimiento no tenga mucha experiencia de desarrollo en estos lenguajes y debe aprenderlos para mantener el sistema.Sistemas heredados Los sistemas heredados son sistemas antiguos que todavía son útiles y en ocasiones críticos para la operación  de la empresa. Pueden implementarse usando lenguajes y tecnología obsoletos, o utilizar otros sistemas que sean costosos de mantener. Normalmente su estructura se ha degradado por cambios y la documentación está extraviada o desactualizada. No obstante, quizá no sea efectivo en costo sustituir tales sistemas. Quizá sólo se usen algunas veces al año o sea demasiado riesgoso sustituirlos porque se hayan perdido las especificaciones. http://www.SoftwareEngineering-9.com/Web/LegacySys/ M09_SOMMERVILLE_INGENIERIA_1ED_SE_234-260.indd   245M09_SOMMERVILLE_INGENIERIA_1ED_SE_234-260.indd   245 3/18/11   4:52:24 PM3/18/11   4:52:24 PM