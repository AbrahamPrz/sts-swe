cambio los métodos abstractos a una posición superior, donde pertenecen [g24]. cambio month.make por month.fromint [n1] y repito la operación con las demás enumeraciones. también creo un método de acceso toint() para todas las enumeraciones y convierto en privado el campo index . se produce una interesante duplicación [g5] en plusyears y plusmonths que conseguí eliminar extrayendo un nuevo método con el nombre correctlastdayofmonth , lo que aclaraba el significado de los tres métodos. me deshice del número mágico 1 [g25] y lo sustituí por month.january.toint() o day.sunday.toint() , según el caso. me detuve en limpiar los algoritmos de spreadsheetdate . el resultado final se puede comprobar en los listados b.7 a b.16. el alcance del código en daydate se ha reducido al 84.9 por 100, no porque se pruebe una cantidad menor de funcionalidad, sino porque la clase se ha reducido tanto que las líneas sin alcance tienen un peso mayor. ahora, en daydate las pruebas se aplican a 45 de las 53 instrucciones ejecutables. las líneas sin alcance son tan triviales que no merece la pena probarlas. conclusión otra vez hemos aplicado la regla del boy scout. hemos entregado el código más limpio de lo que lo recibimos. nos ha llevado tiempo, pero ha merecido la pena. el alcance de las pruebas ha aumentado, hemos corregido algunos errores y hemos aclarado y reducido el tamaño del código. la próxima persona que lo lea seguramente lo encontrará más fácil de leer. y probablemente esa persona sea capaz de limpiarlo algo más de lo que hemos hecho nosotros. bibliografía [gof] : design patterns: elements of reusable object oriented 357