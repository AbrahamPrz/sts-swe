6.4 ■ arquitecturas de aplicación 171 5. un analizador semántico que usa información del árbol de sintaxis y la tabla de sím- bolos, para verificar la exactitud semántica del texto en lenguaje de entrada. 6. un generador de código que “recorre” el árbol de sintaxis y genera un código de máquina abstracto. también pueden incluirse otros componentes que analizan y transforman el árbol de sintaxis para mejorar la eficiencia y remover redundancia del código de máquina gene-rado. en otros tipos de sistema de procesamiento de lenguaje, como un traductor de len-guaje natural, habrá componentes adicionales, por ejemplo, un diccionario, y el código generado en realidad es el texto de entrada traducido en otro lenguaje. existen patrones arquitectónicos alternativos que pueden usarse en un sistema de pro-cesamiento de lenguaje (garlan y shaw, 1993). pueden implementarse compiladores con una composición de un repositorio y un modelo de tubería y filtro. en una arquitectura de compilador, la tabla de símbolos es un repositorio para datos compartidos. las fases de análisis léxico, sintáctico y semántico se organizan de manera secuencial, como se mues-tra en la figura 6.19, y se comunican a través de la tabla de símbolos compartida. este modelo de tubería y filtro de compilación de lenguaje es efectivo en entornos batch, donde los programas se compilan y ejecutan sin interacción del usuario; por ejem-plo, en la traducción de un documento xml a otro. es menos efectivo cuando un com-pilador se integra con otras herramientas de procesamiento de lenguaje, como un sistema de edición estructurado, un depurador interactivo o un programa de impresión estética (prettyprinter). en esta situación, los cambios de un componente deben reflejarse de inmediato en otros componentes. por lo tanto, es mejor organizar el sistema en torno a un repositorio, como se muestra en la figura 6.20. esta figura ilustra cómo un sistema de procesamiento de lenguaje puede formar parte de un conjunto integrado de herramientas de soporte de programación. en este ejemplo, la tabla de símbolos y el árbol de sintaxis actúan como un almacén de información cen-tral. las herramientas y los fragmentos de herramienta se comunican a través de él. otra información que en ocasiones se incrusta en las herramientas, como la definición gramá-tica y la definición del formato de salida para el programa, se toma de las herramientas y se coloca en el repositorio. en consecuencia, un editor enfocado en la sintaxis podría verificar que ésta sea correcta mientras se escribe un programa, y un prettyprinter puede crear listados del programa en un formato que sea fácil de leer.arquitecturas de referencia las arquitecturas de referencia captan en un dominio características importantes de las arquitecturas del sistema. en esencia, incluyen todo lo que pueda estar en una arquitectura de aplicación aunque, en realidad, es muy improbable que alguna aplicación individual contenga todas las características mostradas en una arquitectura de referencia. el objetivo principal de las arquitecturas de referencia consiste en evaluar y comparar las propuestas de diseño y, en dicho dominio, educar a las personas sobre las características arquitectónicas. http://www.softwareengineering-9.com/web/architecture/refarch.html m06_sommerville_ingenieria_1ed_se_147-175.indd  171m06_sommerville_ingenieria_1ed_se_147-175.indd  171 3/18/11  4:49:09 pm3/18/11  4:49:09 pm