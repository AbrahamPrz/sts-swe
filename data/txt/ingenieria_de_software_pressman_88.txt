capítulo 3 desarrollo ágil 57 pero la agilidad es algo más que una respuesta efectiva al cambio. también incluye la filoso- fía expuesta en el manifiesto citado al principio de este capítulo. ésta recomienda las estructuras de equipo y las actitudes que hacen más fácil la comunicación (entre los miembros del equipo, tecnólogos y gente de negocios, entre los ingenieros de software y sus gerentes, etc.); pone el énfasis en la entrega rápida de software funcional y resta importancia a los productos interme-dios del trabajo (lo que no siempre es bueno); adopta al cliente como parte del equipo de desa-rrollo y trabaja para eliminar la actitud de “nosotros y ellos” que todavía invade muchos proyec-tos de software; reconoce que la planeación en un mundo incierto tiene sus límites y que un plan de proyecto debe ser flexible. la agilidad puede aplicarse a cualquier proceso del software. sin embargo, para lograrlo es esencial que éste se diseñe en forma que permita al equipo del proyecto adaptar las tareas y hacerlas directas, ejecutar la planeación de manera que entienda la fluidez de un enfoque ágil del desarrollo, eliminar todos los productos del trabajo excepto los más esenciales y mantener-los esbeltos, y poner el énfasis en una estrategia de entrega incremental que haga trabajar al software tan rápido como sea posible para el cliente, según el tipo de producto y el ambiente de operación. 3.2 la agilidad y el costo del cambio la sabiduría convencional del desarrollo de software (apoyada por décadas de experiencia) señala que el costo se incrementa en forma no lineal a medida que el proyecto avanza (véase la figura 3.1, curva continua negra). es relativamente fácil efectuar un cambio cuando el equipo de software reúne los requerimientos (al principio de un proyecto). el escenario de uso tal vez tenga que modificarse, la lista de funciones puede aumentar, o editarse una especificación es-crita. los costos de hacer que esto funcione son mínimos, y el tiempo requerido no perjudicará el resultado del proyecto. pero, ¿qué pasa una vez transcurridos algunos meses? el equipo está a la mitad de las pruebas de validación (algo que ocurre cuando el proyecto está relativamente avanzado) y un participante de importancia solicita que se haga un cambio funcional grande. el cambio requiere modificar el diseño de la arquitectura del software, el diseño y construcción de tres componentes nuevos, hacer cambios en otros cinco componentes, diseñar nuevas pruebas, etc. los costos aumentan con rapidez, y no son pocos el tiempo y el dinero requeridos para asegurar que se haga el cambio sin efectos colaterales no intencionados. los defensores de la agilidad (por ejemplo [bec001] y [amb04]) afirman que un proceso ágil bien diseñado “aplana” el costo de la curva de cambio (véase la figura 3.1, curva continua y no cometa el error de suponer que la agilidad le da permiso para improvisar soluciones. se requiere de un proceso, y la disciplina es esencial.consejo costo del cambio con el empleo de procesosconvencionales de software costo del cambio conel uso de procesos ágiles costo idealizado del cambiocon el uso de un proceso ágil avance de la programación del desarrollocosto del desarrollofigura 3.1 cambio de los costos como función del tiempo trans-currido en el desarrollocita: “la agilidad es dinámica, espe- cífica en el contenido, acepta con entusiasmo el cambio y se orienta al crecimiento.” steven goldman et al. 03pressman(055-080).indd  5703pressman(055-080).indd  57 14/1/10  13:41:0814/1/10  13:41:08