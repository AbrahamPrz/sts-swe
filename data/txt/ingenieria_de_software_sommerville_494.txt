capítulo 17 ■ referencias 477 17.3. ¿cuáles son las diferencias fundamentales entre componentes como elementos de programa y componentes como servicios? 17.4. ¿por qué es importante que los componentes se basen en un modelo de componentes estándar? 17.5. con un ejemplo de un componente que implemente un tipo de datos abstracto, como una pila o una lista, demuestre por qué por lo general es necesario extender y adaptar componentes para su reutilización. 17.6. explique por qué es difícil validar un componente de reutilización sin el código fuente del componente. ¿en qué formas la especificación formal de componente simplificaría los problemas de la validación? 17.7. diseñe la interfaz “proporciona” y la interfaz “requiere” de un componente de reutilización que pueda usarse para representar a un paciente en el mhc-pms. 17.8. con ejemplos, ilustre los diferentes tipos de adaptador necesarios para soportar composición secuencial, composición jerárquica y composición aditiva. 17.9. diseñe las interfaces de los componentes que puedan usarse en un sistema para una sala de control de emergencias. debe diseñar interfaces para un componente de registro de llamadas que registre las llamadas realizadas, y un componente de descubrimiento de vehículo que, a partir de un código postal (zip code) y un tipo de incidente, encuentre el vehículo adecuado más cercano para enviarlo al lugar del incidente. 17.10. se ha sugerido que debe establecerse una autoridad de certificación independiente. los proveedores enviarían sus componentes a esta autoridad, la cual validaría que el componente es confiable. ¿cuáles serían las ventajas y desventajas de tal autoridad de certificación? referencias boehm, b. w., abts, c., brown, a. w., chulani, s., clark, b. k., horowitz, e., madachy, r., reifer, d. y steece, b. (2000). software cost estimation with cocomo ii. upper saddle river, nj.: prentice hall. councill, w. t. y heineman, g. t. (2001). “definition of a software component and its elements”. en component-based software engineering. heineman, g. t. y councill, w. t. (ed.). boston: addison-wesley, 5–20. jacobson, i., griss, m. y jonsson, p. (1997). software reuse. reading, mass.: addison-wesley.kotonya, g. (2003). “the cbse process: issues and future visions”. proc. 2nd cbsenet workshop, budapest, hungría.lau, k.-k. y wang, z. (2007). “software component models”. ieee trans. on software eng., 33 (10), 709–24. meyer, b. (1992). “design by contract”. ieee computer, 25 (10), 40–51. m17_sommerville_ingenieria_1ed_se_452-478.indd  477m17_sommerville_ingenieria_1ed_se_452-478.indd  477 3/18/11  5:03:06 pm3/18/11  5:03:06 pm