Capítulo 20 ■ Puntos clave  561  Dentro de dichas estrategias se han desarrollado diferentes algoritmos de planea- ción. En ellos se incluyen planeación circular (round-robin), en la que cada proceso se ejecuta en turnos; planeación de tasa monotónica, en la que se otorga prioridad al pro-ceso con el periodo más corto (frecuencia más alta); y planeación prioritaria del plazo más corto, en que se programa el proceso en la cola con el plazo más corto (Burns y Wellings, 2009). La información acerca del proceso a ejecutar se transmite al gestor de recursos. El gestor de recursos asigna memoria y, en un sistema multiprocesador, también agrega un procesador a este proceso. Entonces el proceso se coloca en la “lista de preparados”, una lista de procesos que están preparados para su ejecución. Cuando un procesador termina de ejecutar un proceso y queda disponible, se recurre al despachador. Éste explora la lista de preparados para encontrar un proceso que pueda ejecutarse en el procesador disponi-ble y comienza su ejecución. PUNTOS CLAVE ■ Un sistema de software embebido es parte de un sistema hardware/software que reacciona a  eventos en su entorno. El software se “embebe” en el hardware. Los sistemas embebidos, por lo general, son sistemas de tiempo real. ■ Un sistema de tiempo real es un sistema de software que debe responder a eventos en tiempo real. La exactitud del sistema no sólo depende de los resultados que produce, sino también del tiempo en que se producen dichos resultados. ■ Los sistemas de tiempo real se implementan por lo general como un conjunto de procesos en comunicación que reaccionan ante estímulos para producir respuestas. ■ Los modelos de estado son una importante representación de diseño para sistemas embebidos de tiempo real. Se usan para mostrar cómo reacciona el sistema a su entorno conforme los eventos de activación cambian el estado del sistema. ■ Existen varios patrones estándar que pueden observarse en diferentes tipos de sistemas embebidos. En ellos se incluye un patrón que monitoriza el entorno del sistema para eventos adversos, un patrón para control de actuador y un patrón de procesamiento de datos. ■ Los diseñadores de sistemas de tiempo real tienen que hacer un análisis de temporización (timing), que es dirigido por los plazos para procesar los estímulos y responder a ellos. Tienen que decidir con qué frecuencia debe ejecutar cada proceso en el sistema y el tiempo de ejecución esperado y del peor escenario para los procesos. ■ Un sistema operativo de tiempo real es responsable de la gestión de los procesos y los recursos. Siempre incluye un planificador, que es el componente responsable de decidir cuál proceso debe programarse para su ejecución. M20_SOMMERVILLE_INGENIERIA_1ED_SE_537-564.indd   561M20_SOMMERVILLE_INGENIERIA_1ED_SE_537-564.indd   561 3/18/11   5:05:51 PM3/18/11   5:05:51 PM