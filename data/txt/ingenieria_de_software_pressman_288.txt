capítulo 10 diseño en el nivel de componentes 257 la ingeniería de software basada en componentes (isbc) es un proceso que pone el énfasis en el diseño y construcción de sistemas basados en computadora que emplean “componentes” reutilizables de software. clements [cle95] describe la isbc del modo siguiente: la isbc adopta la filosofía “compra, no hagas” propuesta por fred brooks y otros. del mismo modo que las subrutinas de los primeros tiempos liberaron al programador de pensar en los detalles, la isbc traslada el énfasis de la programación a la combinación de sistemas de software. la implantación ha dado paso a la integración como el aspecto importante. pero surgen varias preguntas. ¿es posible construir sistemas complejos con el ensamble de componentes reutilizables de software procedentes de un catálogo? ¿se logra esto en forma eficaz en cuanto a costo y tiempo? ¿pueden establecerse incentivos apropiados que estimulen a los ingenieros de software a reutilizar, más que a reinventar? ¿la dirección está dispuesta a incurrir en los gastos adicionales asociados a la creación de componentes de software reutili-zables? ¿es posible crear la biblioteca de componentes necesarios para conseguir la reutiliza-ción en forma tal que sea accesible a quienes los necesitan? ¿quienes necesitan los componen-tes que ya existen pueden encontrarlos? cada vez más, la respuesta a estas preguntas es “sí”. en el resto de esta sección se estudian algunos aspectos que deben tomarse en cuenta para hacer que la isbc tenga éxito en una or-ganización de ingeniería de software. 10.6.1 ingeniería del dominio el objetivo de la ingeniería del dominio es identificar, construir, catalogar y diseminar un con-junto de componentes de software que sean aplicables al software existente y al del futuro en un dominio particular de aplicaciones. 9 la meta general es establecer mecanismos que permitan que los ingenieros de software compartan dichos componentes —los reutilicen— cuando traba-jen en sistemas nuevos o ya existentes. la ingeniería del dominio incluye tres actividades prin-cipales: análisis, construcción y diseminación. el enfoque general del análisis del dominio se caracteriza con frecuencia dentro del contexto de la ingeniería de software orientada a objetos. los pasos de este proceso se definen como sigue: 1. definir el dominio que se va a investigar. 2. clasificar los aspectos extraídos del dominio. 3. reunir una muestra representativa de aplicaciones en el dominio. 4. analizar cada aplicación en la muestra y definir clases de análisis. 5. desarrollar un modelo de los requerimientos para las clases. es importante observar que el análisis del dominio es aplicable a cualquier paradigma de la in-geniería de software y se aplica tanto al desarrollo con vencional como al orientado a objetos. 10.6.2 calificación, adaptación y combinación de los componentes la ingeniería del dominio genera la biblioteca de componentes reutilizables que se requieren para la práctica de la ingeniería de software basada en componentes. algunos de estos compo-nentes reutilizables se desarrollan en la propia empresa, mientras que otros provienen de apli-caciones existentes y otros más se adquieren de terceras personas. desafortunadamente, la existencia de componentes reutilizables no garantiza que éstos se integren con facilidad o eficacia en la arquitectura escogida para una nueva aplicación. es por cita: “la ingeniería del dominio trata de encontrar aspectos en común en los sistemas a fin de identifi-car los componentes aplicables a muchos de ellos…” paul clements 9 en el capítulo 9 se mencionan géneros arquitectónicos que identifican dominios específicos de aplicación.el proceso de análisis que se estudia en esta sección se centra en los componentes reutilizables. sin embargo, el análisis de sistemas con componentes comerciales separados (ccs) completos (por ejemplo, aplicaciones de comercio electrónico y automatización de la fuerza de ventas) también forma parte del análisis del dominio.consejo 10pressman(234-264).indd  25710pressman(234-264).indd  257 26/1/10  17:33:2326/1/10  17:33:23