4 capítulo 1 ■ introducción es imposible operar el mundo moderno sin software. las infraestructuras nacionales y los servicios públicos se controlan mediante sistemas basados en computadoras, y la mayoría de los productos eléctricos incluyen una computadora y un software de control. la fabricación y la distribución industrial están completamente computarizadas, como el sistema financiero. el entretenimiento, incluida la industria musical, los juegos por computadora, el cine y la televisión, usan software de manera intensiva. por lo tanto, la ingeniería de software es esencial para el funcionamiento de las sociedades, tanto a nivel nacional como internacional. los sistemas de software son abstractos e intangibles. no están restringidos por las propiedades de los materiales, regidos por leyes físicas ni por procesos de fabri-cación. esto simplifica la ingeniería de software, pues no existen límites naturales a su potencial. sin embargo, debido a la falta de restricciones físicas, los sistemas de software pueden volverse rápidamente muy complejos, difíciles de entender y costosos de cambiar. hay muchos tipos diferentes de sistemas de software, desde los simples sistemas embebidos, hasta los complejos sistemas de información mundial. no tiene sentido bus-car notaciones, métodos o técnicas universales para la ingeniería de software, ya que diferentes tipos de software requieren distintos enfoques. desarrollar un sistema orga-nizacional de información es completamente diferente de un controlador para un ins-trumento científico. ninguno de estos sistemas tiene mucho en común con un juego por computadora de gráficos intensivos. aunque todas estas aplicaciones necesitan ingenie-ría de software, no todas requieren las mismas técnicas de ingeniería de software. aún existen muchos reportes tanto de proyectos de software que salen mal como de “fallas de software”. por ello, a la ingeniería de software se le considera inadecuada para el desarrollo del software moderno. sin embargo, desde la perspectiva del autor, muchas de las llamadas fallas del software son consecuencia de dos factores: 1. demandas crecientes conforme las nuevas técnicas de ingeniería de software ayudan a construir sistemas más grandes y complejos, las demandas cambian. los sistemas tienen que construirse y distribuirse más rápidamente; se requieren sistemas más grandes e incluso más complejos; los sistemas deben tener nuevas capacidades que anteriormente se consideraban imposibles. los métodos existentes de ingeniería de software no pueden enfrentar la situación, y tienen que desarrollarse nuevas técni-cas de ingeniería de software para satisfacer nuevas demandas. 2. expectativas bajas es relativamente sencillo escribir programas de cómputo sin usar métodos y técnicas de ingeniería de software. muchas compañías se deslizan hacia la ingeniería de software conforme evolucionan sus productos y servicios. no usan métodos de ingeniería de software en su trabajo diario. por lo tanto, su soft-ware con frecuencia es más costoso y menos confiable de lo que debiera. es nece-saria una mejor educación y capacitación en ingeniería de software para solucionar este problema. los ingenieros de software pueden estar orgullosos de sus logros. desde luego, toda- vía se presentan problemas al desarrollar software complejo, pero, sin ingeniería de soft-ware, no se habría explorado el espacio ni se tendría internet o las telecomunicaciones modernas. todas las formas de viaje serían más peligrosas y caras. la ingeniería de software ha contribuido en gran medida, y sus aportaciones en el siglo xxi serán aún mayores. m01_sommerville_ingenieria_1ed_se_001-026.indd  4m01_sommerville_ingenieria_1ed_se_001-026.indd  4 3/18/11  4:44:28 pm3/18/11  4:44:28 pm