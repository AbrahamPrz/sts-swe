int straighttime = math.min(400, tenthsworked); int overtime = math.max(0, tenthsworked - straighttime); int straightpay = straighttime * tenthrate; double overtimerate = overtime ? 1.5 : 1.0 * tenthrate; int overtimepay = (int)math.round(overtime*overtimerate); return straightpay + overtimepay; } esta función se invoca con true si las horas extras se pagan como hora y media, y con false si se pagan como una hora normal. ya es bastante malo tener que recordar lo que significa calculateweeklypay(false) cada vez que aparezca. pero lo peor de esta función es que el autor ha perdido la oportunidad de crear lo siguiente: public int straightpay() { return gettenthsworked() * gettenthrate(); } public int overtimepay() { int overtimetenths = math.max(0, gettenthsworked() - 400); int overtimepay = overtimebonus(overtimetenths); return straightpay() + overtimepay; } private int overtimebonus(int overtimetenths) { double bonus = 0.5 * gettenthrate() * overtimetenths; return (int) math.round(bonus); } evidentemente, los selectores no deben ser boolean . pueden ser enumeraciones, enteros u otro tipo de argumento que se use para seleccionar el comportamiento de la función. es más recomendable tener varias funciones que pasar código a una función para seleccionar el comportamiento. g16: intención desconocida queremos que el código sea lo más expresivo posible. expresiones extensas, notación húngara y números mágicos distorsionan la intención del autor. por ejemplo, veamos la función overtimepay cómo podría haber aparecido: public int m_otcalc() { return ithswkd * ithsrte + (int) math.round(0.5 * ithsrte * math.max(0/ ithswkd - 400) ); } 372