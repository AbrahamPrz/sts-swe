{ public double xprojection(point p1, point p2) { return (p2.x – p1.x) * 1.5; } … } ¿qué sucede cuando alguien pasa null como argumento? calculator.xprojection(null, new point (12, 13)); se genera nullpointerexception , evidentemente. ¿cómo solucionarlo? podríamos crear un nuevo tipo de excepción y generarla: public class metricscalculator { public double xprojection(point p1, point p2) { if (p1==null || p2==null) { throw invalidargumentexception( “invalid argument for metricscalculator.xprojection”); } return (p2.x – p1.x) * 1.5; } } } ¿mejor? puede que sea mejor que una excepción de puntero nulo, pero recuerde que debe definir un controlador para invalidargumentexception . ¿qué debe hacer el controlador? ¿hay alguna forma correcta de hacerlo? existe otra alternativa, usar un grupo de afirmaciones: public class metricscalculator ( public double xprojection{point p1, point p2) { assert p1 != null : “p1 should not be null”; assert p2 != null : “p2 should not be null”; return (p2.x - pl.x) * 1.5; } } es documentación correcta pero no soluciona el problema. si alguien pasa null , seguirá produciéndose un error de tiempo de ejecución. en la mayoría de lenguajes de programación no hay una forma correcta de procesar un null pasado por accidente. como éste es el caso, el enfoque racional es impedir que se pase null de forma predeterminada. si lo hace, puede diseñar código sabiendo que null en una lista de argumentos indica un problema y los errores serán menores. 157