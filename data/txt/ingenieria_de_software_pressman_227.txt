196 PARTE DOS  MODELADO 8.3.12  Clases de diseño El modelo de requerimientos define un conjunto de clases de análisis (capítulo 6). Cada una  describe algún elemento del dominio del problema y se centra en aspectos de éste que son vi-sibles para el usuario. El nivel de abstracción de una clase de análisis es relativamente alto. Conforme el diseño evoluciona, se definirá un conjunto de clases de diseño que refinan las  clases de análisis, dando detalles del diseño que permitirán que las clases se implementen y generen una infraestructura para el software que apoye la solución de negocios. Pueden desa-rrollarse cinco tipos diferentes de clases de diseño, cada una de las cuales representa una capa distinta de la arquitectura del diseño [Amb01]: • Clases de usuario de la interfaz. Definen todas las abstracciones necesarias para la inte-racción humano-computadora (IHC). En muchos casos, la IHC ocurre dentro del contexto de una metáfora (por ejemplo, cuaderno de notas, formato de orden, máquina de fax, etc.) y las clases del diseño para la interfaz son representaciones visuales de los elementos de la metáfora. • Clases del dominio de negocios. Es frecuente que sean refinamientos de las clases de análisis definidas antes. Las clases identifican los atributos y servicios (métodos) que se requieren para implementar algunos elementos del dominio de negocios. • Clases de proceso. Implantan abstracciones de negocios de bajo nivel que se requieren para administrar por completo las clases de dominio de negocios. • Clases persistentes. Representan almacenamientos de datos (por ejemplo, una base de datos) que persistirán más allá de la ejecución del software. • Clases de sistemas. Implantan las funciones de administración y control del software que permiten que el sistema opere y se comunique dentro de su ambiente de computación y con el mundo exterior. A medida que se forma la arquitectura, el nivel de abstracción se reduce cuando cada clase de análisis se transforma en una representación del diseño. Es decir, las clases de análisis repre-sentan objetos de datos (y servicios asociados que se aplican a éstos) que usan la terminología del dominio del negocio. Las clases de diseño presentan muchos más detalles técnicos como guía para su implementación. Arlow y Neustadt [Arl02] sugieren que se revise cada clase de diseño para asegurar que esté  “bien formada”. Definen cuatro características de las clases de diseño bien formadas: Completa y suficiente. Una clase de diseño debe ser el encapsulado total de todos los  atributos y métodos que sea razonable esperar (con base en una interpretación comprensi-ble del nombre de la clase) y que existan para la clase. Por ejemplo, la clase Escena defi- nida para el software de la edición de video será completa sólo si contiene todos los atribu-tos y métodos que se asocian de manera razonable con la creación de una escena de video. La suficiencia asegura que la clase de diseño contiene sólo los métodos que bastan para lo-grar el objetivo de la clase, ni más ni menos. Primitivismo. Los métodos asociados con una clase de diseño deben centrarse en el cum- plimiento de un servicio para la clase. Una vez implementado el servicio con un método, la clase no debe proveer otro modo de hacer lo mismo. Por ejemplo, la clase VideoClip para  el software de la edición de video tal vez tenga los atributos punto-inicial y punto-final que in- diquen los puntos de inicio y fin del corto (observe que el video original cargado en el sis-tema puede ser más extenso que el corto utilizado). Los métodos EstablecerPuntoInicial ( ) y  EstablecerPuntoFinal ( ) proporcionan los únicos medios para establecer los puntos de co-mienzo y terminación del corto. Mucha cohesión. Una clase de diseño cohesiva tiene un conjunto pequeño y centrado de  responsabilidades; para implementarlas emplea atributos y métodos de objetivo único. Por ¿Qué tipos de clases  crea el diseñador?? ¿Qué es una clase de diseño “bien formada”?? 08Pressman(183-205).indd   19608Pressman(183-205).indd   196 14/1/10   14:31:1014/1/10   14:31:10