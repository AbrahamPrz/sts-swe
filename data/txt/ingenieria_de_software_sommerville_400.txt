14.2 ■ Diseño para la seguridad  383 near la bitácora y descubrir las acciones anómalas, y además ayudar a detectar ataques y  rastrear cómo el atacante consiguió acceso al sistema. Además de ayudar a recuperarse de la falla, una bitácora de acciones del usuario es útil porque actúa como un disuasivo a los ataques internos. Si las personas saben que sus acciones se registran, entonces es menos probable que intenten actuar de formas no autorizadas. Esto es más efectivo para ataques casuales, como una enfermera que busca registros de pacientes, o para detectar ataques donde se robaron credenciales de usuario legí-timas mediante ingeniería social. Desde luego, esto no es infalible, ya que los internos técni-camente habilidosos también pueden tener acceso a la bitácora y modificarla. Lineamiento 6: Use redundancia y diversidad para reducir el riesgo Redundancia significa conservar más de una versión del software o de los datos en un sistema. Diversidad, cuando se aplica al software, significa que las diferentes versiones no deben apoyarse en la misma plataforma o implementarse usando las mismas tecno-logías. Por lo tanto, una vulnerabilidad de plataforma o tecnología no afectará a todas las versiones y, en consecuencia, no conducirá a una falla común. En el capítulo 13 se explicó cómo redundancia y diversidad son mecanismos fundamentales que se usan en la ingeniería de confiabilidad. Ya se estudiaron ejemplos de redundancia: mantener información de pacientes tanto en el servidor como en el cliente, primero en el sistema de atención a la salud mental, y luego en el sistema distribuido de comercio de acciones que se muestra en la figura 14.5. En el sistema de registro de pacientes, podría usar varios sistemas operativos en el cliente y el servidor (por ejemplo, Linux en el servidor, Windows en el cliente). Esto garantiza que un ataque basado en una vulnerabilidad de sistema operativo no afectará tanto al servidor como al cliente. Desde luego, habrá que negociar tales beneficios contra el creciente costo administrativo de mantener diferentes sistemas operativos en una orga-nización. Lineamiento 7: Valide todas las entradas Un ataque común a un sistema implica proporcionar al sistema entradas inesperadas que hacen que se comporte en forma no anticipada. Esto simplemente puede causar la caída de un sistema, lo que deriva en pérdida de servicio, o bien, las entradas podrían constituir un código malicioso que se ejecute en el sistema. Las vulnerabilidades de desborda-miento de buffer, que primero se demostraron en el gusano de Internet (Spafford, 1989) y que utilizan comúnmente los atacantes (Berghel, 2001), pueden activarse mediante cade-nas largas de entrada. Otro ataque bastante común es el llamado “envenenamiento SQL”, en el que un usuario malicioso ingresa un fragmento SQL que interpreta un servidor. Como se explicó en el capítulo 13, es posible evitar muchos de estos problemas al diseñar la validación de entrada en su sistema. En esencia, nunca debe aceptar cualquier entrada sin aplicar algunas verificaciones. Como parte de los requerimientos, tiene que definir las comprobaciones que se apliquen. Debe usar el conocimiento de la entrada para definir dichas comprobaciones. Por ejemplo, si se ingresa un sobrenombre, puede comprobar que no existen espacios embebidos y que el único signo de puntuación uti-lizado es el guión. También puede verificar el número de caracteres de entrada y recha-zar las entradas muy largas. Por ejemplo, nadie tiene un nombre familiar con más de 40 caracteres ni direcciones con más de 100 caracteres de largo. Si usa menús para pre-sentar entradas permitidas, evitará algunos de los problemas de validación de entrada. M14_SOMMERVILLE_INGENIERIA_1ED_SE_366-392.indd   383M14_SOMMERVILLE_INGENIERIA_1ED_SE_366-392.indd   383 3/18/11   5:00:14 PM3/18/11   5:00:14 PM