avanzado mucho, pero nos queda mucho por avanzar. Los movimientos Agile y TDD han animado a muchos programadores a crear pruebas de unidad automatizadas y cada vez son más. Pero en esta alocada carrera por añadir pruebas a nuestra disciplina, muchos programadores han pasado por alto dos de los aspectos más sutiles e importantes de diseñar pruebas de calidad. Las tres leyes del DGP Todos sabemos que el DGP nos pide que primero creemos las pruebas de unidad, antes que el código de producción. Pero esa norma es sólo la punta del iceberg. Tenga en cuenta las tres siguientes leyes [37] : Primera ley : No debe crear código de producción hasta que haya creado una prueba de unidad que falle. Segunda ley : No debe crear más de una prueba de unidad que baste como fallida, y no compilar se considera un fallo. Tercera ley : No debe crear más código de producción que el necesario para superar la prueba de fallo actual. Estas tres leyes generan un ciclo de unos 30 segundos de duración. Las pruebas y el código de producción se crean de forma conjunta, las pruebas unos segundos antes que el código. Si trabajamos de esta forma, crearemos decenas de pruebas al día, cientos al mes y miles al año. Si trabajamos de esta forma, las pruebas abarcarán todos los aspectos de nuestro código de producción. El tamaño de dichas pruebas, que puede ser similar al del código de producción, puede suponer un problema de administración. Realizar pruebas limpias Hace unos años me pidieron que dirigiera un equipo que había decidido explícitamente que su código de prueba no debía mantenerse con los mismos estándares de calidad que su código de producción. Podían incumplir las 171