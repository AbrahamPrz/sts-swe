7.2 ■ Patrones de diseño  189 servicios que ofrecerá el objeto o un grupo de objetos. Las interfaces pueden especifi- carse en el UML con la misma notación de un diagrama de clase. Sin embargo, no hay sección de atributos y debe incluirse el estereotipo UML «interface» en la parte del nom-bre. La semántica de la interfaz se define mediante el lenguaje de restricción de objeto (OCL). Esto se explica en el capítulo 17, donde se estudia la ingeniería de software basada en componentes. También muestra una forma alternativa para representar inter-faces en el UML. En un diseño de interfaz no se deben incluir detalles de la representación de datos, pues los atributos no se definen en una especificación de interfaz. Sin embargo, debe con-tener operaciones para acceder a los datos y actualizarlos. Puesto que la representación de datos está oculta, puede cambiar fácilmente sin afectar los objetos que usan dichos datos. Esto conduce a un diseño que inherentemente es más mantenible. Por ejemplo, una representación de arreglo en pila puede cambiarse a una representación en lista, sin afectar otros objetos que usen la pila. En contraste, con frecuencia tiene sentido exponer los atributos en un modelo de diseño estático, pues es la forma más compacta de ilustrar las características esenciales de los objetos. No hay una relación simple 1:1 entre objetos e interfaces. El mismo objeto puede tener muchas interfaces, cada una de las cuales es un punto de vista de los métodos que ofrece. Esto se soporta directamente en Java, donde las interfaces se declaran por separado de los objetos, y los objetos “implementan” interfaces. De igual modo, puede accederse a un grupo de objetos a través de una sola interfaz. La figura 7.9 indica dos interfaces que pueden definirse para la estación meteoroló-gica. La interfaz de la izquierda es una interfaz de reporte que precisa los nombres de operación que se usan para generar reportes del clima y de estatus. Éstos se mapean direc-tamente a operaciones en el objeto WeatherStation. La interfaz de control remoto propor-ciona cuatro operaciones, que se mapean en un solo método en el objeto WeatherStation. En este caso, las operaciones individuales se codifican en la cadena ( string) de comando  asociada con el método remoteControl, que se muestra en la figura 7.6.  7.2 Patrones de diseño Los patrones de diseño se derivaron de ideas planteadas por Christopher Alexander (Alexander et al., 1977), quien sugirió que había ciertos patrones comunes de diseño de  construcción que eran relativamente agradables y efectivos. El patrón es una descripción del problema y la esencia de su solución, de modo que la solución puede reutilizarse en diferentes configuraciones. El patrón no es una especificación detallada. Más bien, puede «interfaz» Control remoto startInstrument  (instrument): iStatus stopInstrument  (instrument): iStatus collectData  (instrument): iStatus provideData  (instrument): string«interfaz» Reporte weatherReport  (WS-Ident): Wreport statusReport  (WS-Ident): Sreport Figura 7.9 Interfaces  de la estación meteorológica M07_SOMMERVILLE_INGENIERIA_1ED_SE_176-204.indd   189M07_SOMMERVILLE_INGENIERIA_1ED_SE_176-204.indd   189 3/18/11   4:50:13 PM3/18/11   4:50:13 PM