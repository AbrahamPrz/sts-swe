“argument: %c has invalid format: %s.”, elementid, elementtail), 0); } } private void validateschemaelementid(char elementid) throws parseexception { if (!character.isletter(elementid)) { throw new parseexception( “bad character:” + elementid + “in args format: ” + schema, 0); } } private boolean isstringschemaelement(string elementtail) { return elementtail.equals(“*”); } private boolean isbooleanschemaelement(string elementtail) { return elementtail.length() == 0; } private boolean isintegerschemaelement(string elementtail) { return elementtail.equals(“#”); } private boolean parsearguments() throws argsexception { for (currentargument=0; currentargument<args.length; currentargument++) { string arg = args[currentargument]; parseargument(arg); } return true; } private void parseargument(string arg) throws argsexception { if (arg.startswith(“-”)) parseelements(arg); } private void parseelements(string arg) throws argsexception { for (int i = 1; i < arg.length(); i++) parseelement(arg.charat(i)); } private void parseelement(char argchar) throws argsexception { if (setargument(argchar)) argsfound.add(argchar); else { unexpectedarguments.add(argchar); errorcode = errorcode.unexpected_argument; valid = false; } } private boolean setargument(char argchar) throws argsexception { argumentmarshaler m = marshalers.get(argchar); try { 293