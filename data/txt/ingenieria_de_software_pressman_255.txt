224 PARTE DOS  MODELADO 9.5.2  Complejidad arquitectónica Una técnica útil para evaluar la complejidad general de una arquitectura propuesta es conside- rar las dependencias entre los componentes dentro de la arquitectura. Estas dependencias están motivadas por el flujo de la información o por el control dentro del sistema. Zhao [Zha98] su- giere tres tipos de dependencias: Las dependencias compartidas representan relaciones entre consumidores que usan los mismos recur- sos o productores que producen para los mismos consumidores. Por ejemplo, para dos componentes  u y v, si u y v se refieren a los mismos datos globales, entonces existe una relación de dependencia  compartida entre u y v. Las dependencias de flujo representan relaciones de dependencia entre productores y consumidores  de recursos. Por ejemplo, para dos componentes u y v, si u debe completarse para que el control pase  a v (prerrequisito), o si u se comunica con v por medio de parámetros, entonces existe una relación  de dependencia de flujo entre u y v. Las dependencias de restricción representan restricciones en el flujo relativo del control entre  un conjunto de actividades. Por ejemplo, si dos componentes u y v no pueden ejecutarse al mismo tiempo (son mutuamente excluyentes), entonces existe una relación de dependencia de restricción entre u y v. Las dependencias compartidas y el flujo propuestos por Zhao son similares al concepto de aco- plamiento estudiado en el capítulo 8. El acoplamiento es un importante concepto de diseño aplicable en el nivel arquitectónico y de componente. En el capítulo 23 se estudian criterios de medida sencillos para evaluar el acoplamiento. 9.5.3  Lenguajes de descripción arquitectónica El arquitecto de una casa tiene un conjunto de herramientas y notación estandarizadas que permiten que el diseño se represente sin ambigüedades y que sea comprensible. Aunque el ar-quitecto de software dispone de la notación UML, para un enfoque más formal de la especifica-ción del diseño arquitectónico se necesitan otras formas de diagramas y algunas herramientas relacionadas. El lenguaje de descripción arquitectónica (LDA) provee la semántica y sintaxis para describir  una arquitectura de software. Hofmann et al. [Hof01] sugieren que un LDA debe brindar al dise-ñador la capacidad de desintegrar los componentes arquitectónicos, integrar componentes in- El resumen siguiente de varios LDA importantes fue prepa- rado por Richard Land (Lan02) y se publica con el permiso  de su autor. Debe observarse que los primeros cinco LDA fueron desa-rrollados con fines de investigación y no son productos comerciales. Rapide (http://poset.stanford.edu/rapide/) construye a  partir del concepto de conjuntos parcialmente ordenados, con lo  que genera estructuras de programación muy nuevas (pero apa-rentemente poderosas). UniCon (www.cs.cmu.edu/~UniCon) es “un lenguaje de des- cripción arquitectónica que busca ayudar a los diseñadores a definir arquitecturas de software en términos de abstracciones que les parezcan útiles”. Aesop (www.cs.cmu.edu/~able/aesop/) aborda el proble- ma de la reutilización del estilo. Con este lenguaje es posible defi-nir estilos y usarlos cuando se construye un sistema real.Wright (www.cs.cmu.edu/~able/wright/) es un lenguaje  formal que incluye los elementos siguientes: componentes con  puertos, conectores con roles y pegamento para unir roles con puertos. Los estilos arquitectónicos se formalizan en el lenguaje con predicados, lo que permite revisiones estáticas para determi-nar la consistencia y completitud de una arquitectura. Acme (www.cs.cmu.edu/~acme/) puede considerarse como  un LDA de segunda generación, ya que su objetivo es identificar una clase de mínimo común denominador de los LDA. UML (www.uml.org/) incluye muchos de los artefactos necesarios  para hacer descripciones arquitectónicas: procesos, nodos, pers-pectivas, etc. UML es apropiado para hacer descripciones infor-males tan sólo porque se trata de un estándar ampliamente com-prendido. Sin embargo, carece de toda la fortaleza que se necesita para hacer una descripción arquitectónica adecuada.HERRAMIENTAS  DE SOFTWARE Lenguajes de descripción arquitectónica 09Pressman(206-233).indd   22409Pressman(206-233).indd   224 14/1/10   15:44:4014/1/10   15:44:40