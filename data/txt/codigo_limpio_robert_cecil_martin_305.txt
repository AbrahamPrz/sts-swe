una cadena que no se puede analizar a un argumento ##. public void testinvaliddouble() throws exception { args args = new args(“x##”, new string[] {“-x”, “forty two”}); assertfalse(args.isvalid()); assertequals(0, args.cardinality()); assertfalse(args.has(‘x’)); assertequals(0, args.getint(‘x’)); assertequals(“argument -x expects a double but was ‘forty two’.”, args.errormessage()); } --- public string errormessage() throws exception { switch (errorcode) { case ok: throw new exception(“tilt: should not get here.”); case unexpected_argument: return unexpectedargumentmessage(); case missing_string: return string.format(“could not find string parameter for -%c.”, errorargumentid); case invalid_integer: return string.format(“argument -%c expects an integer but was ‘%s’.”, errorargumentid, errorparameter); case missing_integer: return string.format(“could not find integer parameter for -%c.”, errorargumentid); case invalid_double: return string.format(“argument -%c expects a double but was ‘%s’.”, errorargumentid, errorparameter); case missing_double: return string.format(“could not find double parameter for -%c”, errorargumentid); } return “”; } y las pruebas son satisfactorias. la siguiente prueba garantiza que se detecte correctamente la ausencia de un argumento double . public void testmissingdouble() throws exception { args args = new args(“x##”, new string[]{"-x"}); assertfalse (args.isvalid()); assertequals(0, args.cardinality()); assertfalse(args.has(‘x’)); assertequals(0.0, args.getdouble(‘x’), 0.01); assertequals(“could not find double parameter for -x.”, args.errormessage()); } es correcto. la incluimos para que el ejemplo resulte más completo. el código de excepciones no es atractivo y no pertenece realmente a la 306