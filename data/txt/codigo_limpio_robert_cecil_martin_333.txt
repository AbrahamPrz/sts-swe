DELTA_END + computeCommonSuffix(); } Mucho mejor. Ahora vemos que la función  compactString  simplemente combina los fragmentos. Probablemente lo podríamos limpiar más, en pequeñas operaciones, pero en lugar de desarrollar el resto de los cambios, mostraremos el resultado final en el Listado 15-5. Listado 15-5 ComparisonCompactor.java (versión definitiva). package junit.framework; public class ComparisonCompactor { private static final String ELLIPSIS = “…”; private static final String DELTA_END = “]”; private static final String DELTA_START = “[”; private int contextLength; private String expected; private String actual; private int prefixLength; private int suffixLength; public ComparisonCompactor( int contextLength, String expected, String actual ) { this.contextLength = contextLength; this.expected = expected; this.actual = actual; } public String formatCompactedComparison(String message) { String compactExpected = expected; String compactActual = actual; if (shouldBeCompacted()) { findCommonPrefixAndSuffix(); compactExpected = compact(expected); compactActual = compact(actual); } return Assert.format(message, compactExpected, compactActual); } private boolean shouldBeCompacted() { return !shouldNotBeCompacted(); } private boolean shouldNotBeCompacted() { return expected == null || 334