capítulo 19 prueba de aplicaciones orientadas a objetos 445 ciones sean similares. sus conjuntos de requerimientos de prueba se traslaparán. mientras me- jor sea el diseño oo, mayor es el traslape. es necesario derivar nuevas pruebas sólo para aque-llos requerimientos derived::redefined( ) que no se satisfagan con las pruebas base::redefined( ). para resumir, las pruebas base::redefined( ) se aplican a objetos de la clase derived. las en- tradas de prueba pueden ser adecuadas tanto para la clase base como para la derivada, pero los resultados esperados pueden diferir en la clase derivada. 19.4.5 diseño de pruebas basadas en escenario las pruebas basadas en fallo pierden dos tipos principales de errores: 1) especificaciones in-correctas e 2) interacciones entre subsistemas. cuando ocurren errores asociados con una es-pecificación incorrecta, el producto no hace lo que el cliente quiere. puede hacer lo correcto u omitir funcionalidad importante. pero en cualquier circunstancia, la calidad (conformidad con los requerimientos) se resiente. los errores asociados con la interacción de subsistemas ocurren cuando el comportamiento de un subsistema crea circunstancias (por ejemplo, eventos, flujo de datos) que hacen que otro subsistema falle. la prueba basada en escenario se concentra en lo que hace el usuario, no en lo que hace el producto. esto significa capturar las tareas (por medio de casos de uso) que el usuario tiene que realizar y luego aplicar éstas y sus variantes como pruebas. los escenarios descubren errores de interacción. pero, para lograr esto, los casos de prueba deben ser más complejos y más realistas que las pruebas basadas en fallo. la prueba basada en escenario tiende a ejercitar múltiples subsistemas en una sola prueba (los usuarios no se limitan al uso de un subsistema a la vez). como ejemplo, tome en cuenta el diseño de pruebas basadas en escenario para un editor de texto al revisar los casos de uso que siguen: caso de uso: corrección del borrador final antecedentes: no es raro imprimir el borrador “final”, leerlo y descubrir algunos errores descon- certantes que no fueron obvios en la imagen de la pantalla. este caso de uso describe la secuencia de eventos que ocurren cuando esto sucede. 1. imprimir todo el documento. 2. moverse en el documento, cambiar ciertas páginas.3. conforme cada página cambia, imprimirla.4. en ocasiones se imprime una serie de páginas. este escenario describe dos cosas: una prueba y necesidades específicas del usuario. las necesidades del usuario son obvias: 1) un método para imprimir páginas solas y 2) un método para imprimir un rango de páginas. mientras avanzan las pruebas, hay necesidad de probar la edición después de imprimir (así como lo inverso). por tanto, se trabaja para diseñar pruebas que descubrirán errores en la función de edición que fueron provocados por la función de im-presión, es decir, errores que indicarán que las dos funciones de software no son adecuada-mente independientes. caso de uso: imprimir una nueva copia antecedentes: alguien pide al usuario una copia reciente del documento. debe imprimirla. 1. abrir el documento.2. imprimirlo.3. cerrar el documento. de nuevo, el enfoque de las pruebas es relativamente obvio. excepto que este documento no aparece de la nada. se creó en una tarea anterior. ¿dicha tarea afecta a la actual?punto clave la prueba basada en escenario descubrirá errores que ocurren cuando cualquier actor interactúa con el software. cita: “si quiere y espera que un pro-grama funcione, muy probablemente verá un progra-ma en funcionamiento: no percibirá los errores.” cem kaner et al. 19pressman(437-452).indd  44519pressman(437-452).indd  445 21/1/10  10:58:3421/1/10  10:58:34