los nombres de una letra y las constantes numéricas tienen un problema: no son fáciles de localizar en el texto. se puede detectar max_classes_per_student , pero el número 7 resulta más complicado. las búsquedas pueden devolver el dígito como parte de nombres de archivo, otras definiciones de constantes o expresiones en las que se use con otra intención. mucho peor si la constante es un número extenso y alguien ha intercambiado los dígitos, lo que genera un error inmediato y no aparece en la búsqueda. del mismo modo, el nombre e es una opción muy pobre para variables que el programador tenga que buscar. es la letra más usada en inglés y aparece en la práctica totalidad de los textos de un programa. a este respecto, los nombres extensos superan a los breves y cualquier nombre que se pueda buscar supera a una constante en el código. personalmente prefiero nombres de una letra que sólo se puedan usar como variables locales dentro de métodos breves. la longitud de un nombre debe corresponderse al tamaño de su ámbito [n5]. si una variable o constante se usa en varios puntos del código, debe asignarle un nombre que se pueda buscar. compare: for (int j=0; j<34; j++) { s += (t[j]*4)/5; } con: int realdaysperidealday = 4; const int work_days_per_week = 5; int sum = 0; for (int j = 0; j < number_of_tasks; j++) { int realtaskdays = taskestimate[j] * realdaysperidealday; int realtaskweeks = (realdays / work_days_per_week); sum += realtaskweeks; } en este ejemplo, sum no es un nombre especialmente útil, pero al menos se puede buscar. se usa una función más extensa, pero comprobará que resulta mucho más fácil buscar work_days_per_week que todas las instancias de 5 y filtrar la lista a los casos con el significado adecuado. evitar codificaciones 48