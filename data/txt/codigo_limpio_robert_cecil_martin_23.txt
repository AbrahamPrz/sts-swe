dos décadas después conocí a uno de los empleados de la empresa y le pregunté sobre lo que había pasado. la respuesta confirmó mis temores. habían comercializado el producto antes de tiempo con graves fallos en el código. al añadir nuevas funciones, el código empeoró hasta que ya no pudieron controlarlo. el código incorrecto fue el motivo del fin de la empresa . ¿en alguna ocasión el código incorrecto le ha supuesto un obstáculo? si es programador seguramente sí. de hecho, tenemos una palabra que lo describe: sortear . tenemos que sortear el código incorrecto. nos arrastramos por una maraña de zarzas y trampas ocultas. intentamos buscar el camino, una pista de lo que está pasando, pero lo único que vemos es más y más código sin sentido. sin duda el código incorrecto le ha supuesto un obstáculo. entonces, ¿por qué lo escribió? ¿tenía prisa? ¿plazos de entrega? seguramente. puede que pensara que no tenía tiempo para hacer un buen trabajo; que su jefe se enfadaría si necesitaba tiempo para limpiar su código. o puede que estuviera cansado de trabajar en ese programa y quisiera acabar cuanto antes. o que viera el trabajo pendiente y tuviera que acabar con un módulo para pasar al siguiente. a todos nos ha pasado. todos hemos visto el lío en el que estábamos y hemos optado por dejarlo para otro día. todos hemos sentido el alivio de ver cómo un programa incorrecto funcionaba y hemos decidido que un mal programa que funciona es mejor que nada. todos hemos dicho que lo solucionaríamos después. evidentemente, por aquel entonces, no conocíamos la ley de leblanc: después es igual a nunca . el coste total de un desastre si es programador desde hace dos o tres años, probablemente haya sufrido los desastres cometidos por otros en el código. si tiene más experiencia, lo habrá sufrido en mayor medida. el grado de sufrimiento puede ser significativo. en un periodo de un año o dos, los equipos que avancen rápidamente al inicio de 24