7.3 ■ conflictos de implementación 197 una plataforma de desarrollo de software debe ofrecer una variedad de herramientas para soportar los procesos de ingeniería de software. éstas pueden incluir: 1. un compilador integrado y un sistema de edición dirigida por sintaxis que le permi- tan crear, editar y compilar código. 2. un sistema de depuración de lenguaje. 3. herramientas de edición gráfica, tales como las herramientas para editar modelos uml. 4. herramientas de prueba, como junit (massol, 2003) que operen automáticamente un conjunto de pruebas sobre una nueva versión de un programa. 5. herramientas de apoyo de proyecto que le ayuden a organizar el código para dife- rentes proyectos de desarrollo. al igual que dichas herramientas estándar, su sistema de desarrollo puede incluir herra- mientas más especializadas, como analizadores estáticos (que se estudian en el capítulo 15). normalmente, los entornos de desarrollo para equipos también contemplan un servi-dor compartido que opera un sistema de administración del cambio y la configuración y, si acaso, un sistema para soportar la gestión de requerimientos. las herramientas de desarrollo de software se agrupan con frecuencia para crear un entorno de desarrollo integrado (ide), que es un conjunto de herramientas de software que apoyan diferentes aspectos del desarrollo de software, dentro de cierto marco común e interfaz de usuario. por lo común, los ide se crean para apoyar el desarrollo en un lenguaje de programación específico, como java. el lenguaje ide puede elaborarse espe-cialmente, o ser una ejemplificación de un ide de propósito general, con herramientas de apoyo a lenguaje específico. un ide de propósito general es un marco para colocar herramientas de software, que brinden facilidades de gestión de datos para el software a desarrollar, y mecanismos de integración, que permitan a las herramientas trabajar en conjunto. el entorno eclipse (carlson, 2005) es el ide de propósito general mejor conocido. este entorno se basa en una arquitectura de conexión ( plug-in), de modo que pueda especializarse para diferentes lenguajes y dominios de aplicación (clayberg y rubel, 2006). por consiguiente, es posi-ble instalar eclipse y personalizarlo según sus necesidades específicas al agregar plug-ins (enchufables o conectables), para soportar el desarrollo de sistemas en red en java o ingeniería de sistemas embebidos usando c. como parte del proceso de desarrollo, se requiere tomar decisiones sobre cómo se des-plegará el software desarrollado en la plataforma objetivo. esto es directo para sistemas diagramas de despliegue uml los diagramas de despliegue uml muestran cómo los componentes de software se despliegan físicamente en los procesadores; es decir, el diagrama de despliegue muestra el hardware y el software en el sistema, así como el middleware usado para conectar los diferentes componentes en el sistema. en esencia, los diagramas de despliegue se pueden considerar como una forma de definir y documentar el entorno objetivo. http://www.softwareengineering-9.com/web/deployment/ m07_sommerville_ingenieria_1ed_se_176-204.indd  197m07_sommerville_ingenieria_1ed_se_176-204.indd  197 3/18/11  4:50:14 pm3/18/11  4:50:14 pm