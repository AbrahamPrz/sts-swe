362  Capítulo 13 ■ Ingeniería de conﬁ  abilidad blece el estado del sistema al estado guardado en el checkpoint y se reinicia la ejecución  a partir de dicho punto. Lineamiento 6: Comprobar los límites de los arreglos Todos los lenguajes de programación permiten la especificación de arreglos: estructuras de datos secuenciales a los que se accede a través de un índice numérico. Dichos arreglos se suelen encontrar en áreas contiguas dentro de la memoria operativa de un programa. Los arreglos se especifican en un tamaño particular, que refleja cómo se usan. Por ejem-plo, si se quieren representar las edades de hasta 10,000 personas, entonces se declara un arreglo con 10,000 ubicaciones para contener los datos de la edad. Algunos lenguajes de programación, como Java, siempre comprueban que, cuando se ingresa un valor en un arreglo, el índice esté dentro de dicho arreglo. De este modo, si un arreglo A está indexado de 0 a 10,000, un intento por ingresar valores en los elementos A [-5] o A [12345] conducirá al surgimiento de una excepción. Sin embargo, lengua-jes de programación como C y C++ no incluyen automáticamente comprobaciones de límite de arreglo y sólo calculan un corrimiento (offset) desde el comienzo del arreglo. Por consiguiente, A [12345] accedería a la palabra que tuviera la ubicación 12345 desde el comienzo del arreglo, sin importar si ésta era parte del arreglo o no. La razón por la que estos lenguajes no incluyen comprobación automática de límite de arreglo es que ello introduce una sobrecarga cada vez que se accede al arreglo. La mayoría de los accesos al arreglo son correctos, de modo que la comprobación de límite gene-ralmente es innecesaria y aumenta el tiempo de ejecución del programa. No obstante, la falta de comprobación de límites conduce a vulnerabilidades en la seguridad, como el desbordamiento de buffer, que se estudia en el capítulo 14. De manera más general, introduce una vulnerabilidad al sistema que puede derivar en falla de sistema. Si se usa un lenguaje que no incluye comprobación de límite de arreglo, siempre se debe incluir un código adicional que garantice que el índice del arreglo está dentro de los límites. Esto se logra con facilidad al implementar el arreglo como un tipo de datos abstractos, como se analizó en el lineamiento 1. Lineamiento 7: Incluir interrupciones cuando  se soliciten componentes externos En los sistemas distribuidos, los componentes del sistema se ejecutan en diferentes  computadoras y las peticiones se realizan a través de la red de componente a com-ponente. Para recibir algún servicio, el componente A lo pedirá al componente B. A espera la respuesta de B antes de continuar la ejecución. Sin embargo, si el compo-nente B falla en responder por alguna razón, entonces el componente A no continúa. Tan sólo espera indefinidamente una respuesta. Una persona que espere una respuesta del sistema observa una falla de sistema silenciosa, sin respuesta del sistema. No tiene alternativa más que aniquilar el proceso de espera y reiniciar el sistema. Para evitar lo anterior, siempre hay que incluir interrupciones cuando se soliciten componentes externos. Una interrupción (timeout) es una suposición automática de que un componente solicitado falló y no producirá una respuesta. Se define un periodo durante el cual espera recibir una respuesta de un componente solicitado. Si no recibe una respuesta en ese lapso, supone una falla y retira el control del componente solicitado. Entonces puede tratar de recuperarse de la falla o indicar al usuario del sistema lo que sucedió y permitirle decidir qué hacer. M13_SOMMERVILLE_INGENIERIA_1ED_SE_341-365.indd   362M13_SOMMERVILLE_INGENIERIA_1ED_SE_341-365.indd   362 3/18/11   4:59:14 PM3/18/11   4:59:14 PM