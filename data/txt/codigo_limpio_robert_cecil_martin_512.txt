82 public static final int earliest_date_ordinal = 2; // 1/1/1900 83 public static final int latest_date_ordinal = 2958465; // 12/31/9999 84 public static final int minimum_year_supported = 1900; 85 public static final int maximum_year_supported = 9999; 86 static final int[] aggregate_days_to_end_of_preceding_month = 87 {0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365}; 88 static final int[] leap_year_aggregate_days_to_end_of_preceding_month = 89 {0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366}; 90 91 private int ordinalday; 92 private int day; 93 private month month; 94 private int year; 95 96 public spreadsheetdate(int day, month month, int year) { 97 if (year < minimum_year_supported || year > maximum_year_supported) 98 throw new illegalargumentexception( 99 “the ‘year’ argument must be in range ” + 100 minimum_year_supported + “ to ” + maximum_year_supported + “.”); 101 if (day < 1 || day > dateutil.lastdayofmonth(month, year)) 102 throw new illegalargumentexception(“invalid ‘day’ argument.”); 103 104 this.year = year; 105 this.month = month; 106 this.day = day; 107 ordinalday = calcordinal(day, month, year); 108 } 109 110 public spreadsheetdate(int day, int month, int year) { 111 this(day, month.fromint(month), year); 112 } 113 114 public spreadsheetdate(int serial) { 115 if (serial < earliest_date_ordinal || serial > latest_date_ordinal) 116 throw new illegalargumentexception( 117 “spreadsheetdate: serial must be in range 2 to 2958465.”); 118 119 ordinalday = serial; 120 calcdaymonthyear(); 121 } 122 123 public int getordinalday() { 124 return ordinalday; 125 } 513