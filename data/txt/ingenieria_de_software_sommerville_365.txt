348  Capítulo 13 ■ Ingeniería de conﬁ  abilidad  La administración del cambio, que se estudia en el capítulo 25, se interesa por admi- nistrar los cambios a un sistema, lo cual garantiza que los cambios aceptados en realidad se implementen, y confirma que las versiones planeadas del software incluyan los cam-bios programados. Un problema común con el software es que se incluyan componentes equivocados en la construcción de un sistema. Esto llevaría a una situación en que un sistema en ejecución incluya componentes que no se verificaron durante el proceso de desarrollo. Los procedimientos de administración de la configuración tienen que defi-nirse como parte del proceso de administración del cambio, con la finalidad de asegurar que esto no suceda. Existe una visión muy difundida de que los enfoques ágiles, que se estudiaron en el capítulo 3, en realidad no son adecuados para los procesos de confiabilidad (Boehm, 2002). Los enfoques ágiles se enfocan en el desarrollo de software y no en documentar lo que se hizo. Con frecuencia tienen un enfoque bastante informal para la administración del cam-bio y la calidad. Por lo general, se prefieren los enfoques basados en un plan al desarrollo de sistemas confiables, que crean documentación fácil de entender por parte de los regula-dores y otros participantes externos del sistema. No obstante, los beneficios de los enfoques ágiles son igualmente aplicables a los sistemas críticos. En esta área se han presentado reportes de éxito en la aplicación de métodos ágiles (Lindvall et al., 2004) y es probable que se desarrollen variantes de los métodos ágiles que sean adecuadas para la ingeniería de sistemas críticos.  1 3.3 Arquitecturas de sistemas confiables Como vimos, el desarrollo de sistemas confiables debe basarse en un proceso confia-ble. Aunque probablemente se necesite de un proceso confiable para crear sistemas igualmente confiables, esto no es suficiente para garantizar la confiabilidad. También se requiere diseñar una arquitectura de sistema para la confiabilidad, sobre todo cuando se precisa tolerancia a fallas. Esto significa que la arquitectura tiene que diseñarse para incluir componentes y mecanismos redundantes, que permitan cambiar el control de un componente a otro. Los ejemplos de sistemas que pueden requerir arquitecturas tolerantes a fallas son los sistemas en las aeronaves, que deben estar en operación durante todo el vuelo, los siste-mas de telecomunicación, y los sistemas de comando y control críticos. Pullum (2001) describe los diferentes tipos de arquitectura tolerante a fallas que se han propuesto, y Torres-Pomales estudia las técnicas de tolerancia a fallas de software (2000). La realización más simple de una arquitectura confiable está en los servidores repli-cados, cuando dos o más servidores realizan la misma tarea. Las peticiones para proce-samiento se canalizan a través de un componente de gestión de servidor que enruta cada petición hacia un servidor específico. Este componente también hace un seguimiento de las respuestas del servidor. En caso de falla de éste, lo que por lo general se detecta mediante la falta de respuesta, el servidor defectuoso se desconecta del sistema. Las peti-ciones no procesadas se envían a otros servidores para su procesamiento. Este enfoque de servidor replicado se usa ampliamente para los sistemas de procesa-miento de transacciones, donde es fácil mantener copias de las transacciones a procesar. Los sistemas de procesamiento de transacción se diseñan para que sólo se actualicen una vez terminada correctamente la transacción, de manera que las demoras en el procesa- M13_SOMMERVILLE_INGENIERIA_1ED_SE_341-365.indd   348M13_SOMMERVILLE_INGENIERIA_1ED_SE_341-365.indd   348 3/18/11   4:59:13 PM3/18/11   4:59:13 PM