554 capítulo 20 ■ software embebido 20. 3 análisis de temporización como se estudió en la introducción, la exactitud de un sistema de tiempo real depende no sólo de la exactitud de sus salidas, sino también del tiempo en que se produjeron dichas salidas. esto significa que una actividad importante en el proceso de desarrollo de soft-ware embebido de tiempo real es el análisis de temporización. en tal análisis, se calcula con qué frecuencia debe ejecutarse cada proceso en el sistema para garantizar que todas las entradas se procesen y que todas las respuestas del sistema se produzcan en forma oportuna. los resultados del análisis de temporización se usan para decidir con qué con-tinuidad debe ejecutarse cada proceso y cómo el sistema operativo de tiempo real debe organizar temporalmente dichos procesos. el análisis de temporización (timing) para sistemas de tiempo real es particularmente difícil cuando los sistemas deben hacer frente a una mezcla de estímulos y respuestas periódicos y no periódicos. puesto que los estímulos no periódicos son impredecibles, usted tendrá que hacer suposiciones acerca de la probabilidad de que dichos estímulos ocurran y, por lo tanto, de que se requiera servicio en algún momento particular. dichos supuestos pueden ser incorrectos y el rendimiento del sistema después de la entrega podría ser inadecuado. el libro de cooling (2003) examina técnicas para el análisis de rendimiento de los sistemas de tiempo real que toman en cuenta eventos no periódicos. sin embargo, conforme las computadoras se vuelven más rápidas ha sido posible, en muchos sistemas, diseñar usando sólo estímulos periódicos. cuando los procesadores son lentos, deben usarse estímulos no periódicos para garantizar que los eventos críticos se proce-sen antes de sus plazos, pues las demoras en el procesamiento suponen, por lo general, alguna pérdida al sistema. por ejemplo, la falla de una fuente de energía en un sistema embebido puede significar que el sistema debe apagar el equipo vinculado en una forma controlada, dentro de un tiempo muy corto (por ejemplo, 50 milisegundos). esto podría implementarse como una interrupción de “falla de energía”. sin embargo, también puede implementar-se usando un proceso periódico que opere muy frecuentemente y compruebe la energía. siempre y cuando el tiempo entre invocaciones de procesos sea corto, todavía habrá tiempo para realizar un apagado controlado del sistema antes de que la falta de energía cause daños. por esta razón, se tratarán los conflictos de temporización para procesos periódicos. cuando se analizan los requerimientos de temporización de los sistemas embebidos de tiempo real y se diseñan sistemas para cumplir dichos requerimientos, existen tres factores clave que se deben considerar: 1. plazos los tiempos en que deben procesarse los estímulos y producir alguna res- puesta por parte del sistema. si el sistema no cumple un plazo, entonces, si es un buffer de valor de flujoprocesamiento de flujobuffer de datos brutosconvertidor a-didentificador de sensor y valor de flujonivel de flujo procesadoalmacenamiento desplieguesensores de flujo de neutrones figura 20.14 adquisición de datos de flujo de neutrones m20_sommerville_ingenieria_1ed_se_537-564.indd  554m20_sommerville_ingenieria_1ed_se_537-564.indd  554 3/18/11  5:05:50 pm3/18/11  5:05:50 pm