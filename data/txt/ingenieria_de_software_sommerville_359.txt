342 capítulo 13 ■ ingeniería de conﬁ abilidad el uso de técnicas de ingeniería de software, mejores lenguajes de programación y me- jor calidad de gestión conducen a beneficios considerables en la confiabilidad para la mayoría del software. no obstante, aún se generan fallas de sistema que afectan la dis-ponibilidad del sistema o que llevan a la producción de resultados incorrectos. en algu-nos casos, tales fallas simplemente causan inconvenientes menores. los proveedores de sistemas pueden decidir sólo coexistir con dichas fallas, sin corregir los errores en sus sistemas. sin embargo, en algunos sistemas, la falla podría causar pérdidas de vidas, o bien, grandes pérdidas económicas o de reputación. éstos se conocen como “sistemas críticos”, para los cuales resulta esencial un alto nivel de confiabilidad. los ejemplos de sistemas críticos comprenden sistemas de control de procesos, sistemas de protección que desactivan otros sistemas en caso de falla, sistemas médi-cos, conmutadores de telecomunicaciones y sistemas de control de vuelo. para mejorar la con fiabilidad del software en un sistema crítico, se utilizan herramientas y técnicas de desarrollo especial. aun cuando tales herramientas y técnicas aumentan generalmente los costos de desarrollo del sistema, también reducen el riesgo de fallas de sistema y las pérdi-das derivadas de tales fallas. la ingeniería de confiabilidad se interesa por las técnicas usadas para mejorar la con-fiabilidad de los sistemas tanto críticos como no críticos. dichas técnicas apoyan tres enfoques complementarios que se emplean en el desarrollo del software confiable: 1. evitación de fallas en el desarrollo el proceso de diseño e implementación del soft ware debe usar enfoques para el desarrollo de software que ayuden a evitar erro-res de diseño y de programación y, además, que minimicen el número de fallas que sea factible que surjan al ejecutar el sistema. menos fallas en el desarrollo significan menos oportunidades de fallas durante el tiempo de ejecución. 2. detección y corrección de fallas en el desarrollo los procesos de verificación y validación se diseñan para descubrir y eliminar fallas en el desarrollo de un pro-grama, antes de desplegarlo para uso operacional. los sistemas críticos requieren verificación y validación muy costosa para descubrir el mayor número posible de fallas antes del despliegue y, asimismo, para convencer a los participantes de que el sistema es confiable. este tema se expone en el capítulo 15. 3. tolerancia a fallas en el desarrollo el sistema se diseñó de modo que se detectan las fallas en el desarrollo o el comportamiento inesperado del sistema en el tiempo de ejecución, y se gestionan para que no ocurra una falla de sistema. en todos los sistemas pueden incluirse enfoques simples a la tolerancia de fallas en el desarrollo basados en la comprobación del tiempo de ejecución interna. sin embargo, las técni-cas más especializadas de tolerancia a fallas (como el uso de arquitecturas de sistema tolerantes a fallas) sólo se usan por lo general cuando se requiere un nivel muy alto de disponibilidad y fiabilidad del sistema. por desgracia, aplicar técnicas para evitar, detectar y tolerar fallas en el desarrollo conduce a una situación de baja de rendimientos. el costo para encontrar y eliminar las fallas en el desarrollo restantes en un sistema de software se eleva exponencialmente a medida que se descubren y eliminan las fallas del programa (figura 13.1). conforme el software se vuelve más confiable, es necesario emplear mayor tiempo y esfuerzo para encontrar cada vez menos fallas. en cierta etapa, incluso para los sistemas críticos, se vuelven injustificables los costos del esfuerzo adicional. m13_sommerville_ingenieria_1ed_se_341-365.indd  342m13_sommerville_ingenieria_1ed_se_341-365.indd  342 3/18/11  4:59:12 pm3/18/11  4:59:12 pm