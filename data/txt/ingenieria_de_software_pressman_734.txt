capítulo 31 tendencias emergentes en ingeniería del software 703 31.3.5 bloques constructores de software quienes fomentan una filosofía de ingeniería del software enfatizan la necesidad de la reutili- zación de código fuente, clases orientadas a objeto, componentes, patrones y software cots. aunque la comunidad de ingeniería del software ha hecho progresos conforme intenta capturar el conocimiento pasado y reutilizar las soluciones probadas, un significativo porcentaje del software que se construye en la actualidad continúa construyéndose “desde cero”. parte de la razón de esto es un deseo continuo (de los participantes y profesionales de ingeniería del soft-ware) de “soluciones únicas”. en el mundo del hardware, los fabricantes de equipo original (feo) de dispositivos digitales usan productos estándar específicos de aplicación (peea) producidos por proveedores de silicio de manera casi exclusiva. estos “hardware mercantiles” proporcionan los bloques constructores necesarios para implementar todo, desde un teléfono celular hasta un reproductor hd-dvd. cada vez más, los mismos feo usan “software mercantil”, bloques constructores de software diseñados específicamente para un dominio de aplicación único [por ejemplo, dispositivos voip]. michael ward [war07] comenta: una ventaja del uso de componentes de software es que el feo puede apalancar la funcionalidad proporcionada por el software sin tener que desarrollar experiencia doméstica en las funciones espe-cíficas o invertir tiempo de desarrollador en el esfuerzo por implementar y validar los componentes. otras ventajas incluyen la habilidad para adquirir y desplegar sólo el conjunto de funcionalidades específicas que son necesarias para el sistema, así como la habilidad para integrar dichos componen-tes en una arquitectura ya existente. sin embargo, el enfoque de componente de software tiene una desventaja porque existe un nivel dado de esfuerzo requerido para integrar los componentes individuales en el producto global. este reto de integración puede complicarse aún más si los componentes se consiguen de varios provee-dores, cada uno con su propia metodología de interfaz. conforme se usen fuentes adicionales de componentes, el esfuerzo requerido para gestionar varios proveedores aumenta y hay un mayor riesgo de encontrar problemas relacionados con la interacción a través de los componentes de diferentes fuentes. además de las componentes empacadas como software mercantil, existe una creciente tenden- cia a adoptar soluciones de plataforma de software que “incorporan colecciones de funcionalida-des relacionadas, por lo general proporcionados dentro de un marco conceptual de software integrado” [war07]. una plataforma de software libera a un feo del trabajo asociado con el desarrollo de la funcionalidad base y en su lugar permite que dedique el esfuerzo de software en aquellas características que diferencian su producto. 31.3.6 cambio de percepciones de “valor” durante el último cuarto del siglo xx, la pregunta operativa que planteaban los empresarios cuando analizaban el software era: ¿por qué cuesta tanto? esta pregunta rara vez se plantea en la actualidad y se sustituyó por: ¿por qué no podemos tenerlo (el software y/o el producto ba-sado en software) más pronto? cuando se considera el software de computadora, la percepción moderna del valor cambia del valor empresarial (costo y rentabilidad) a valores de cliente que incluyen: rapidez de entrega, riqueza de funcionalidad y calidad global del producto. 31.3.7 fuente abierta ¿quién posee el software que usted o su organización usa? cada vez más, la respuesta es “todo mundo”. el movimiento “fuente abierta” se ha descrito de la forma siguiente [oso08]: “fuente abierta es un método de desarrollo para software que aprovecha el poder de la revisión de pares cita: “la respuesta artística adecuada a la tecnología digital es abra-zarla como una nueva ventana a todo lo que es eternamente humano, y usarla con pasión, sabiduría, valor y alegría.” ralph lombreglia 31pressman(695-716).indd  70331pressman(695-716).indd  703 26/1/10  17:33:3926/1/10  17:33:39