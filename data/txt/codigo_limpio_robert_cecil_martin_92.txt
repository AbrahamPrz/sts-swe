advertir de las consecuencias en ocasiones es muy útil advertir a otros programadores de determinadas consecuencias. por ejemplo, el siguiente comentario explica por qué un determinado caso de prueba está desactivado: // no ejecutar a menos // que le sobre tiempo. public void _testwithreallybigfile() { writelinestofile(10000000); response.setbody(testfile); response.readytosend(this); string responsestring = output.tostring(); assertsubstring(“content-length: 1000000000”, responsestring); asserttrue(bytessent > 1000000000); } en la actualidad, evidentemente, desactivaríamos la prueba por medio del atributo @ignore con la correspondiente cadena explicativa: @ignore(“takes too long to run”) , pero antes de la aparición de junit 4, era habitual añadir un guion bajo delante del nombre del método. el comentario realizaba su cometido. veamos otro ejemplo: public static simpledateformat makestandardhttpdateformat() { //simpledataformat no es compatible con procesos, //por lo que debe crear cada instancia de forma independiente. simpledateformat df = new simpledateformat(“eee, dd mmm yyyy hh:mm:ss z”); df.settimezone (timezone.gettimezone (“gmt”)); return df; } seguramente conozca soluciones mejores para este problema. estoy de acuerdo, pero el comentario es perfectamente razonable. evita que un programador use un inicializador estático por motivos de eficacia. comentarios todo en ocasiones conviene usar notas con forma de comentarios //todo . en el 93