int size() {} boolean isempty() {} podríamos tener implementaciones separadas para cada método. el método isempty podría controlar un valor booleano y size un contador, o podemos eliminar la duplicación y vincular isempty a la definición de size : boolean isempty() { return 0 == size(); } la creación de un sistema limpio requiere la eliminación de duplicados, aunque sean unas cuantas líneas de código. fíjese en el siguiente ejemplo: public void scaletoonedimension { float desireddimension, float imagedimension) { if (math.abs(desireddimension - imagedimension) < errorthreshold) return; float scalingfactor = desireddimension / imagedimension; scalingfactor = (float)(math.floor(scalingfactor * 100) * 0.01f); renderedop newimage = imageutilities.getscaledimage( image, scalingfactor, scalingfactor); image.dispose(); system.gc(); image = newimage; } public synchronized void rotate(int degrees) { renderedop newimage = imageutilities.getrotatedimage( image, degrees); image.dispose(); system.gc(); image = newimage; } para mantener limpio este sistema, debemos eliminar la pequeña cantidad de duplicación entre los métodos scaletoonedimension y rotate : public void scaletoonedimension ( float desireddimension, float imagedimension) { if (math.abs(desireddimension - imagedimension) < errorthreshold) return; float scalingfactor = desireddimension / imagedimension; scalingfactor = (float)(math.floor(scalingfactor * 100) * 0.01f); replaceimage(imageutilities.getscaledimage( image, scalingfactor, scalingfactor)); } public synchronized void rotate (int degrees) { replaceimage(imageutilities.getrotatedimage(image, degrees)); } private void replaceimage(renderedop newimage) ( 230