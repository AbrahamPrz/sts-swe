int size() {} boolean isEmpty() {} Podríamos tener implementaciones separadas para cada método. El método  isEmpty  podría controlar un valor booleano y  size  un contador, o podemos eliminar la duplicación y vincular  isEmpty  a la definición de  size : boolean isEmpty() { return 0 == size(); } La creación de un sistema limpio requiere la eliminación de duplicados, aunque sean unas cuantas líneas de código. Fíjese en el siguiente ejemplo: public void scaleToOneDimension { float desiredDimension, float imageDimension) { if (Math.abs(desiredDimension - imageDimension) < errorThreshold) return; float scalingFactor = desiredDimension / imageDimension; scalingFactor = (float)(Math.floor(scalingFactor * 100) * 0.01f); RenderedOp newImage = ImageUtilities.getScaledImage( image, scalingFactor, scalingFactor); image.dispose(); System.gc(); image = newImage; } public synchronized void rotate(int degrees) { RenderedOp newImage = ImageUtilities.getRotatedImage( image, degrees); image.dispose(); System.gc(); image = newImage; } Para mantener limpio este sistema, debemos eliminar la pequeña cantidad de duplicación entre los métodos  scaleToOneDimension  y  rotate : public void scaleToOneDimension ( float desiredDimension, float imageDimension) { if (Math.abs(desiredDimension - imageDimension) < errorThreshold) return; float scalingFactor = desiredDimension / imageDimension; scalingFactor = (float)(Math.floor(scalingFactor * 100) * 0.01f); replaceImage(ImageUtilities.getScaledImage( image, scalingFactor, scalingFactor)); } public synchronized void rotate (int degrees) { replaceImage(ImageUtilities.getRotatedImage(image, degrees)); } private void replaceImage(RenderedOp newImage) ( 230