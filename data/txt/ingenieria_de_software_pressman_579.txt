548 PARTE TRES  ADMINISTRACIÓN DE LA CALIDAD de computadora, usando un conjunto de medidas primitivas que pueden derivarse después de  generar el código o de que el diseño esté completo. Las medidas son: n1 /H11005 número de operadores distintos que aparecen en un programa n2  /H11005 número de operandos distintos que aparecen en un programa N1 /H11005 número total de ocurrencias de operador N2 /H11005 número total de ocurrencias de operando Halstead usa estas medidas primitivas para desarrollar: expresiones para la longitud de pro-grama global, volumen mínimo potencial para un algoritmo, volumen real (número de bits re-queridos para especificar un programa), nivel del programa (una medida de complejidad del software), nivel del lenguaje (una constante para un lenguaje determinado) y otras característi-cas, como esfuerzo de desarrollo, tiempo de desarrollo e incluso el número proyectado de fallas en el software. Halstead muestra que la longitud N puede estimarse N /H11005 n 1 log2 n1 /H11001 n2 log2 n2 y el volumen del programa puede definirse V /H11005 N log2 (n1 /H11001 n2) Debe observarse que V variará con el lenguaje de programación y representa el volumen de información (en bits) requerido para especificar un programa. Teóricamente, debe existir un volumen mínimo para un algoritmo particular. Halstead define  una razón de volumen L como la razón del volumen de la forma más compacta de un programa al volumen del programa real. En realidad, L siempre debe ser menor que 1. En términos de  medidas primitivas, la razón de volumen puede expresarse como L /H11005  2 n1 /H11003 n2 N2 El trabajo de Halstead es sensible a la verificación experimental y se ha llevado a cabo un gran trabajo para investigar la ciencia del software. Un análisis de este trabajo está más allá del ám-bito de este libro. Para mayor información, vea [Zus90], [Fen91] y [Zus97].  23.6 M ÉTRICAS  PARA  PRUEBAS Aunque se ha escrito mucho acerca de las métricas de software para pruebas (por ejemplo, [Het93]), la mayoría de las métricas proponen enfocarse en el proceso de las pruebas, no en las características técnicas de las pruebas en sí. En general, los examinadores deben apoyarse en las métricas de análisis, diseño y código para guiarlos en el diseño y la ejecución de los casos de prueba. Las métricas del diseño arquitectónico proporcionan información acerca de la facilidad o  dificultad asociada con las pruebas de integración (sección 23.3) y de la necesidad de software de pruebas especializado (por ejemplo, resguardos y controladores). La complejidad ciclomática (una métrica de diseño en el nivel de componente) yace en el centro de la prueba de ruta base, un método de diseño de casos de prueba que se presentó en el capítulo 18. Además, la comple-jidad ciclomática puede usarse para dirigirse a módulos como candidatos para prueba de unidad extensa. Los módulos con alta complejidad ciclomática tienen más probabilidad de ser proclives al error que los módulos donde su complejidad ciclomática es menor. Por esta razón, debe em-plear esfuerzo por arriba del promedio para descubrir errores en tales módulos antes de que se integren en un sistema.Cita: “El cerebro humano sigue un  conjunto de reglas más rígido [para desarrollo de algoritmos] del que se tiene conocimiento.” Maurice Halstead Los operadores incluyen todo el flujo  de constructos de control, condicionales y operaciones matemáticas. Los operandos abarcan todas las variables y constantes de programa.CONSEJO PUNTO CLAVE Las métricas de prueba se ubican en dos amplias categorías: 1) métricas que intentan predecir el número probable de pruebas requeridas en varios niveles de prueba y 2) métricas que se enfocan en la cobertura de pruebas para un componente determinado. 23Pressman(526-552).indd   54823Pressman(526-552).indd   548 19/1/10   23:29:5819/1/10   23:29:58