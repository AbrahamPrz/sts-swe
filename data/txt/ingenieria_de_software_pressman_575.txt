544 PARTE TRES  ADMINISTRACIÓN DE LA CALIDAD Conforme el valor de mc crece, el acoplamiento de módulo global disminuye. Con la finalidad  de que la métrica de acoplamiento se mueva hacia arriba conforme el grado de acoplamiento  aumenta, una métrica de acoplamiento revisada puede definirse como C /H11005 1 /H11002 mc donde el grado de acoplamiento aumenta conforme el valor de M aumenta. Métricas de complejidad.  Para determinar la complejidad del flujo de control de programa,  pueden calcularse varias métricas de software. Muchas de éstas se basan en el gráfico de flujo.  Un gráfico (capítulo 18) es una representación compuesta de nodos y ligas (también llamadas aristas). Cuando las ligas (aristas) se dirigen, el gráfico de flujo es un gráfico dirigido. McCabe y W atson [McC94] identifican algunos usos importantes para las métricas de com- plejidad: Las métricas de complejidad pueden usarse para predecir información crucial acerca de la confiabili- dad y el mantenimiento de los sistemas de software a partir de análisis automáticos de código fuente [o información de diseño procedimental]. Las métricas de complejidad también proporcionan retro-alimentación durante el proyecto de software para ayudar a controlar la [actividad de diseño]. Durante las pruebas y el mantenimiento, proporcionan información detallada acerca de los módulos de soft-ware para ayudar a destacar áreas de potencial inestabilidad. La métrica de complejidad para software de computadora más ampliamente usada es la com- plejidad ciclomática, originalmente desarrollada por Thomas McCabe [McC76] y que se estudió en detalle en el capítulo 18. Zuse ([Zus90], [Zus97]) presenta una discusión enciclopédica de no menos de 18 diferentes  categorías de métricas de complejidad de software. El autor expone las definiciones básicas para las métricas en cada categoría (por ejemplo, existen algunas variaciones en la métrica de com-plejidad ciclomática) y luego analiza y critica cada una. El trabajo de Zuse es el más exhaustivo publicado a la fecha. 23.3.7  Métricas orientadas a operación Puesto que la clase es la unidad dominante en los sistemas OO, se han propuesto menos métri-cas para operaciones que residen dentro de una clase. Churcher y Shepperd [Chu95] analizan esto cuando afirman: “Los resultados de estudios recientes indican que los métodos tienden a ser pequeños, tanto en términos de número de enunciados como en complejidad lógica [Wil93], lo que sugiere que la estructura de conectividad de un sistema puede ser más importante que el contenido de los módulos individuales.” Sin embargo, puede obtenerse algo de comprensión al examinar las características promedio para los métodos (operaciones). Tres métricas simples, propuestas por Lorenz y Kidd [Lor94], son apropiadas: Tamaño promedio de operación (TO prom).  El tamaño puede determinarse al contar el  número de líneas de código o el de mensajes enviados por la operación. Conforme au-menta el número de mensajes enviados por una sola operación, es probable que las res-ponsabilidades no se hayan asignado bien dentro de una clase. Complejidad de la operación (CO).  La complejidad de una operación puede calcularse  usando cualquiera de las métricas de complejidad propuestas para software convencional [Zus90]. Puesto que las operaciones deben limitarse a una responsabilidad específica, el di-señador debe luchar por mantener la CO tan baja como sea posible. Número promedio de parámetros por operación (NP prom).  Mientras más grande sea  el número de parámetros de operación, más compleja es la colaboración entre objetos. En  general, el NPprom debe mantenerse tan bajo como sea posible.PUNTO CLAVE La complejidad ciclomática es sólo  una entre un gran número de métricas de complejidad. 23Pressman(526-552).indd   54423Pressman(526-552).indd   544 19/1/10   23:29:5719/1/10   23:29:57