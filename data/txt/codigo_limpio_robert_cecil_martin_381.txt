} este fragmento de código realiza tres operaciones. itera por todos los empleados, comprueba si cada uno debe recibir su paga y después paga al empleado. se podría reescribir de esta forma: public void pay() { for (employee e : employees) payifnecessary(e); } private void payifnecessary(employee e) { if (e.ispayday()) calculateanddeliverpay(e); } private void calculateanddeliverpay(employee e) { money pay = e.calculatepay(); e.deliverpay(pay); } cada una de estas funciones hace una sola cosa (véase el capítulo 3). g31: conexiones temporales ocultas las conexiones temporales suelen ser necesarias pero no debe ocultar la conexión. estructure los argumentos de sus funciones de modo que el orden de invocación sea evidente. fíjese en lo siguiente: public class moogdiver { gradient gradient; list<spline> splines; public void dive(string reason) { saturategradient(); reticulatesplines(); diveformoog(reason); } … } el orden de las tres funciones es importante. debe saturar el degradado antes de poder entrelazar las tiras, para después continuar. desafortunadamente, el código no aplica esta conexión temporal. otro programador podría invocar reticulatesplines antes de saturategradient , lo que generaría unsaturatedgradientexception . una solución más acertada sería: 382