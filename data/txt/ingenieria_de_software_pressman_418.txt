CAPÍTULO 17  ESTRATEGIAS DE PRUEBA DE SOFTWARE 387 prueba que se enfocan en entradas y salidas, aunque también pueden usarse técnicas que ejer- citan rutas de programa específicas para asegurar la cobertura de las principales rutas de con-trol. Después de integrar (construir) el software, se realiza una serie de pruebas de orden supe-rior. Deben evaluarse criterios de validación (establecidos durante el análisis de requerimientos). La prueba de validación proporciona la garantía final de que el software cumple con todos los  requerimientos informativos, funcionales, de comportamiento y de rendimiento. El último paso de la prueba de orden superior cae fuera de las fronteras de la ingeniería de  software y en el contexto más amplio de la ingeniería de sistemas de cómputo. El software, una vez validado, debe combinarse con otros elementos del sistema (por ejemplo, hardware, perso-nal, bases de datos). La prueba del sistema verifica que todos los elementos se mezclan de ma- nera adecuada y que se logra el funcionamiento/rendimiento global del sistema.Prueba de unidadCódigoDiseñoRequerimientos “Dirección” de la pruebaPrueba de integraciónPruebas de orden superiorFIGURA 17.2 Pasos de la  prueba del software La escena: Oficina de Doug Miller, mientras con- tinúa el diseño en el nivel de componentes y  comienza la construcción de algunos de ellos. Participantes: Doug Miller, jefe de ingeniería de software; Vinod,  Jamie, Ed y Shakira, miembros del equipo de ingeniería de software de CasaSegura. La conversación: Doug: Me parece que no hemos dedicado suficiente tiempo para  hablar de las pruebas. Vinod: Cierto, pero todos hemos estado un poco ocupados. Y ade- más hemos pensado en ello... en realidad, hemos hecho más que pensar. Doug (sonríe): Lo sé... tenemos exceso de trabajo, pero todavía  debemos pensar en las cosas importantes. Shakira: Me gusta la idea de diseñar pruebas de unidad antes de  comenzar a codificar cualquiera de mis componentes, así que eso es lo que he intentado hacer. Tengo un archivo de pruebas bastante grande para aplicar cuando codifique mis componentes por com-pleto.Doug: Ése es un concepto de programación extrema [proceso de desarrollo de software ágil, véase el capítulo 3], ¿o no? Ed: Lo es. Aun cuando no usamos programación extrema per se,  decidimos que sería buena idea diseñar pruebas de unidad antes de  construir el componente; el diseño nos dará la información que nece-sitamos. Jamie: Yo he hecho lo mismo.Vinod: Y yo tomé el papel de integrador, así que cada vez que uno  de los muchachos me pase un componente, lo integraré y correré una serie de pruebas de regresión sobre el programa parcialmente integrado. He trabajado para diseñar un conjunto de pruebas ade-cuadas para cada función en el sistema. Doug (a Vinod): ¿Con qué frecuencia corres las pruebas?Vinod: Todos los días... hasta que el sistema esté integrado...  bueno, quiero decir hasta que esté integrado el incremento de soft-ware que planeamos entregar. Doug: ¡Muchachos, van adelante de mí!Vinod (ríe): La anticipación lo es todo en el negocio del software,  jefe.CASASEGURA Preparación para la prueba 17Pressman(383-410).indd   38717Pressman(383-410).indd   387 21/1/10   10:59:2021/1/10   10:59:20