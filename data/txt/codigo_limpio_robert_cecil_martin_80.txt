ok, invalid, no_such, locked, out_of_resources, waiting_for_event; } clases como ésta son un imán para las dependencias ; otras muchas clases deben importarlas y usarlas. por ello, cuando cambia la enumeración error , es necesario volver a compilar e implementar dichas clases [20] . esto añade presión a la clase error . los programadores no quieren añadir nuevos errores porque tendrán que volver a generar e implementarlo todo. por ello, reutilizan códigos de error antiguos en lugar de añadir otros nuevos. al usar excepciones en lugar de códigos de error, las nuevas excepciones son derivaciones de la clase de la excepción. se pueden añadir sin necesidad de volver a compilar o implementar [21] . no repetirse [22] fíjese de nuevo en el listado 3-1; verá que hay un algoritmo que se repite cuatro veces, en los casos setup , suitesetup , teardown y suiteteardown . no es fácil detectar esta repetición ya que las cuatro instancias se mezclan con otro código, pero la duplicación es un problema ya que aumenta el tamaño del código y requerirá una modificación cuádruple si alguna vez cambia el algoritmo. también se cuadriplica el riesgo de errores. esta duplicación se remedia gracias al método include del listado 3-7. vuelva a leer el código y fíjese en cómo se ha mejorado la legibilidad del código reduciendo la duplicación. la duplicación puede ser la raíz de todos los problemas del software . existen numerosos principios y prácticas para controlarla o eliminarla. imagine que todas las formas normales de la base de datos de codd sirvieran 81