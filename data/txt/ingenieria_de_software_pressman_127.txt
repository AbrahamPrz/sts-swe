96 PARTE DOS  MODELADO tos más severos (desde el punto de vista del cliente) son aquellos que hacen que el pro- grama no cumpla sus requerimientos. Principio 2. Las pruebas deben planearse mucho antes de que den comienzo.  La  planeación de las pruebas (véase el capítulo 17) comienza tan pronto como se termina el  modelo de requerimientos. La definición detallada de casos de prueba principia apenas se ha concluido el modelo de diseño. Por tanto, todas las pruebas pueden planearse y dise-ñarse antes de generar cualquier código. Principio 3. El principio de Pareto se aplica a las pruebas de software.  En este con- texto, el principio de Pareto implica que 80% de todos los errores no detectados durante las  pruebas se relacionan con 20% de todos los componentes de programas. Por supuesto, el problema es aislar los componentes sospechosos y probarlos a fondo. Principio 4. Las pruebas deben comenzar “en lo pequeño” y avanzar hacia “lo  grande”.  Las primeras pruebas planeadas y ejecutadas por lo general se centran en com-ponentes individuales. Conforme avanzan las pruebas, la atención cambia en un intento por encontrar errores en grupos integrados de componentes y, en última instancia, en todo el sistema. Principio 5. No son posibles las pruebas exhaustivas.  Hasta para un programa de ta- maño moderado, el número de permutaciones de las rutas es demasiado grande. Por esta  razón, durante una prueba es imposible ejecutar todas las combinaciones de rutas. Sin em-bargo, es posible cubrir en forma adecuada la lógica del programa y asegurar que se han probado todas las condiciones en el nivel de componentes. 4.3.5  Principios de despliegue Como se dijo en la parte 1 del libro, la actividad del despliegue incluye tres acciones: entrega, apoyo y retroalimentación. Como la naturaleza de los modelos del proceso del software mo-derno es evolutiva o incremental, el despliegue ocurre no una vez sino varias, a medida que el software avanza hacia su conclusión. Cada ciclo de entrega pone a disposición de los clientes y usuarios finales un incremento de software operativo que brinda funciones y características utilizables. Cada ciclo de apoyo provee documentación y ayuda humana para todas las funcio-nes y características introducidas durante los ciclos de despliegue realizados hasta ese mo-mento. Cada ciclo de retroalimentación da al equipo de software una guía importante que da como resultado modificaciones de las funciones, de las características y del enfoque adoptado para el siguiente incremento. La entrega de un incremento de software representa un punto de referencia importante para  cualquier proyecto de software. Cuando el equipo se prepara para entregar un incremento, de-ben seguirse ciertos principios clave: Principio 1. Deben manejarse las expectativas de los clientes.  Con demasiada fre- cuencia, el cliente espera más de lo que el equipo ha prometido entregar, y la desilusión llega de inmediato. Esto da como resultado que la retroalimentación no sea productiva y arruine la moral del equipo. En su libro sobre la administración de las expectativas, Naomi Karten [Kar94] afirma que “el punto de inicio de la administración de las expectativas es ser más consciente de lo que se comunica y de la forma en la que esto se hace”. Ella sugiere que el ingeniero de software debe tener cuidado con el envío de mensajes conflictivos al cliente (por ejemplo, prometer más de lo que puede entregarse de manera razonable en el plazo previsto, o entregar más de lo que se prometió en un incremento de software y para el siguiente entregar menos). Principio 2. Debe ensamblarse y probarse el paquete completo que se entregará. Debe ensamblarse en un CD-ROM u otro medio (incluso descargas desde web) todo el soft-ware ejecutable, archivos de datos de apoyo, documentos de ayuda y otra información rele- Asegúrese de que su cliente sabe lo  que puede esperar antes de que se entregue un incremento de software. De otra manera, puede apostar a que el cliente espera más de lo que usted le dará.CONSEJO 04Pressman(081-100).indd   9604Pressman(081-100).indd   96 26/1/10   17:32:0126/1/10   17:32:01