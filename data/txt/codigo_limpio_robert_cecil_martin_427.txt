04: public int takeNextId() { 05: return nextId++; 06: } 07: } Veamos la descripción de una prueba que lo demuestre: Recordar el valor actual de  nextId . Crear dos subprocesos y que cada uno invoque  takeNextId()  una vez. Comprobar que el valor de  nextId  es dos más que el inicial. Ejecutar hasta demostrar que  nextId  sólo se ha incrementado en uno y no en dos. En el Listado A-2 se reproduce la prueba: Listado A-2 ClassWithThreadingProblemTest.java. 01: package example; 02: 03: import static org.junit.Assert.fail; 04: 05: import org.junit.Test; 06: 07: public class ClassWithThreadingProblemTest { 08: @Test 09: public void twoThreadsShouldFailEventually() throws Exception { 10: final ClassWithThreadingProblem classWithThreadingProblem = new ClassWithThreadingProblem(); 11: 12: Runnable runnable = new Runnable() { 13: public void run() { 14: ClassWithThreadingProblem.takeNextId(); 15: } 16: }; 17: 18: for (int i = 0; i < 50000; ++i) { 19: int startingId = classWithThreadingProblem.lastId; 20: int expectedResult = 2 + startingId; 21: 22: Thread t1 = new Thread(runnable); 428