siguiente caso, el comentario todo explica por qué la función tiene una implementación incorrecta y cuál debe ser su futuro. // todo-mdm no son necesarios // esperamos que desaparezca en el modelo definitivo protected versioninfo makeversion() throws exception { return null; } todo son tareas que el programador piensa que debería haber hecho pero que no es así. pueden ser un recordatorio para eliminar una función obsoleta o una petición para resolver un problema. pueden ser una solicitud para buscar un nombre más adecuado o para realizar un cambio que dependa de un evento planeado. sea lo que sea, no es excusa para mantener código incorrecto en el sistema. en la actualidad, muchos ide cuentan con funciones especiales para localizar comentarios todo , por lo que seguramente no se pierda. sin embargo, no colapse el código con estos comentarios. examínelos y elimine todos los que pueda. amplificación se puede usar un comentario para amplificar la importancia de algo que, en caso contrario, parecería irrelevante. string listitemcontent = match.group(3).trim(); // el recorte es importante. elimina los espacios iniciales // que harían que el elemento se reconociera como // otra lista. new listitemwidget(this, listitemcontent, this.level + 1); return buildlist(text.substring(match.end())); javadoc en api públicas no hay nada más útil y satisfactorio que una api pública bien descrita. los javadoc de la biblioteca estándar de java son un ejemplo. sería muy complicado crear programas de java sin ellos. si usa una api pública, debe crear javadoc de calidad para la misma, pero recuerde el siguiente consejo a lo largo del capítulo: los javadoc pueden ser 94