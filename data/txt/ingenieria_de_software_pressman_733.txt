702 parte cinco temas avanzados conforme los sistemas se vuelven más complejos, incluso un intento rudimentario por esta- blecer requerimientos amplios está condenado al fracaso. puede intentarse un enunciado de las metas globales, lograrse el delineado de los objetivos intermedios, pero los requerimientos es-tables, ¡ni por casualidad! los requerimientos emergerán conforme todos los involucrados en la ingeniería y construcción de un sistema complejo aprendan más acerca de él, del entorno donde reside y de los usuarios con los que interactuará. esta realidad implica algunas tendencias en la ingeniería del software. primero, deben dise- ñarse modelos de proceso para abarcar el cambio y adoptar los preceptos básicos de la filosofía ágil (capítulo 3). a continuación, deben usarse juiciosamente los métodos que producen mode-los de ingeniería (por ejemplo, modelos de requerimientos y diseño) porque dichos modelos cambiarán repetidamente conforme se adquiera más conocimiento acerca del sistema. final-mente, las herramientas que den apoyo tanto al proceso como a los métodos deben facilitar la adaptación y el cambio. pero existe otro aspecto de los requerimientos emergentes. la gran mayoría del software desarrollado a la fecha supone que la frontera entre el sistema basado en software y su entorno externo es estable. la frontera puede cambiar, pero lo hará en forma controlada, lo que permi-tirá al software adaptarse como parte de un ciclo de mantenimiento de software regular. esta suposición comienza a cambiar. el software de mundo abierto (sección 31.2.2) demanda que los sistemas basados en computadora “se adapten y reaccionen a los cambios de manera dinámica, incluso si no se anticipan” [bar06]. por su naturaleza, los requerimientos emergentes conducen al cambio. ¿cómo se controla la evolución, durante su ciclo de vida, de una aplicación o sistema que se usa ampliamente y qué efecto tiene esto sobre la forma en la que se diseña software? conforme crece el número de cambios, la probabilidad de efectos colaterales no intenciona- dos también lo hace. esto debe ser una causa de preocupación conforme los sistemas complejos con requerimientos emergentes se vuelven la norma. la comunidad de ingeniería del software debe desarrollar métodos que ayuden a los equipos de software a predecir el impacto de los cambios a través de todo un sistema, lo que, por tanto, mitiga los efectos colaterales no inten-cionales. en la actualidad, la capacidad para lograr esto está severamente limitada. 31.3.4 la mezcla de talento a medida que los sistemas basados en software se vuelven más complejos, y conforme la co-municación y la colaboración entre equipos locales se vuelven un lugar común y si los requeri-mientos emergentes (con el flujo de cambios resultante) se vuelven la norma, la propia natura-leza de un equipo de ingeniería del software puede cambiar. cada equipo de software debe devolver una variedad de talento creativo y habilidades técnicas a su parte de un sistema com-plejo, y el proceso global debe permitir que la salida de dichas islas de talento las fusione de manera efectiva. alexandra weber morales [mor05] sugiere la mezcla de talento de un “equipo de ensueño de software”. el cerebro es un arquitecto jefe que puede navegar entre las demandas de los partici-pantes y mapearlas en un marco conceptual tecnológico que puede extenderse e implemen-tarse. la chica de datos es una base de datos y gurú de estructuras de datos que “descompone filas y columnas con profunda comprensión de la lógica de predicados y teoría de conjuntos, como pertenecen al modelo relacional”. el bloqueador es un líder técnico (gerente) que permite al equipo trabajar libre de interferencia de otros miembros del equipo mientras garantiza que ocurra la colaboración. el hacker es un programador consumado que está en casa con pa- trones y lenguajes y puede usarlos de manera efectiva. el recopilador “descubre hábilmente re- querimientos de sistema con [...] comprensión antropológica” y los expresa con precisión y claridad.puesto que los requerimientos emergentes ya son una realidad, su organización debe considerar adoptar un modelo de proceso incremental.consejo 31pressman(695-716).indd  70231pressman(695-716).indd  702 26/1/10  17:33:3826/1/10  17:33:38