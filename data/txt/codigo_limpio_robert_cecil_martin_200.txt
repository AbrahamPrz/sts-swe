public class PreparedInsertSql extends Sql { public PreparedInsertSql(String table, Column[] columns) @Override public String generate() private String placeholderList(Column[] columns) } public class Where { public Where(String criteria) public String generate() } public class ColumnList { public ColumnList(Column[] columns) public String generate() } El código de cada clase se simplifica enormemente. El tiempo necesario para entender las clases se reduce al mínimo. El riesgo de que una función afecte a otra desaparece casi por completo. Desde el punto de vista de las pruebas, resulta más sencillo probar la lógica de esta solución, ya que las clases se aíslan unas de otras. Además, cuando llegue el momento de añadir las instrucciones  update , no cambia ninguna de las clases existentes. Añadimos la lógica para generar instrucciones  update  a una nueva subclase de  Sql ,  UpdateSql . Este cambio no afecta a otro código del sistema. Nuestra lógica  Sql  reestructurada representa lo mejor de ambos mundos. Cumple con SRP y también con otro principio clave del diseño de clases orientadas a objetos, denominado Principio abierto/cerrado [48] : las clases deben abrirse para su ampliación para cerrarse para su modificación. La nueva clase  Sql  se abre a nuevas funcionalidades mediante la creación de subclases pero podemos realizar estos cambios y mantener cerradas las demás clases. Basta con añadir nuestra clase  UpdateSql . Debemos estructurar nuestros sistemas para ensuciarlos lo menos posible cuando los actualicemos con nuevas funciones o cambios. En un sistema ideal, incorporamos nuevas funciones ampliándolo, no modificando el código existente. Aislarnos de los cambios 201