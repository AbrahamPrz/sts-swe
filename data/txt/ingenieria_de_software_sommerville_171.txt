154  Capítulo 6 ■ Diseño arquitectónico 2. Una vista de proceso, que muestre cómo, en el tiempo de operación, el sistema está  compuesto de procesos en interacción. Esta vista es útil para hacer juicios acerca de  las características no funcionales del sistema, como el rendimiento y la disponibilidad. 3. Una vista de desarrollo, que muestre cómo el software está descompuesto para  su desarrollo, esto es, indica la descomposición del software en elementos que se implementen mediante un solo desarrollador o equipo de desarrollo. Esta vista es útil para administradores y programadores de software. 4. Una vista física, que exponga el hardware del sistema y cómo los componentes de  software se distribuyen a través de los procesadores en el sistema. Esta vista es útil para los ingenieros de sistemas que planean una implementación de sistema.  Hofmeister y sus colaboradores (2000) sugieren el uso de vistas similares, pero a éstas agregan la noción de vista conceptual. Esta última es una vista abstracta del sistema que puede ser la base para descomponer los requerimientos de alto nivel en especificaciones más detalladas, ayudar a los ingenieros a tomar decisiones sobre componentes que pue-dan reutilizarse, y representar una línea de producto (que se estudia en el capítulo 16) en vez de un solo sistema. La figura 6.1, que describe la arquitectura de un robot de empa-cado, es un ejemplo de una vista conceptual del sistema. En la práctica, las vistas conceptuales casi siempre se desarrollan durante el proceso de diseño y se usan para apoyar la toma de decisiones arquitectónicas. Son una forma de comunicar a diferentes participantes la esencia de un sistema. Durante el proceso de diseño, también pueden desarrollarse algunas de las otras vistas, al tiempo que se discuten dife-rentes aspectos del sistema, aunque no haya necesidad de una descripción completa desde todas las perspectivas. Además se podrían asociar patrones arquitectónicos, estudiados en la siguiente sección, con las diferentes vistas de un sistema. Hay diferentes opiniones respecto de si los arquitectos de software deben o no usar el UML para una descripción arquitectónica (Clements et al., 2002). Un estudio en 2006 (Lange et al., 2006) demostró que, cuando se usa el UML, se aplica principalmente en una  forma holgada e informal. Los autores de dicho ensayo argumentan que esto era incorrecto. El autor no está de acuerdo con esta visión. El UML se diseñó para describir sistemas orientados a objetos y, en la etapa de diseño arquitectónico, uno quiere describir con fre-cuencia sistemas en un nivel superior de abstracción. Las clases de objetos están muy cerca de la implementación, como para ser útiles en la descripción arquitectónica. Para el autor, el UML no es útil durante el proceso de diseño en sí y prefiere nota-ciones informales que sean más rápidas de escribir y puedan dibujarse fácilmente en un pizarrón. El UML es de más valor cuando se documenta una arquitectura a detalle o se usa un desarrollo dirigido por modelo, como se estudió en el capítulo 5. Algunos investigadores proponen el uso de lenguajes de descripción arquitectónica (ADL, por las siglas de Architectural Description Languages) más especializados (Bass et al., 2003) para describir arquitecturas del sistema. Los elementos básicos de los ADL son componentes y conectores, e incluyen reglas y lineamientos para arquitecturas bien formadas. Sin embargo, debido a su naturaleza especializada, los expertos de dominio y aplicación tienen dificultad para entender y usar los ADL. Esto dificulta la valora-ción de su utilidad para la ingeniería práctica del software. Los ADL diseñados para un dominio particular (por ejemplo, sistemas automotores) pueden usarse como una base  M06_SOMMERVILLE_INGENIERIA_1ED_SE_147-175.indd   154M06_SOMMERVILLE_INGENIERIA_1ED_SE_147-175.indd   154 3/18/11   4:49:07 PM3/18/11   4:49:07 PM