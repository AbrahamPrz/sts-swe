@test public void addappenderwithstream() { logger.addappender(new consoleappender( new patternlayout (“%p %t %m%n”), consoleappender.system_out)); logger.info(“addappenderwithstream”); } @test public void addappenderwithoutstream() { logger.addappender(new consoleappender( new patternlayout(“%p %t %m%n”))); logger.info(“addappenderwithoutstream”); } } ahora sabemos cómo inicializar un sencillo registrador de consola y encapsular ese conocimiento en nuestra propia clase de registro para que el resto de la aplicación se aísle de la interfaz de límite log4j . las pruebas de aprendizaje son algo más que gratuitas las pruebas de aprendizaje no cuestan nada. de todas formas, hemos tenido que aprender la api y crear las pruebas fue una forma sencilla y aislada de adquirir esos conocimientos. las pruebas de aprendizaje fueron experimentos precisos que permitieron aumentar nuestros conocimientos. las pruebas no sólo son gratuitas, sino también rentables. cuando aparezcan nuevas versiones del paquete de terceros, ejecutamos las pruebas de aprendizaje para comprobar si hay diferencias de comportamiento. las pruebas de aprendizaje demuestran que los paquetes de terceros que usamos funcionan de la forma esperada. una vez integrados, no hay garantía de que el código de terceros sea compatible con nuestras necesidades. los autores originales se verán presionados para cambiar el código y ajustarlo a sus propias necesidades. corregirán errores y añadirán nuevas funciones. en cada versión surgirán nuevos riesgos. si el paquete de terceros cambia de una forma incompatible con nuestras pruebas, lo sabremos al instante. independientemente de que necesite los conocimientos proporcionados por las pruebas de aprendizaje, un límite claro debe estar respaldado por un conjunto de pruebas que ejerciten la interfaz de la misma forma que hace el 165