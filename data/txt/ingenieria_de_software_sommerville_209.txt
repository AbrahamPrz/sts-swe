192 capítulo 7 ■ diseño e implementación detalles a la descripción de la solución. la figura 7.12 es la representación en uml del patrón observer. para usar patrones en su diseño, se debe reconocer que cualquier problema de diseño que enfrente es posible que tenga un patrón asociado para aplicarse. los ejemplos de tales problemas, documentados en el libro de patrones original de la “banda de los cua-tro”, incluyen: 1. señalar a varios objetos que cambiaron el estado de algún otro objeto (patrón observer). 2. ordenar las interfaces en un número de objetos relacionados que a menudo se hayan desarrollado incrementalmente (patrón façade, fachada). 3. proporcionar una forma estándar para ingresar a los elementos en una colección, sin importar cómo se implementó dicha colección (patrón iterator, iterador). 4. permitir la posibilidad de extender la funcionalidad de una clase existente en tiempo de operación (patrón decorator, decorador). los patrones soportan reutilización de concepto de alto nivel. cuando intente reutili- zar componentes ejecutables, estará restringido inevitablemente por decisiones de diseño detalladas que los implementadores tomaron de dichos componentes. éstas varían desde los algoritmos particulares usados para implementar los componentes, hasta los objetos y tipos en las interfaces del componente. cuando dichas decisiones de diseño entran en conflicto con los requerimientos particulares, la reutilización de componentes resulta imposible o introduce ineficiencias en su sistema. el uso de patrones significa que se reutilizan las ideas, pero podría adaptar la implementación para ajustarse al sistema que se desarrolla. cuando usted comienza el diseño de un sistema, quizá sea difícil saber, por adelan-tado, si necesitará un patrón particular. por lo tanto, el uso de patrones en un proceso de diseño con frecuencia implica el desarrollo de un diseño, experimentar un problema y, luego, reconocer que puede usarse un patrón. en efecto, esto es posible si se enfoca en los 23 patrones de propósito general documentados en el libro de patrones original. sin subject observer attach (observer) detach (observer) notify ( )update ( ) concretesubject getstate ( ) subjectstateconcreteobserver update ( ) observerstateobserverstate = subject -> getstate ( ) return subjectstatefor all o in observers o -> update ( ) figura 7.12 modelo uml del patrón observer m07_sommerville_ingenieria_1ed_se_176-204.indd  192m07_sommerville_ingenieria_1ed_se_176-204.indd  192 3/18/11  4:50:13 pm3/18/11  4:50:13 pm