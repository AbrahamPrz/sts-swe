closeignoringexception(socket); } catch (exception e) { e.printstacktrace(); } } private void closeignoringexception(socket socket) { if (socket != null) try { socket.close(); } catch (ioexception ignore) { } } private void closeignoringexception(serversocket serversocket) { if (serversocket != null) try { serversocket.close(); } catch (ioexception ignore) { } } } listado a-4 clienttest.java. package com.objectmentor.clientserver.nonthreaded; import java.io.ioexception; import java.net.serversocket; import java.net.socket; import java.net.socketexception; import common.messageutils; public class server implements runnable { serversocket serversocket; volatile boolean keepprocessing = true; public server(int port, int millisecondstimeout) throws ioexception { serversocket = new serversocket(port); serversocket.setsotimeout(millisecondstimeout); } public void run() { system.out.printf(“server starting\n”); while (keepprocessing) { try { system.out.printf(“accepting client\n”); socket socket = serversocket.accept(); system.out.printf(“got client\n”); process(socket); } catch (exception e) { 434