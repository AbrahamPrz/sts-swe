fallan, el código es incorrecto. Diseñe las pruebas en las fases iniciales para que un servidor de integración continua las ejecute lo antes posible. Registre las condiciones de fallo de las pruebas. Ejecutar la prueba en todas las plataformas de desarrollo: De forma repetida y continuada. Cuanto más tiempo se ejecuten las pruebas sin fallos, más probable es que El código de producción sea correcto o Las pruebas no sean adecuadas para revelar los problemas. Ejecutar las pruebas en un equipo con distintas cargas: Si puede simular cargas similares a las del entorno de producción, hágalo. Sin embargo, aunque realice todos estos pasos, no es probable que detecte problemas de subprocesos en el código. Los problemas más complicados son los que sólo se producen una vez cada mil millones de oportunidades. Son el azote de los sistemas complejos. Herramientas para probar código basado en subprocesos IBM ha creado la herramienta ConTest [123] . Lo que hace es instrumentar las clases para aumentar las probabilidades de que falle el código sin subprocesos. No tenemos relación directa con IBM ni con el equipo que ha desarrollado ConTest. Un colega nos la descubrió. Tras varios minutos de usarla, notamos una gran mejoría en la detección de errores. A continuación, le indicamos cómo usar ConTest: Crear pruebas y código de producción, asegurándonos que haya pruebas diseñadas específicamente para simular varios usuarios con diferentes cargas, como mencionamos antes. Instrumentar el código de pruebas y producción con ConTest. Ejecutar las pruebas. 431