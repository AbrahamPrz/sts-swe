212 PARTE DOS  MODELADO campestre, Cabo Cod, etc.). Pero, lo que es más importante, el estilo arquitectónico también es  una plantilla para la construcción. Deben definirse más detalles, especificar sus dimensiones finales, agregar características personalizadas, determinar los materiales de construcción, pero el estilo (un “vestíbulo central colonial”) orienta al constructor en su trabajo. El software construido para sistemas basados en computadora también tiene uno de muchos  estilos arquitectónicos. Cada estilo describe una categoría de sistemas que incluye 1) un con-junto de componentes (como una base de datos o módulos de cómputo) que realizan una fun-ción requerida por el sistema, 2) un conjunto de conectores que permiten la “comunicación, coordinación y cooperación” entre los componentes, 3) restricciones que definen cómo se inte-gran los componentes para formar el sistema y 4) modelos semánticos que permiten que un diseñador entienda las propiedades generales del sistema al analizar las propiedades conocidas de sus partes constituyentes [Bas03]. Un estilo arquitectónico es una transformación que se impone al diseño de todo el sistema.  El objetivo es establecer una estructura para todos los componentes del sistema. En el caso en el que ha de hacerse la reingeniería de una arquitectura ya existente (véase el capítulo 29), la imposición de un estilo arquitectónico dará como resultado cambios fundamentales en la es-tructura del software, incluida la reasignación de las funciones de los componentes [Bos00]. Un patrón arquitectónico, como un estilo de arquitectura, impone la transformación del di- seño de una arquitectura. Sin embargo, un patrón difiere de un estilo en varias formas funda-mentales: 1) el alcance del patrón es menos amplio y se centra en un aspecto de la arquitectura más que en el total de ésta, 2) un patrón impone una regla a la arquitectura, describe la manera en la que el software manejará ciertos aspectos de su funcionalidad en el nivel de la infraestruc-tura (por ejemplo, la concurrencia) [Bos00], 3) los patrones arquitectónicos (véase la sección 9.4) tienden a abocarse a aspectos específicos del comportamiento en el contexto de la arquitectura (por ejemplo, cómo manejarán la sincronización o las interrupciones las aplicaciones en tiempo real). Los patrones se utilizan junto con un estilo arquitectónico para dar forma a la estructura Cita: “En el fondo de la mente de  todo artista hay un patrón o tipo de arquitectura.” G. K. Chesterton ¿Qué es un estilo  arquitectónico?? WebRef Los estilos arquitectónicos basados en  atributos (ABAS) pueden usarse como bloques de construcción para las arquitecturas de software. En la dirección www.sei.cmu.edu/architecture/abas.html, hay información al respecto. En esencia, la arquitectura del software representa una  estructura en la que cierta colección de entidades (con fre- cuencia llamados componentes) está conectada por un conjunto de relaciones definidas (usualmente llamadas conectores). Tanto las com-ponentes como los conectores están asociados con un conjunto de propiedades que permiten que el diseñador diferencie los tipos de componentes y conectores que pueden usarse. Pero, ¿qué clases de estructuras (componentes, conectores y propiedades) se utilizan para describir una arquitectura? Bass y Kazman [Bas03] sugieren cinco estructuras canónicas o fundamentales: Estructura funcional. Los componentes representan entidades de  función o procesamiento. Los conectores representan interfaces que proveen la capacidad de “usar” o “pasar datos a” un componente. Las propiedades describen la naturaleza de los componentes y la organización de las interfaces. Estructura de implementación. “Los componentes son paque- tes, clases, objetos, procedimientos, funciones, métodos, etc., que son vehículos para empacar funciones en varios niveles de abstracción” [Bas03]. Los conectores incluyen la capacidad de pasar datos y con-trol, compartir datos, “usar” y “ser una instancia de”. Las propieda-des se centran en las características de la calidad (por ejemplo, facili-dad de recibir mantenimiento, ser reutilizables, etc.) que surgen cuando se implementa la estructura. Estructura de concurrencia. Los componentes representan “uni- dades de concurrencia” que están organizadas como tareas o trayec-torias paralelas. “Las relaciones [conectores] incluyen sincronizarse-con, tiene-mayor-prioridad-que, envía-datos-a, no-corre-sin y no-corre-con. Las propiedades relevantes para esta estructura inclu-yen prioridad, anticipación y tiempo de ejecución” [Bas03]. Estructura física. Esta estructura es similar al modelo de despliegue  desarrollado como parte del diseño. Los componentes son el hardware físico en el que reside el software. Los conectores son las interfaces entre los componentes del hardware y las propiedades incluyen la capacidad, ancho de banda y rendimiento, entre otros atributos. Estructura de desarrollo. Esta estructura define los componentes,  productos del trabajo y otras fuentes de información que se requieren a medida que avanza la ingeniería de software. Los conectores repre-sentan las relaciones entre los productos del trabajo; las propiedades identifican las características de cada aspecto.  Cada una de estas estructuras presenta un punto de vista de la  arquitectura del software y expone información que es útil para el equi-po de software a medida que realiza la modelación y construcción.INFORMACIÓN Estructuras arquitectónicas canónicas 09Pressman(206-233).indd   21209Pressman(206-233).indd   212 14/1/10   15:44:3714/1/10   15:44:37