566 capítulo 21 ■ ingeniería de software orientada a aspectos en la mayoría de los grandes sistemas, las relaciones entre los requerimientos y com- ponentes del programa son complejas. un solo requerimiento puede implementarse mediante algunos componentes y cada uno de éstos puede incluir elementos de varios requerimientos. en la práctica, esto significa que implementar un cambio a los reque-rimientos implica comprender y modificar varios componentes. otra posibilidad es que un componente puede proporcionar alguna funcionalidad central, pero también incluir código que implemente muchos requerimientos de sistema. aun cuando parezca haber un significativo potencial de reutilización, podría ser costoso reutilizar tales com-ponentes. la reutilización tal vez implique modificarlos para eliminar el código adicional de manera que no se asocie con la funcionalidad central del componente. la ingeniería de software orientada a aspectos (aose, por las siglas de aspect-orien-ted software engineering) es un enfoque al desarrollo de software que está destinado a enfrentar este problema y así elaborar programas más fáciles de mantener y reutilizar. aose se basa en abstracciones llamadas aspectos, que ponen en marcha la funcionali-dad de sistema que pueden requerirse en varios lugares diferentes en un programa. los aspectos encapsulan funcionalidad que atraviesa y coexiste con otra funcionalidad que se incluye en un sistema. se usan al lado de otras abstracciones como objetos y métodos. un programa ejecutable orientado a aspectos se crea automáticamente al combinar (tejer, weave) objetos, métodos y aspectos, de acuerdo con las especificaciones comprendidas en el código fuente del programa. una importante característica de los aspectos es que incluyen una definición sobre dónde deben incluirse en un programa, además del código que implementa la com-petencia que atraviesa. puede especificar que el código transversal ( cross-cutting ) debe incluirse antes o después de una llamada de método específico o al acceder a un atributo. en esencia, el aspecto se entrelaza en el programa central para crear un nuevo sistema aumentado. el beneficio principal de un enfoque orientado a aspectos es que soporta la separación de competencias. como se explica en la sección 21.1, la separación de competencias en elementos independientes, en vez de incluir diferentes competencias en la misma abs-tracción lógica, es una buena práctica de la ingeniería de software. al representar las competencias transversales como aspectos, éstas pueden comprenderse, reutilizarse y modificarse de manera independiente, sin tomar en cuenta dónde se use el código. por ejemplo, la autenticación de usuario puede representarse como un aspecto que solicite un nombre de usuario y una contraseña. esto puede integrarse automáticamente en el programa siempre que se requiera autenticación. considere que tiene un requerimiento en el que se precise autenticación del usuario antes de realizar cualquier cambio de información personal en una base de datos. puede describir esto en un aspecto al enunciar que debe incluir un código de autenticación antes de cada solicitud de métodos que actualicen datos personales. posteriormente, puede ampliar el requerimiento de autenticación a todas las actualizaciones de la base de datos. esto se implementa fácilmente al modificar el aspecto. sólo se cambia la definición de dónde debe incorporarse el código de autenticación en el sistema. no tiene que buscar a través del sistema para encontrar todas las incidencias de dichos métodos. por consiguiente, tendrá menor probabilidad de cometer errores e introducir vulnerabilidades de seguridad acciden-tales en su programa. la investigación y el desarrollo en la orientación a aspectos se enfocaron esencialmente en la programación orientada a aspectos. se han diseñado lenguajes de programación orien-tados a aspectos, como aspectj (colyer y clement, 2005; colyer et al., 2005; kiczales et al., 2001; laddad, 2003a; laddad, 2003b), que extienden la programación orientada m21_sommerville_ingenieria_1ed_se_565-590.indd  566m21_sommerville_ingenieria_1ed_se_565-590.indd  566 3/18/11  5:38:57 pm3/18/11  5:38:57 pm