6.3 ■ patrones arquitectónicos 157 6.3.1 arquitectura en capas las nociones de separación e independencia son fundamentales para el diseño arquitec- tónico porque permiten localizar cambios. el patrón mvc, que se muestra en la figura 6.2, separa elementos de un sistema, permitiéndoles cambiar de forma independiente. por ejemplo, agregar una nueva vista o cambiar una vista existente puede hacerse sin modificación alguna a los datos subyacentes en el modelo. el patrón de arquitectura en capas es otra forma de lograr separación e independencia. este patrón se ilustra en la figura 6.5. aquí, la funcionalidad del sistema está organizada en capas separadas, y cada una se apoya sólo en las facilidades y los servicios ofrecidos por la capa inmediatamente debajo de ella. este enfoque en capas soporta el desarrollo incremental de sistemas. conforme se desarrolla una capa, algunos de los servicios proporcionados por esta capa deben quedar a disposición de los usuarios. la arquitectura también es cambiable y portátil. en tanto su interfaz no varíe, una capa puede sustituirse por otra equivalente. más aún, cuando las interfaces de capa cambian o se agregan nuevas facilidades a una capa, sólo resulta afectada la capa adyacente. a medida que los sistemas en capas localizan dependencias de máquina en capas más internas, se facilita el ofrecimiento de implementaciones mul-tiplataforma de un sistema de aplicación. sólo las capas más internas dependientes de la máquina deben reimplantarse para considerar las facilidades de un sistema operativo o base de datos diferentes. la figura 6.6 es un ejemplo de una arquitectura en capas con cuatro capas. la capa inferior incluye software de soporte al sistema, por lo general soporte de base de datos y sistema operativo. la siguiente capa es la de aplicación, que comprende los componentes relacionados con la funcionalidad de la aplicación, así como los componentes de utilidad que usan otros componentes de aplicación. la tercera capa se relaciona con la gestión de interfaz del usuario y con brindar autenticación y autorización al usuario, mientras que la navegador controlador formato a desplegar solicita actualizaciónnotificación de cambiosolicita regeneracióneventos de usuariohttp solicita procesamientológica de aplicaciónespecíficavalidación de datospágina dinámicageneracióngestión de formatos lógica empresarialbase de datosvista modelo figura 6.4 arquitectura de aplicación web con el patrón mvc m06_sommerville_ingenieria_1ed_se_147-175.indd  157m06_sommerville_ingenieria_1ed_se_147-175.indd  157 3/18/11  4:49:07 pm3/18/11  4:49:07 pm