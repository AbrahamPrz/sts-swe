El desarrollo del software no se detiene cuando un sistema se entrega, sino que continúa a  lo largo de la vida de éste. Después de distribuir un sistema, inevitablemente debe modi-ficarse, con la finalidad de mantenerlo útil. Tanto los cambios empresariales como los de las expectativas del usuario generan nuevos requerimientos para el software existente. Es posible que tengan que modificarse partes del software para corregir errores encontrados durante su operación, para adaptarlo a los cambios en su plataforma de software y hard-ware, y para mejorar su rendimiento u otras características no funcionales. La evolución del software es importante porque las organizaciones invierten grandes cantidades de dinero en él y en la actualidad son completamente dependientes de dichos sistemas. Sus sistemas se consideran activos empresariales críticos, por lo que tienen que invertir en el cambio del sistema para mantener el valor de estos activos. En consecuen-cia, las compañías más grandes gastan más en conservar los sistemas existentes que en el desarrollo de sistemas nuevos. Con base en una encuesta industrial informal, Erlikh (2000) sugiere que entre el 85 y 90% de los costos del software organizacional son costos de evolución; mientras que otros estudios sugieren que éstos conforman alrededor de dos tercios de los costos del software. Desde luego, los costos del cambio del software repre-sentan una gran parte del presupuesto de TI de todas las compañías. La evolución del software puede potenciarse al cambiar los requerimientos empre-sariales, con reportes de defectos del software o por cambios a otros sistemas en un entorno del sistema de software. Hopkins y Jenkins (2008) acuñaron el término “desarrollo de software abandonado” (subutilizado) para describir situaciones en que los sistemas de software tienen que desarrollarse y gestionarse en un ambiente donde dependen de muchos otros sistemas de software. Por consiguiente, la evolución de un sistema rara vez puede considerarse en aisla-miento. Los cambios al entorno conducen a cambios en el sistema que, a la vez, pueden generar más cambios en el entorno. Desde luego, el hecho de que los sistemas tengan que evolucionar en un ambiente “rico en sistemas” con frecuencia aumenta las dificultades y los costos de la evolución. Además de comprender y analizar el impacto de un cambio propuesto sobre el sistema en sí, también es probable que se deba valorar cómo esto afec-taría a otros sistemas en el entorno operacional. Por lo general, los sistemas de software útiles tienen una vida muy larga. Por ejemplo, los grandes sistemas militares o de infraestructura, como los de control de tráfico aéreo, llegan a durar 30 años o más; en tanto que los sistemas empresariales con frecuencia superan los 10 años. Puesto que el costo del software es elevado, una compañía debe usar un sistema de software durante muchos años para recuperar su inversión. Evidentemente, los requerimientos de los sistemas instalados cambian conforme lo hacen el negocio y su entorno. Por consiguiente, se crean a intervalos regulares nuevas versiones de los siste-mas, las cuales incorporan cambios y actualizaciones. Por ende, la ingeniería de software se debe considerar como un proceso en espiral, con requerimientos, diseño, implementación y pruebas continuas, a lo largo de la vida del sistema (figura 9.1). Esto comienza por crear la versión 1 del sistema. Una vez entregada, se proponen cambios y casi de inmediato comienza el desarrollo de la versión 2. De hecho, la necesidad de evolución puede volverse evidente incluso antes de que el sistema se distribuya, de manera que las futuras versiones del software estarían en desarrollo antes de que se libere la versión actual. Este modelo de evolución de software implica que una sola organización es responsable tanto del desarrollo del software inicial como de la evolución del software. La mayoría de los productos de software empacados se desarrollan siguiendo este enfoque. Para el software personalizado, por lo general se utiliza un enfoque diferente. Una compañía de Capítulo 9 ■ Evolución del software  235 M09_SOMMERVILLE_INGENIERIA_1ED_SE_234-260.indd   235M09_SOMMERVILLE_INGENIERIA_1ED_SE_234-260.indd   235 3/18/11   4:52:24 PM3/18/11   4:52:24 PM