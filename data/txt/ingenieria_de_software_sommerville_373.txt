356 capítulo 13 ■ ingeniería de conﬁ abilidad lineamientos de programación confiable 1. controlar la visibilidad de la información en un programa. 2. comprobar la validez de todas las entradas.3. proporcionar un manejador para todas las excepciones.4. minimizar el uso de códigos proclives a error.5. ofrecer capacidades de reinicio.6. comprobar los límites.7. incluir interrupciones cuando se soliciten componentes externos.8. nombrar todas las constantes que representan valores del mundo real. cuando uno programa debe adoptar un principio análogo para controlar el acceso a las variables y estructuras de datos que se utilizan. a los componentes del programa sólo se les debe permitir el acceso a los datos que necesitan para su implementación. otros datos de programa deben ser inaccesibles y ocultarse de ellos. si se oculta información, ésta no se puede corromper por componentes de programa que se supone que no deben usarlos. si la interfaz permanece invariable, la representación de datos debería cambiarse sin afectar a otros componentes en el sistema. esto se logra al implementar estructuras de datos en el programa como tipos de datos abstractos. un tipo de datos abstractos es un tipo de datos en que la estructura interna y la representación de una variable de dicho tipo están ocultas. la estructura y los atributos del tipo no son visibles externamente y todo el acceso a los datos es a través de operaciones. por ejemplo, se puede tener un tipo de datos abstractos que represente una cola de peticio-nes de servicio. las operaciones deben incluir get (conseguir) y put (poner), que agregan y eliminan objetos de la cola, y una operación que regrese el número de objetos en la cola. inicialmente se implementaría la cola como un arreglo, pero posteriormente cambiaría la implementación a una lista entrelazada. esto se logra sin cambio alguno al código que usa la cola, porque nunca se accede de manera directa a la representación de la cola. también se pueden usar tipos de datos abstractos para implementar comprobaciones de que un valor asignado esté dentro del rango. por ejemplo, suponga que quiere representar la temperatura de un proceso químico, en que las temperaturas permitidas se hallan dentro del rango de 20 a 200 grados celsius. al incluir una comprobación del valor a asignar den-tro de la operación de tipo de datos abstractos, garantizaría que el valor de la temperatura nunca está fuera del rango requerido. en algunos lenguajes orientados a objetos es posible implementar tipos de datos abs-tractos mediante definiciones de interfaz, en las que se declara la interfaz a un objeto sin referencia a su implementación. por ejemplo, se puede definir una interfaz queue (cola), que soporta métodos para colocar objetos en la cola, eliminarlos de ésta y consultar el tamaño de la misma. en la clase de objetos que implementa esta interfaz, los atributos y los métodos para dicha clase deben ser privados. lineamiento 2: comprobar la validez de todas las entradas todos los programas toman entradas de su entorno y las procesan. la especificación hace suposiciones sobre dichas entradas, que reflejan su uso en el mundo real. por ejem-plo, se supone que un número de cuenta bancaria siempre es un entero positivo de ocho dígitos. sin embargo, en muchos casos, la especificación del sistema no define qué accio-figura 13.8 lineamientos de buena práctica para programación confiable m13_sommerville_ingenieria_1ed_se_341-365.indd  356m13_sommerville_ingenieria_1ed_se_341-365.indd  356 3/18/11  4:59:14 pm3/18/11  4:59:14 pm