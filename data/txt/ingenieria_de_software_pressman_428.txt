CAPÍTULO 17  ESTRATEGIAS DE PRUEBA DE SOFTWARE 397 Cada una de estas fases de la prueba de integración delinea una amplia categoría funcional  dentro del software y por lo general puede relacionarse con un dominio específico dentro de la  arquitectura del software. Por tanto, las construcciones de programas (grupos de módulos) se crean para corresponder a cada fase. Los siguientes criterios y pruebas correspondientes se apli-can a todas las fases de prueba: Integridad de interfaz. Las interfaces internas y externas se prueban conforme cada módulo  (o grupo) se incorpora en la estructura. Validez funcional. Se realizan pruebas diseñadas para descubrir errores funcionales ocultos. Contenido de la información. Se realizan pruebas diseñadas para descubrir errores ocultos  asociados con las estructuras de datos locales o globales. Rendimiento. Se realizan pruebas diseñadas para verificar los límites del rendimiento esta- blecidos durante el diseño del software. Como parte del plan de prueba, también se discute un calendario para la integración, el de- sarrollo de software de sobrecarga del sistema y temas relacionados. Se establecen las fechas  de inicio y fin de cada fase y se definen “ventanas disponibles” para módulos de prueba de uni-dad. Una breve descripción del software de sobrecarga (representantes y controladores) se concentra en las características que pueden requerir de un esfuerzo especial. Finalmente, se describe el entorno y los recursos de la prueba. Configuraciones inusuales de hardware,  simuladores peculiares y herramientas o técnicas de prueba especial son algunos de los muchos  temas que también pueden analizarse. A continuación se describe el procedimiento de prueba detallado que se requiere para lograr  el plan de prueba. Se señala el orden de la integración y las pruebas correspondientes en cada paso de ésta. También se incluye una lista de todos los casos de prueba (anotados para referen-cia posterior) y los resultados esperados. En un Reporte de prueba, que puede anexarse a la Especificación pruebas si se desea, se regis- tra una historia de resultados, problemas o peculiaridades de prueba reales. La información contenida en esta sección puede ser vital durante el mantenimiento del software. También se presentan las referencias y apéndices apropiados. Como todos los demás elementos de una configuración de software, el formato de la especi- ficación pruebas puede adaptarse a las necesidades locales de una organización de ingeniería de software. Sin embargo, es importante señalar que una estrategia de integración (contenida en un plan de prueba) y los detalles de la prueba (descritos en un procedimiento de prueba) son ingredientes esenciales y deben aparecer.  17.4 E STRATEGIAS  DE PRUEBA  PARA  SOFTWARE  ORIENTADO  A OBJETO3 Enunciado de manera simple, el objetivo de probar es encontrar el mayor número posible de errores con una cantidad manejable de esfuerzo aplicado durante un lapso realista. Aunque este objetivo fundamental se mantiene invariable para el software orientado a objeto, la naturaleza de este software cambia tanto la estrategia como las tácticas de la prueba (capítulo 19). 17.4.1  Prueba de unidad en el contexto OO Cuando se considera software orientado a objeto, el concepto de unidad cambia. La encapsula-ción determina la definición de clases y objetos. Esto significa que cada clase y cada instancia de una clase empaqueta los atributos (datos) y las operaciones que manipulan estos datos. Por lo ¿Qué criterios deben  usarse para diseñar pruebas de integración?? 3 En el apéndice 2 se presentan conceptos básicos orientados a objeto. 17Pressman(383-410).indd   39717Pressman(383-410).indd   397 21/1/10   10:59:2321/1/10   10:59:23