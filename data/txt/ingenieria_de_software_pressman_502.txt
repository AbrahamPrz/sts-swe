CAPÍTULO 20  PRUEBA DE APLICACIONES WEB 471 Uno de los errores comúnmente mencionados es el desbordamiento de buffer, que permite que código  malicioso se ejecute en la máquina cliente. Por ejemplo, ingresar una URL en un navegador que es mucho más larga que el tamaño de buffer asignado para la URL provocará un error de sobreescritu-ra de memoria (desbordamiento de buffer) si el navegador no tiene código de detección de error para validar la longitud de la URL ingresada. Un hacker experimentado puede explotar astutamente este error al escribir una URL larga con código que se va a ejecutar y que puede hacer que el navegador derribe o altere las configuraciones de seguridad (de alto a bajo) o, peor aún, corromper datos del usuario. Otra vulnerabilidad potencial en el lado cliente es el acceso no autorizado a las c ookies co- locadas dentro del navegador. Los sitios web creados con intenciones maliciosas pueden adqui- rir información contenida dentro de cookies legítimas y usar esta información en formas que  ponen en riesgo la privacidad del usuario o, peor aún, que montan el escenario para el robo de identidad. Los datos comunicados entre el cliente y el servidor son vulnerables al spoofing (engaño). El  spoofing ocurre cuando un extremo de la ruta de comunicación se trastorna por una entidad con intenciones maliciosas. Por ejemplo, un usuario puede ser engañado por un sitio malicioso que actúa como si fuese el servidor de la webapp legítimo (apariencia y sensación idénticas). La in-tención es robar contraseñas, información personal o datos de crédito. En el lado servidor, las vulnerabilidades incluyen ataques de negación de servicio y guiones  maliciosos que pueden pasar hacia el lado cliente o usarse para deshabilitar operaciones del servidor. Además, puede accederse sin autorización a las bases de datos en el lado servidor (robo de datos). Para proteger contra éstas (y muchas otras) vulnerabilidades, se implanta uno o más de los  siguientes elementos de seguridad [Ngu01]: • Firewall: mecanismo de filtrado, que es una combinación de hardware y software que examina cada paquete de información entrante para asegurarse de que proviene de una fuente legítima y que bloquea cualquier dato sospechoso. • Autenticación: mecanismo de verificación que valida la identidad de todos los clientes y servidores, y permite que la comunicación ocurra solamente cuando ambos lados se verifican. • Encriptado: mecanismo de codificación que protege los datos sensibles al modificarlos de forma que hace imposible leerlos por quienes tienen intenciones maliciosas. El encriptado se fortalece usando certificados digitales que permiten al cliente verificar el destino al que se transmiten los datos. • Autorización: mecanismo de filtrado que permite el acceso al entorno cliente o servidor sólo a aquellos individuos con códigos de autorización apropiados (por ejemplo, ID de usuario y contraseña). Las pruebas de seguridad deben diseñarse para sondear cada una de estas tecnologías de segu-ridad con la intención de descubrir huecos en la seguridad. El diseño real de las pruebas de seguridad requiere conocimiento profundo del trabajo in- terno de cada elemento de seguridad y amplia comprensión de una gran gama de tecnologías de redes. En muchos casos, la prueba de seguridad se subcontrata con firmas que se especiali-zan en dichas tecnologías.  20.9 P RUEBA  DE RENDIMIENTO Nada es más frustrante que una webapp que tarda minutos en cargar contenido cuando sitios de la competencia descargan contenido similar en segundos. Nada es más exasperante que Si la webapp es crucial para el  negocio, mantiene datos sensibles o es un blanco probable de los hackers, es buena idea subcontratar pruebas de seguridad con un proveedor que se especialice en ellas.CONSEJO PUNTO CLAVE Las pruebas de seguridad deben diseñarse para ejercitar firewalls, autenticación, encriptado y autorización. 20Pressman(453-477).indd   47120Pressman(453-477).indd   471 21/1/10   10:58:1121/1/10   10:58:11