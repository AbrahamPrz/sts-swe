capítulo 13 ■ referencias 365 13.8. mencione dos razones por las que diferentes versiones de un sistema, basadas en diversidad de software, podrían fallar en forma similar. 13.9. explique por qué se deben manejar explícitamente todas las excepciones en un sistema cuya intención es lograr un nivel de disponibilidad alto. 13.10. el uso de técnicas para la producción de software seguro, como se estudió en este capítulo, naturalmente incluye considerables costos adicionales. ¿qué costos adicionales se justificarían si 100 vidas se salvarían durante los 15 años de vida de un sistema? ¿los mismos costos se justificarían si se salvaran 10 vidas? ¿cuánto vale una vida? ¿las capacidades de ingreso de las personas afectadas hacen una diferencia en este juicio? referencias avizienis, a. (1985). “the n-version approach to fault-tolerant software”. ieee trans. on software eng., se-11 (12), 1491–501. avizienis, a. a. (1995). “a methodology of n-version programming”. in software fault tolerance. lyu, m. r. (ed.). chichester: john wiley & sons. 23–46.boehm, b. (2002). “get ready for agile methods, with care”. ieee computer, 35 (1), 64–9. brilliant, s. s., knight, j. c. y leveson, n. g. (1990). “analysis of faults in an n-version software experiment”. ieee trans. on software engineering, 16 (2), 238–47. dijkstra, e. w. (1968). “goto statement considered harmful”. comm. acm., 11 (3), 147–8. hatton, l. (1997). “n-version design versus one good version”. ieee software, 14 (6), 71–6. knight, j. c. y leveson, n. g. (1986). “an experimental evaluation of the assumption of independence in multi-version programming”. ieee trans. on software engineering., se-12 (1), 96–109. leveson, n. g. (1995). safeware: system safety and computers. reading, mass.: addison-wesley.lindvall, m., muthig, d., dagnino, a., wallin, c., stupperich, m., kiefer, d., may, j. y kahkonen, t. (2004). “agile software development in large organizations”. ieee computer, 37 (12), 26–34. parnas, d. l., van schouwen, j. y shu, p. k. (1990). “evaluation of safety-critical software”. comm. acm, 33 (6), 636–51. pullum, l. l. (2001). software fault tolerance techniques and implementation . norwood, mass.: artech house.storey, n. (1996). safety-critical computer systems. harlow, uk: addison-wesley.torres-pomales, w. (2000). “software fault tolerance: a tutorial.” http://ntrs.nasa.gov/archive/nasa/casi./20000120144_2000175863.pdf. m13_sommerville_ingenieria_1ed_se_341-365.indd  365m13_sommerville_ingenieria_1ed_se_341-365.indd  365 3/18/11  4:59:14 pm3/18/11  4:59:14 pm