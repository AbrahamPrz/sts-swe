19.2 ■ Ingeniería de servicio  523 servicios. Por lo general, no es aconsejable hacer conjeturas de que los usuarios del servi- cio tendrán comprensión completa de la especificación de éste. Los mensajes de entrada pueden ser incorrectos, de modo que habrá que definir excepciones que reporten las entradas incorrectas al cliente del servicio. En el desarrollo de componentes de reutili-zación, comúnmente es una buena práctica dejar todo el manejo de excepciones al usua-rio del componente. El desarrollador del servicio no debe imponer su visión acerca de cómo deben manejarse las excepciones. Una vez establecida una descripción lógica informal de lo que debe hacer el servi-cio, la siguiente etapa es definir la estructura de los mensajes de entrada y salida, así como los tipos utilizados en dichos mensajes. XML es una notación inconveniente para usar en esta etapa. Es mejor representar los mensajes como objetos y definirlos usando el UML o un lenguaje de programación, como Java. Entonces pueden convertirse manual o automáticamente a XML. La figura 19.10 muestra la estructura de los mensajes de entrada y salida para la operación getDelivery en el servicio de catálogo. Observe cómo se agregaron detalles a la descripción al anotar el diagrama UML con restricciones. Éstas definen la longitud de las cadenas que representan a la compañía y al artículo de catálogo, y especifican que el número de artículos debe ser mayor que cero y que la entrega debe ser posterior a la fecha actual. Las notaciones también muestran cuáles códigos de error se asocian con cada posible falla. La etapa final del proceso de diseño de servicio es traducir el diseño de interfaz del servicio a WSDL. Como se discutió en la sección previa, una representación WSDL es amplia y detallada, y por lo tanto si se hace manualmente es fácil cometer errores en esta etapa. Sin embargo, la mayoría de los entornos de programación que soportan el desarro-llo orientado a servicios (por ejemplo, el entorno ECLIPSE) incluyen herramientas que pueden traducir una descripción de interfaz lógica en su correspondiente representación WSDL.gdIn cID: cadena catNum: cadenanumItems: enterosize (cID) = 6size (catNum) = 10numItems > 0  gdOut catNum: cadenadelivDate: fechasize (catNum) = 10delivDate > Today  gdFault errCode: enteroId compañía inválido errCode = 1Número de catálogo inválido errCode = 2No disponible errCode = 3Cero ítems solicitados errCode = 4  Figura 19.9 Diseño de  interfaz de catálogo M19_SOMMERVILLE_INGENIERIA_1ED_SE_508-536.indd   523M19_SOMMERVILLE_INGENIERIA_1ED_SE_508-536.indd   523 3/18/11   5:04:57 PM3/18/11   5:04:57 PM