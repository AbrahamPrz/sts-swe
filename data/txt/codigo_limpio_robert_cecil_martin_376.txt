} private void printAndClearItemList() { formatter.format(page); page.clear(); } private void addLineItemToPage(HourlyEmployee e) { LineItem item = new LineItem(); item.name = e.getName(); item.hours = e.getTenthsWorked() / 10; item.tenths = e.getTenthsWorked() % 10; page.add(item); } public class LineItem { public String name; public int hours; public int tenths; } } Este código tiene una dependencia lógica que no se ha convertido en física. ¿La detecta? Es la constante  PAGE_SIZE . ¿Para qué necesita HourlyReporter  saber el tamaño de la página? El tamaño de la página debe ser responsabilidad de  HourlyReportFormatter . La declaración de PAGE_SIZE  en  HourlyReporter  representa una responsabilidad desubicada [G17] que hace que  HourlyReporter  asuma que conoce el tamaño que debe tener la página. Esta presunción es una dependencia lógica.  HourlyReporter depende de que  HourlyReportFormatter  pueda procesar tamaños de página de hasta 55. Si alguna implementación de  HourlyReportFormatter  no puede asumir esos tamaños, se producirá un error. Podemos convertir en física esta dependencia si creamos un nuevo método en  HourlyReportFormatter  con el nombre  getMaxPageSize() . Tras ello,  HourlyReporter  invoca esta función en lugar de usar la constante  PAGE_SIZE . G23: Polimorfismo antes que If/Else o Switch/Case Puede parecer una sugerencia extraña dado el tema descrito en el capítulo 6. En este capítulo, afirmo que las instrucciones  switch  son adecuadas en partes del sistema en las que se añadan más funciones nuevas que tipos nuevos. 377