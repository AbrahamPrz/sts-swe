código, sino que es prácticamente imposible ver lo que el código hace debido a todo ese control de errores. El control de errores es importante,  pero si oscurece la lógica, es incorrecto . En este capítulo detallaremos diversas técnicas y consideraciones que puede usar para crear código limpio y robusto, código que procese los errores con elegancia y estilo. Usar excepciones en lugar de códigos devueltos En el pasado, muchos lenguajes carecían de excepciones. Las técnicas para procesar e informar de errores eran limitadas. Se definía un indicador de error o se devolvía un código de error que el invocador podía comprobar. El código del Listado 7-1 ilustra estos enfoques. Listado 7-1 DeviceController.java. public class DeviceController { … public void sendShutDown() { DeviceHandle handle = getHandle(DEV1); // Comprobar el estado del dispositivo if (handle != DeviceHandle.INVALID) { // Guardar el estado del dispositivo en el campo de registro retrieveDeviceRecord(handle); // Si no está suspendido, cerrarlo if { record.getStatus() != DEVICE_SUSPENDED) { pauseDevice(handle); clearDeviceWorkQueue(handle); closeDevice(handle); } else { logger.log(“Device suspended. Unable to shut down”); } } else { logger.log(“Invalid handle for: ” + DEV1.toString()); } } … } El problema de estos enfoques es que confunden al invocador. El invocador debe comprobar inmediatamente los errores después de la 147