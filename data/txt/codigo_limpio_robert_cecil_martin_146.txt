código, sino que es prácticamente imposible ver lo que el código hace debido a todo ese control de errores. el control de errores es importante, pero si oscurece la lógica, es incorrecto . en este capítulo detallaremos diversas técnicas y consideraciones que puede usar para crear código limpio y robusto, código que procese los errores con elegancia y estilo. usar excepciones en lugar de códigos devueltos en el pasado, muchos lenguajes carecían de excepciones. las técnicas para procesar e informar de errores eran limitadas. se definía un indicador de error o se devolvía un código de error que el invocador podía comprobar. el código del listado 7-1 ilustra estos enfoques. listado 7-1 devicecontroller.java. public class devicecontroller { … public void sendshutdown() { devicehandle handle = gethandle(dev1); // comprobar el estado del dispositivo if (handle != devicehandle.invalid) { // guardar el estado del dispositivo en el campo de registro retrievedevicerecord(handle); // si no está suspendido, cerrarlo if { record.getstatus() != device_suspended) { pausedevice(handle); cleardeviceworkqueue(handle); closedevice(handle); } else { logger.log(“device suspended. unable to shut down”); } } else { logger.log(“invalid handle for: ” + dev1.tostring()); } } … } el problema de estos enfoques es que confunden al invocador. el invocador debe comprobar inmediatamente los errores después de la 147