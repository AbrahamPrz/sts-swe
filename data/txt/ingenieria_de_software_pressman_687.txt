656 parte cuatro administración de proyectos de software ley de conservación de estabilidad organizativa (1980): la tasa de actividad global efectiva promedio en un sistema tipo e en evolución no varía durante el tiempo de vida del producto. ley de conservación de familiaridad (1980): conforme un sistema tipo e evoluciona, todo lo asociado con él: desarrolladores, personal de ventas, usuarios, etc., deben mantener el dominio de su contenido y comportamiento para lograr evolución satisfactoria. el crecimiento excesivo disminuye dicho dominio. por tanto, el crecimiento incremental promedio permanece sin variación conforme el sistema evoluciona. ley de crecimiento continuo (1980): el contenido funcional de los sistemas tipo e debe aumen- tar continuamente para mantener la satisfacción del usuario durante su tiempo de vida. ley de declive de la calidad (1996): la calidad de los sistemas tipo e declinará, a menos que se mantengan y adapten rigurosamente a los cambios del entorno operativo. ley de realimentación del sistema (1996): los procesos evolutivos tipo e constituyen sistemas de realimentación multinivel, multibucle y multiagente, y deben tratarse como tales para lograr mejora significativa sobre cualquier base razonable. las leyes que definieron lehman y sus colegas son parte inherente de una realidad de la inge- niería de software. en este capítulo se estudia el reto del mantenimiento del software y las ac-tividades de reingeniería que se requieren para extender la vida efectiva de los sistemas here-dados. 29.1 m antenimiento de software éste comienza casi de inmediato. el software se libera a los usuarios finales y, en cuestión de días, los reportes de errores se filtran de vuelta hacia la organización de ingeniería de software. en semanas, una clase de usuarios indica que el software debe cambiarse de modo que pueda ajustarse a las necesidades especiales de su entorno. y en meses, otro grupo corporativo, que no quería saber nada del software cuando se liberó, ahora reconoce que puede ofrecerle bene-ficios inesperados. necesitará algunas mejoras para hacer que funcione en su mundo. el reto del mantenimiento del software comienza. uno se enfrenta con una creciente lista de corrección de errores, peticiones de adaptación y mejoras categóricas que deben planearse, calendarizarse y, a final de cuentas, lograrse. mucho antes, la fila creció bastante y el trabajo que implica amenaza con abrumar los recursos disponibles. conforme pasa el tiempo, la orga-nización descubre que emplea más dinero y tiempo en mantener los programas existentes que en someter a ingeniería nuevas aplicaciones. de hecho, no es raro que una organización de software emplee entre 60 y 70 por ciento de todos sus recursos en mantenimiento del soft-ware. acaso el lector pregunte por qué se requiere tanto mantenimiento y por qué se emplea tanto esfuerzo. osborne y chikofsky [osb90] proporcionan una respuesta parcial: mucho del software del que dependemos en la actualidad tiene en promedio una antigüedad de 10 a 15 años. aun cuando dichos programas se crearon usando las mejores técnicas de diseño y codifica-ción conocidas en la época [y muchas no lo fueron], se produjeron cuando el tamaño del programa y el espacio de almacenamiento eran las preocupaciones principales. luego migraron a nuevas plata-formas, se ajustaron para cambios en máquina y tecnología de sistema operativo, y aumentaron para satisfacer las necesidades de los nuevos usuarios, todo sin suficiente preocupación por la arquitectura global. el resultado es estructuras pobremente diseñadas, pobre codificación, pobre lógica y pobre documentación de los sistemas de software que ahora debemos seguir usando... otra razón del problema del mantenimiento del software es la movilidad del personal. es pro- bable que el equipo (o la persona) de software que hizo el trabajo original ya no esté más por ahí. peor aún, otras generaciones de personal de software modificaron el sistema y se mudaron. ¿cómo evolucionan los sistemas heredados conforme pasa el tiempo?? 29pressman(655-674).indd  65629pressman(655-674).indd  656 26/1/10  17:32:5926/1/10  17:32:59