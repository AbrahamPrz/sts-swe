capítulo 29 mantenimiento y reingeniería 667 29.6.3 ingeniería inversa de interfaces de usuario las gui (interfaces de usuario gráficas) sofisticadas se han vuelto obligatorias para productos y sistemas basados en computadora de todo tipo. por tanto, el redesarrollo de las interfaces de usuario se ha convertido en uno de los tipos más comunes de actividad de reingeniería. pero antes de poder reconstruir una interfaz de usuario, debe realizarse ingeniería inversa. para comprender completamente una interfaz de usuario existente, deben especificarse la estructura y el comportamiento de la interfaz. merlo et al. [mer93] sugieren tres preguntas bási- cas que deben responderse conforme comienza la ingeniería inversa de la ui. • ¿cuáles son las acciones básicas (por ejemplo, golpes de tecla y clics de ratón) que debe procesar la interfaz? • ¿cuál es la descripción compacta de la respuesta de comportamiento del sistema a dichas acciones? • ¿qué se entiende por “reemplazo” o, más precisamente, qué concepto de equivalencia de interfaces es relevante aquí? la notación de modelado de comportamiento (capítulo 7) puede proporcionar un medio para desarrollar respuestas a las primeras dos preguntas. mucha de la información necesaria pa-ra crear un modelo de comportamiento puede obtenerse al observar la manifestación externa de la interfaz existente. pero información adicional necesaria para crear el modelo de compor-tamiento debe extraerse del código. es importante observar que un reemplazo de gui puede no reflejar con exactitud la antigua interfaz (de hecho, puede ser radicalmente diferente). con frecuencia, vale la pena desarrollar una nueva metáfora de interacción. por ejemplo, una antigua ui solicita que un usuario propor-cione un factor de escala (que va de 1 a 10) para encoger o ampliar una imagen gráfica. una gui sometida a reingeniería puede usar una barra de desplazamiento y ratón para lograr la misma función.¿cómo comprender el funcionamiento de una interfaz de usuario existente?? 7 las herramientas que se mencionan aquí no representan un respaldo, sino una muestra de las herramientas que hay en esta categoría. en la mayoría de los casos, los nombres de las herramientas son marcas registradas por sus respectivos desarrolladores.objetivo: auxiliar a los ingenieros de software a com- prender la estructura interna de diseño de programas com- plejos. mecánica: en la mayoría de los casos, las herramientas de ingenie- ría inversa aceptan código fuente como entrada y producen varias representaciones de diseño estructural, procedimental, de datos y de comportamiento. herramientas representativas: 7 imagix 4d, desarrollada por imagix (www.imagix.com), “ayuda a los desarrolladores de software a comprender software c y c++ complejo o heredado” mediante ingeniería inversa y documenta- ción de código fuente. understand, desarrollado por scientific toolworks, inc. (www.sci- tools.com), analiza gramaticalmente ada, fortran, c, c++ y java “para ingeniería inversa, documenta automáticamente, cal-cula métricas de código y le ayuda a comprender, navegar y man-tener código fuente”. una lista exhaustiva de herramientas de ingeniería puede encontrarse en http://scgwiki.iam.unibe.ch:8080/scg/370herramientas de software ingeniería inversa 29pressman(655-674).indd  66729pressman(655-674).indd  667 26/1/10  17:33:0226/1/10  17:33:02