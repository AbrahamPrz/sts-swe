embargo, no basta con conseguir que funcione . antes de creer que hemos terminado con una función, asegúrese de entender su funcionamiento. no basta con que supere todas las pruebas. tiene que estar seguro [113] de que la solución es la correcta. por lo general, la forma óptima de saberlo consiste en refactorizar la función en algo tan limpio y expresivo que su funcionamiento sea evidente . g22: convertir dependencias lógicas en físicas si un módulo depende de otro, dicha dependencia debe ser física, no sólo lógica. el módulo dependiente no debe asumir aspectos (es decir, dependencias lógicas) sobre el módulo del que depende. por el contrario, debe solicitar de forma explícita al módulo toda la información de la que depende. por ejemplo, imagine que tiene que crear una función que imprima un informe de las horas trabajadas por cada empleado. la clase hourlyreporter recopila los datos y los pasa a hourlyreportformatter para imprimirlos (véase el listado 17-1). listado 17-1 hourlyreporter.java. public class hourlyreporter { private hourlyreportformatter formatter; private list<lineitem> page; private final int page_size = 55; public hourlyreporter(hourlyreportformatter formatter) { this.formatter = formatter; page = new arraylist<lineitem>(); } public void generatereport(list<hourlyemployee> employees) { for (hourlyemployee e : employees) { addlineitemtopage(e); if (page.size() == page_size) printandclearitemlist(); } if (page.size() > 0) printandclearitemlist(); 376