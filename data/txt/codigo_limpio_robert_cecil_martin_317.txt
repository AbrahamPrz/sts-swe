El diseño de  software  correcto se basa gran parte en las particiones, en crear zonas adecuadas para incluir distintos tipos de código. Esta separación hace que el código sea más fácil de entender y mantener. Especialmente interesante es el método  errorMessage  de  ArgsException . Incumple claramente el SRP al incluir el formato de mensajes de error en Args .  Args  debe centrarse en el procesamiento de argumentos, no en el formato de los mensajes de error. Sin embargo, ¿realmente tiene sentido incluir el código de formato de mensajes de error en  ArgsException ? Francamente es un compromiso. Los usuarios que no deseen los mensajes de error proporcionados por  ArgsException  tendrán que crear los suyos propios, pero la utilidad de mensajes de error ya preparados es evidente. Ya debería haberse dado cuenta de la distancia recorrida con respecto a la solución mostrada al inicio del capítulo. Las transformaciones finales puede examinarlas por su cuenta. Conclusión No basta con que el código funcione. El código que funciona suele ser incorrecto. Los programadores que se conforman con código funcional no se comportan de forma profesional. Puede que teman que no tienen tiempo para mejorar la estructura y el diseño del código, pero discrepo. No hay nada que afecte más negativamente a un proyecto de desarrollo que el código incorrecto. Los plazos incorrectos se pueden rehacer y los requisitos equivocados se pueden volver a definir. La dinámica incorrecta de un equipo se puede reparar pero el código incorrecto se corrompe y se convierte en una carga que arrastra al equipo completo. He visto equipos dominados por el desastre que han generado y que han dominado su destino. Evidentemente, el código incorrecto se puede limpiar pero resulta muy costoso. Cuando el código se corrompe los módulos se insinúan unos a otros y generan multitud de dependencias ocultas y entrelazadas. La localización y división de dependencias antiguas es una tarea larga y complicada. Por otra parte, resulta relativamente sencillo mantener código limpio. Si comete un error en un módulo, es más fácil limpiarlo directamente. Mejor todavía, si 318