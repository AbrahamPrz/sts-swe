J1: Evitar extensas listas de importación mediante el uso de comodines Si usa dos o más clases de un paquete, importe el paquete completo con import package.*; Las listas extensas de importaciones intimidan al lector. No queremos colapsar la parte superior de los módulos con 80 líneas de importaciones, sino que sean una instrucción concisa de los paquetes con los que colaboramos. Las importaciones específicas son dependencias rígidas, mientras que las importaciones de comodín no. Si importa una clase concreta, esa clase  debe existir, pero si importa un paquete con un comodín, no es necesario que existan clases concretas. La instrucción de importación simplemente añade el paquete a la ruta de búsqueda al localizar los nombres. Por tanto, no se genera una verdadera dependencia en estas importaciones y permiten aligerar las conexiones de nuestros módulos. En ocasiones, la lista extensa de importaciones puede resultar útil. Por ejemplo, si tiene que trabajar con código de legado y desea saber para qué clases crear elementos ficticios, puede examinar la lista de importaciones concretas para determinar los verdaderos nombres cualificados de todas esas clases y después añadirlos. No obstante, este uso de las importaciones concretas no es habitual. Es más, muchos IDE modernos le permiten convertir las importaciones con comodines en una lista de importaciones concretas con un solo comando. Por tanto, incluso en el caso anterior, es recomendable usar comodines. Las importaciones de comodín pueden probar conflictos de nombres y ambigüedades. Dos clases con el mismo nombre pero en paquetes diferentes tienen que importarse de forma concreta o al menos cualificarse de forma específica cuando se usen. Puede resultar molesto pero no es habitual que el uso de importaciones de comodín sea más indicado que el de importaciones concretas. J2: No heredar constantes Lo he visto muchas veces y siempre me molesta. Un programador añade 388