11.4 ■ Seguridad  305 fáciles de descifrar o escriben sus contraseñas en lugares sencillos de encontrar. Los  administradores de sistemas cometen errores al establecer control de acceso o archivos  de configuración, en tanto que los usuarios no instalan o usan software de protección. Sin embargo, como se estudió en la sección 10.5, se debe tener mucho cuidado cuando se clasifique un problema como un error de usuario. Los problemas humanos reflejan con frecuencia malas decisiones de diseño de sistemas que requieren, por ejemplo, cam-bios de contraseñas a menudo (de modo que los usuarios escriben sus contraseñas) o complejos mecanismos de configuración. Los controles que se deben implementar para mejorar la seguridad del sistema son comparables con los de la fiabilidad y protección: 1. Evitar la vulnerabilidad Controles cuya intención sea garantizar que los ataques  no tengan éxito. Aquí, la estrategia es diseñar el sistema de modo que se eviten los problemas de seguridad. Por ejemplo, los sistemas militares sensibles no están co-nectados a redes públicas, de forma que es imposible el acceso externo. También hay que pensar en la encriptación como un control basado en la evitación. Cualquier acceso no autorizado a datos encriptados significa que el atacante no puede leerlos. En la práctica, es muy costoso y consume mucho tiempo romper una encriptación fuerte. 2. Detectar y neutralizar ataques Controles cuya intención sea detectar y repeler ata-ques. Dichos controles implican la inclusión de funcionalidad en un sistema que monitoriza su operación y verifica patrones de actividad inusuales. Si se detectan, entonces se toman acciones, como desactivar partes del sistema, restringir el acceso a ciertos usuarios, etcétera. 3. Limitar la exposición y recuperación Controles que soportan la recuperación de los problemas. Éstos varían desde estrategias de respaldo automatizadas y “réplica” de la información, hasta pólizas de seguros que cubran los costos asociados con un ataque exitoso al sistema.  Sin un nivel razonable de seguridad, no se puede confiar en la disponibilidad, fiabili-dad y protección de un sistema. Los métodos para certificar la disponibilidad, fiabilidad y seguridad suponen que el software en operación es el mismo que el software que se ins-taló originalmente. Si el sistema es atacado y el software se compromete de alguna forma (por ejemplo, si el software se modifica al incluir un gusano), entonces ya son insosteni-bles los argumentos de fiabilidad y protección. Los errores en el desarrollo de un sistema pueden conducir a lagunas de seguridad. Si un sistema no responde a entradas inesperadas o si no se verifican los límites vectoriales, entonces los atacantes aprovecharían tales debilidades para conseguir acceso al sistema. Los principales incidentes de seguridad, como el gusano Internet original (Spafford, 1989) y el gusano Code Red más de 10 años después (Berghel, 2001) sacaron ventaja de la misma vulnerabilidad. Los programas en C# no incluyen comprobación de límites vectoriales, de manera que es posible sobrescribir parte de la memoria con código que permita el acceso no autorizado al sistema. M11_SOMMERVILLE_INGENIERIA_1ED_SE_289-308.indd   305M11_SOMMERVILLE_INGENIERIA_1ED_SE_289-308.indd   305 3/18/11   4:54:19 PM3/18/11   4:54:19 PM