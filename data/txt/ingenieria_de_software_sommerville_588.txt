21.2 ■ Aspectos, puntos de enlace y puntos de corte  571  Esto se ilustra en la figura 21.3. El diagrama muestra ejemplos de tres clases que  pueden incluirse en el sistema de registro de pacientes junto con algunos de los méto-dos centrales para gestionar información de pacientes. El área sombrada representa los métodos que se requieren para implementar la competencia estadística secundaria. Como se observa, esta competencia estadística se dispersa a lo largo de las otras competencias centrales. Los problemas con la dispersión y el enredo ocurren cuando cambian los requeri-mientos iniciales del sistema. Por ejemplo, suponga que deben recopilarse nuevos datos estadísticos en el sistema de registro de pacientes. Los cambios al sistema no se ubican todos en un lugar y, por lo tanto, uno tiene que emplear tiempo buscando los componen-tes en el sistema que deban cambiarse. Entonces es preciso modificar cada uno de estos componentes para incorporar los cambios requeridos. Esto puede ser costoso debido al tiempo que se necesita para analizar los componentes y, luego, para realizar y probar los cambios. Siempre existe la posibilidad de que se pierda algo de código que se debe cam-biar y, por consiguiente, las estadísticas serán incorrectas. Más aún, cuanto más severos sean los cambios que deban realizarse, aumentará la probabilidad de que se cometa una falla y se introduzcan errores en el software.  21.2 Aspectos, puntos de enlace y puntos de corte En esta sección se introducen los nuevos y más importantes conceptos asociados con el desarrollo de software orientado a aspectos y se ilustran mediante ejemplos del MHC-PMS. La terminología que se utiliza fue introducida por los desarrolladores de AspectJ a finales de la década de 1990. Sin embargo, los conceptos son de aplicación general y no específicos del lenguaje de programación AspectJ. La figura 21.4 resume los términos clave que hay que entender. Un sistema de registros médicos como el MCH-PMS incluye componentes que mane-jan información relacionada lógicamente de pacientes. El componente patient (paciente) mantiene información personal acerca del paciente, el componente medication (medica-ción) conserva información sobre los medicamentos que deben prescribirse, etcétera. Al diseñar el sistema con un enfoque basado en componentes, pueden configurarse diferen-tes instancias del sistema. Por ejemplo, podría configurarse una versión para cada tipo de clínica en la que sólo se permita a los médicos prescribir medicamentos relevantes para Figura 21.3 Dispersión  de métodos que  implementan competencias secundariasPaciente getName ()editName ()getAddress ()editAddress ()...anonymize ()...<decls atributo>Imagen getModality ()archive ()getDate ()editDate ()...saveDiagnosis ()saveType ()...<decls atributo>Consulta makeAppoint ()cancelAppoint ()assignNurse ()bookEquip ()...anonymize ()saveConsult ()...<decls atributo> M21_SOMMERVILLE_INGENIERIA_1ED_SE_565-590.indd   571M21_SOMMERVILLE_INGENIERIA_1ED_SE_565-590.indd   571 3/18/11   5:38:58 PM3/18/11   5:38:58 PM