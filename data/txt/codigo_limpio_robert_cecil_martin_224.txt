código que se lea de una forma estructurada, como lo escribiría un experto del dominio. Un buen DSL minimiza el vacío de comunicación entre un concepto de dominio y el código que lo implementa, al igual que las prácticas ágiles optimizan la comunicación entre un equipo y los accionistas del proyecto. Si tiene que implementar la lógica de dominios en el mismo lenguaje usado por un experto del dominio, hay menos riesgo de traducir incorrectamente el dominio en la implementación. Los DSL, si se usan de forma eficaz, aumentan el nivel de abstracción por encima del código y los patrones de diseño. Permiten al desarrollador revelar la intención del código en el nivel de abstracción adecuado. Los lenguajes específicos del dominio permiten expresar como POJO todos los niveles de abstracción y todos los dominios de la aplicación, desde directivas de nivel superior a los detalles más mínimos. Conclusión Los sistemas también deben ser limpios. Una arquitectura invasiva afecta a la lógica de dominios y a la agilidad. Si la lógica de dominios se ve afectada, la calidad se resiente, ya que los errores se ocultan y las historias son más difíciles de implementar. Si la agilidad se ve comprometida, la productividad sufre y las ventajas de TDD se pierden. En todos los niveles de abstracción, los objetivos deben ser claros. Esto sólo sucede si crea POJO y usa mecanismos similares a aspectos para incorporar otros aspectos de implementación de forma no invasiva. Independientemente de que diseñe sistemas o módulos individuales, no olvide usar los elementos más sencillos que funcionen. Bibliografía [Alexander] : Christopher Alexander,  A Timeless Way of Building , Oxford University Press, New York, 1979. 225