13.4 ■ programación conﬁ able 355 comportarse el sistema. no puede haber espacio para la interpretación por parte de los desarrolladores del software. si existen errores en este documento, entonces se presentarán a todos los equipos de desarrollo y se implementarán en todas las ver-siones del sistema. una forma de reducir la posibilidad de errores comunes de especificación es desarrollar independientemente especificaciones detalladas para el sistema, y definir las especifica-ciones en diferentes lenguajes. un equipo de desarrollo puede trabajar desde una especi-ficación formal, otro desde un modelo de sistema basado en estado, y un tercero desde una especificación en lenguaje natural. esto ayuda a evitar algunos errores de interpretación de la especificación, aunque no evita el problema de los errores de especificación. también introduce la posibilidad de errores en la traducción de los requerimientos, lo cual conduce a especificaciones inconsistentes. en un análisis de los experimentos, hatton (1997) concluye que un sistema de tres canales era entre cinco a nueve veces más fiable que un sistema de un solo canal. concluye que las mejoras en la fiabilidad que podrían obtenerse al dedicar más recursos a una sola versión no coincidirían con esto y, además, es probable que los enfoques de n-versión conduzcan a sistemas más fiables que los enfoques de versión sencilla. sin embargo, lo que no está claro es si las mejoras en fiabilidad de un sistema mul-tiversión ameritan los costos de desarrollo adicionales. para muchos sistemas, los cos-tos adicionales quizá no sean justificables, ya que un sistema de versión sencilla bien realizado sería suficientemente bueno. sólo en los sistemas críticos para la seguridad y la misión, donde los costos de las fallas son muy elevados, se requeriría software mul-tiversión. incluso en tales situaciones (por ejemplo, un sistema de nave espacial), sería suficiente al proporcionar un simple respaldo con funcionalidad limitada, hasta que el sistema principal pueda reparase y reiniciarse. 1 3.4 programación confiable por lo general, en este libro se evitan las discusiones de la programación, porque es casi imposible discutir este tema sin entrar en detalles de un lenguaje de programación espe-cífico. ahora existen tantos enfoques y lenguajes distintos usados en el desarrollo de software, que se evita el uso de un solo lenguaje para los ejemplos de este libro. sin embargo, cuando se considera la ingeniería de confiabilidad, hay un conjunto de prácti-cas de programación recomendables y aceptadas, que son bastante universales y ayudan a reducir las fallas de los sistemas entregados. en la figura 13.8 se presenta una lista de buenos lineamientos prácticos. pueden apli-carse en cualquier lenguaje de programación que se use para el desarrollo de sistemas, aunque la forma en que se utilizan depende de los lenguajes y las notaciones específicos que se empleen para el desarrollo del sistema. lineamiento 1: controlar la visibilidad de la información en un programa un principio de seguridad que adoptan las organizaciones militares es el principio de “necesidad de conocer”. sólo a aquellos individuos que necesiten conocer una par-te de información en particular, para realizar sus labores, se otorga dicha información. se oculta aquella información que no es directamente relevante para su trabajo. m13_sommerville_ingenieria_1ed_se_341-365.indd  355m13_sommerville_ingenieria_1ed_se_341-365.indd  355 3/18/11  4:59:13 pm3/18/11  4:59:13 pm