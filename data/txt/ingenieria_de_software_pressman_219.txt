188 PARTE DOS  MODELADO • La funcionalidad se califica de acuerdo con el conjunto de características y capacidades  del programa, la generalidad de las funciones que se entregan y la seguridad general del sistema. • La usabilidad se evalúa tomando en cuenta factores humanos (véase el capítulo 11), la estética general, la consistencia y la documentación. • La confiabilidad se evalúa con la medición de la frecuencia y gravedad de las fallas, la exactitud de los resultados que salen, el tiempo medio para que ocurra una falla (TMPF), la capacidad de recuperación ante ésta y lo predecible del programa. • El rendimiento se mide con base en la velocidad de procesamiento, el tiempo de respuesta, el uso de recursos, el conjunto y la eficiencia. • La mantenibilidad combina la capacidad del programa para ser ampliable (extensibi-lidad), adaptable y servicial (estos tres atributos se denotan con un término más común: mantenibilidad), y además que pueda probarse, ser compatible y configurable (capacidad de organizar y controlar los elementos de la configuración del software, véase el capítulo 22) y que cuente con la facilidad para instalarse en el sistema y para que se detecten los problemas. No todo atributo de la calidad del software se pondera por igual al diseñarlo. Una aplicación tal vez se aboque a lo funcional con énfasis en la seguridad. Otra quizá busque rendimiento con la mira puesta en la velocidad de procesamiento. En una tercera se persigue la confiabilidad. Sin importar la ponderación, es importante observar que estos atributos de la calidad deben to-marse en cuenta cuando comienza el diseño, no cuando haya terminado éste y la construcción  se encuentre en marcha. 8.2.2  La evolución del diseño del software La evolución del diseño del software es un proceso continuo que ya ha cubierto casi seis déca-das. Los primeros trabajos de diseño se concentraban en criterios para el desarrollo de progra-mas modulares [Den73] y en métodos para mejorar estructuras de software con un enfoque de arriba abajo [Wir71]. Los aspectos de procedimiento del diseño evolucionaron hacia una filoso-fía llamada programación estructurada [Dah72], [Mil72]. Los trabajos posteriores propusieron métodos para traducir el flujo de datos [Ste74] o la estructura de éstos (por ejemplo, [Jac75], [War74]) a una definición de diseño. Los enfoques más nuevos (por ejemplo, [Jac92], [Gam95]) propusieron un enfoque orientado a objeto para diseñar derivaciones. En los últimos tiempos, el énfasis al desarrollar software se pone en la arquitectura de éste [Kru06] y en los patrones de diseño susceptibles de emplearse para implementar arquitecturas y niveles más bajos de abs-tracciones del diseño (por ejemplo, [Hol06], [Sha05]). Se da cada vez más importancia a los métodos orientados al aspecto (por ejemplo, [Cla05], [Jac04]), al desarrollo orientado al modelo [Sch06] y a las pruebas [Ast04], que se concentran en llegar a una modularidad eficaz y a la estructura arquitectónica de los diseños que se generan. En la industria del software se aplican varios métodos de diseño, aparte de los ya menciona- dos. Igual que los métodos de análisis presentados en los capítulos 6 y 7, cada método de diseño de software introduce heurística y notación únicas, así como un punto de vista sobre lo que caracteriza a la calidad en el diseño. No obstante, todos estos métodos tienen algunas caracte-rísticas en común: 1) un mecanismo para traducir el modelo de requerimientos en una repre-sentación del diseño, 2) una notación para representar las componentes funcionales y sus in-terfaces, 3) una heurística para mejorar y hacer particiones y 4) lineamientos para evaluar la calidad. Sin importar el método de diseño que se utilice, debe aplicarse un conjunto de conceptos  básicos al diseño en el nivel de datos, arquitectura, interfaz y componente. En las secciones que siguen se estudian estos conceptos.Los diseñadores del software tienden  a centrarse en el problema que se va a resolver. No olvide que los atributos FURPS siempre forman parte del problema. Deben tomarse en cuenta.CONSEJO Cita: “Un diseñador sabe que alcanzó la perfección no cuando no hay nada por agregar, sino cuando no hay nada que quitar.” Antoine de Saint-Exupery ¿Qué características son  comunes en todos los métodos de diseño?? 08Pressman(183-205).indd   18808Pressman(183-205).indd   188 14/1/10   14:31:0714/1/10   14:31:07