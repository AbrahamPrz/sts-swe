capítulo 8 conceptos de diseño 185 los requerimientos definidos por el sistema y las restricciones que afectan la forma en la que se implementa la arquitectura [sha96]. la representación del diseño de la arquitectura —el marco de un sistema basado en computadora— se obtiene del modelo de los requerimientos. el diseño de la interfaz describe la forma en la que el software se comunica con los sistemas que interactúan con él y con los humanos que lo utilizan. una interfaz implica un flujo de infor-mación (por ejemplo, datos o control) y un tipo específico de comportamiento. entonces, los modelos de escenarios de uso y de comportamiento dan mucha de la información requerida para diseñar la interfaz. el diseño en el nivel de componente transforma los elementos estructurales de la arquitec- tura del software en una descripción de sus componentes en cuanto a procedimiento. la infor-mación obtenida a partir de los modelos basados en clase, flujo y comportamiento sirve como la base para diseñar los componentes. durante el diseño se toman decisiones que en última instancia afectarán al éxito de la cons- trucción del software y, de igual importancia, a la facilidad con la que puede darse manteni-miento al software. pero, ¿por qué es tan importante el diseño? la importancia del diseño del software se resume en una palabra: calidad. el diseño es el sitio en el que se introduce calidad en la ingeniería de software. da representaciones del soft-ware que pueden evaluarse en su calidad. es la única manera de traducir con exactitud a un producto o sistema terminado los requerimientos de los participantes. es el fundamento de toda la ingeniería de software y de las actividades que dan el apoyo que sigue. sin diseño se corre el riesgo de obtener un sistema inestable, que falle cuando se hagan cambios pequeños, o uno que sea difícil de someter a prueba, o en el que no sea posible evaluar la calidad hasta que sea de-masiado tarde en el proceso de software, cuando no queda mucho tiempo y ya se ha gastado mucho dinero.modelo de análisiscasos de uso - texto diagramas de casos de usodiagramas de actividadesdiagramas de canal elementos basados en claseselementos basados en el escenario diagramas de clasespaquetes de análisismodelos crcdiagramas de colaboracióndiseño de datos o clasesdiseño de la interfaz diseño de la arquitecturadiseño en el nivel de componentes modelo del diseñodiagramas de ﬂujo de datosdiagramas de ﬂujo del controlnarrativas de procesamientoelementos orientados al ﬂujo elementos del comportamiento diagramas de estadodiagramas de secuenciafigura 8.1 traducción del modelo de requerimientos al modelo de diseño cita: “hay dos formas de construir un diseño del software. una es hacerlo tan simple que sea obvio que no hay deficiencias y la otra es hacerlo tan complica-do que no haya deficiencias obvias. el primer método es mucho más difícil.” c. a. r. hoare 08pressman(183-205).indd  18508pressman(183-205).indd  185 14/1/10  14:31:0614/1/10  14:31:06