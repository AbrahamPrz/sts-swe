183capítulo 8conceptos de diseño conceptos clave  abstracción . . . . . . . . . . . . . 189 arquitectura . . . . . . . . . . . . 190aspectos. . . . . . . . . . . . . . . 194atributos de la calidad . . . . . 187buen diseño . . . . . . . . . . . . 187cohesión . . . . . . . . . . . . . . . 193diseño de datos. . . . . . . . . . 199diseño del software. . . . . . . 188diseño orientado a objeto . . 195división de problemas . . . . . 191independencia funcional . . . . 193lineamientos de la calidad . . 186modularidad . . . . . . . . . . . . 191ocultamiento de información. . . . . . . . . . . . . 192 patrones. . . . . . . . . . . . . . . 191proceso de diseño . . . . . . . . 186rediseño . . . . . . . . . . . . . . . 195refinamiento . . . . . . . . . . . . 194 ¿qué es? el diseño es lo que casi todo inge- niero quiere hacer. es el lugar en el que las reglas de la creatividad —los requerimientos de los participantes, las necesidades del negocio y las consideraciones técnicas— se unen para formular un producto o sistema. el diseño crea una representación o modelo del software, pero, a diferencia del modelo de los requerimientos (que se centra en describir los datos que se necesitan, la función y el comportamiento), el modelo de diseño proporciona detalles sobre arquitectura del soft-ware, estructuras de datos, interfaces y componentes que se necesitan para implementar el sistema. ¿quién lo hace? ingenieros de software llevan a cabo cada una de las tareas del diseño. ¿por qué es importante? el diseño permite modelar el sistema o producto que se va a construir. este modelo se evalúa respecto de la calidad y su mejora antes de generar código; después, se efectúan pruebas y se involucra a muchos usuarios finales. el diseño es el lugar en el que se establece la calidad del software. ¿cuáles son los pasos? el diseño representa al software de varias maneras. en primer lugar, debe representarse la arquitectura del sistema o producto. después se modelan las interfaces que conectan al software con los usuarios finales, con otros sistemas y dispositivos, y con sus propios componentes constitutivos. por último, se diseñan los com-ponentes del software que se utilizan para construir el sis-tema. cada una de estas perspectivas representa una acción de diseño distinta, pero todas deben apegarse a un conjunto básico de conceptos de diseño que guíe el traba-jo de producción de software. ¿cuál es el producto final? el trabajo principal que se produce durante el diseño del software es un modelo de diseño que agrupa las representaciones arquitectónicas, interfaces en el nivel de componente y despliegue. ¿cómo me aseguro de que lo hice bien? el modelo de diseño es evaluado por el equipo de software en un esfuerzo por determinar si contiene errores, inconsistencias u omisiones, si existen mejores alternativas y si es posible implementar el modelo dentro de las restricciones, plazo y costo que se hayan establecido. una mirada  rápidael diseño de software agrupa el conjunto de principios, conceptos y prácticas que llevan al desarrollo de un sistema o producto de alta calidad. los principios de diseño establecen una filosofía general que guía el trabajo de diseño que debe ejecutarse. deben entenderse los conceptos de diseño antes de aplicar la mecánica de éste, y la práctica del diseño en sí lleva a la creación de distintas representaciones del software que sirve como guía para la actividad de construcción que siga. el diseño es crucial para el éxito de la ingeniería de software. a principios de la década de 1990, mitch kapor, creador de lotus 1-2-3, publicó en dr. dobbs journal un “manifiesto del di- seño de software”. decía lo siguiente: ¿qué es el diseño? es donde se está con un pie en dos mundos —el de la tecnología y el de las perso- nas y los propósitos humanos— que tratan de unificarse... vitruvio, romano crítico de arquitectura, afirmaba que los edificios bien diseñados eran aquellos que tenían resistencia, funcionalidad y belleza. lo mismo se aplica al buen software. resistencia: un programa no debe tener ningún error que impida su funcionamiento. funcionalidad: un programa debe se apropiado para los fines que persigue. belleza: la experiencia de usar el programa debe ser placen- tera. éstos son los comienzos de una teoría del diseño de software. el objetivo del diseño es producir un modelo o representación que tenga resistencia, funciona- lidad y belleza. para lograrlo, debe practicarse la diversificación y luego la convergencia. belady [bel81] afirma que “la diversificación es la adquisición de un repertorio de alternativas, materia prima del diseño: componentes, soluciones con los componentes y conocimiento, todo lo cual 08pressman(183-205).indd  18308pressman(183-205).indd  183 14/1/10  14:31:0514/1/10  14:31:05