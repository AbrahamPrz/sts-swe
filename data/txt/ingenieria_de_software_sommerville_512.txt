18.3 ■ Patrones arquitectónicos para sistemas distribuidos  495 sistema y puede actualizarse fácilmente, ya que se ubica centralmente. El procesamiento,  en algunos casos, puede distribuirse entre la lógica de la aplicación y los servidores de gestión de datos; por lo tanto, conduce a una respuesta más rápida a las solicitudes del cliente. Los diseñadores de arquitecturas cliente-servidor deben tomar en cuenta varios fac-tores cuando elijan la arquitectura de distribución más adecuada. En la figura 18.11 se describen las situaciones en las que es probable que sean adecuadas las arquitecturas cliente-servidor discutidas aquí.  18.3.4 Arquitecturas de componentes distribuidos Al organizar el procesamiento en capas, como se muestra en la figura 18.6, cada capa de un sistema puede implementarse como un servidor lógico separado. Este modelo fun-ciona bien para muchos tipos de aplicación. Sin embargo, limita la flexibilidad de los diseñadores del sistema en cuanto a que deben decidir cuáles servicios incluir en cada capa. No obstante, en la práctica, no siempre es claro si un servicio es de gestión de datos, uno de aplicación o uno de base de datos. Los diseñadores también deben planear la escalabilidad y así ofrecer ciertos medios para que los servidores se repliquen con-forme se agregan más clientes al sistema. Un enfoque más general al diseño de sistemas distribuidos es diseñar el sistema como un conjunto de servicios, sin tratar de asignar dichos servicios a capas en el sistema. Cada servicio, o grupo de servicios relacionados, se implementa usando un componen- te separado. En una arquitectura de componentes distribuida (figura 18.12), el sistema está organizado como un conjunto de componentes u objetos en interacción. Dichos componen-tes proporcionan una interfaz a un conjunto de servicios que ofrecen. Otros componentes Arquitectura Aplicaciones Arquitectura cliente- servidor de dos niveles con clientes ligerosAplicaciones de sistema heredado que se usan cuando no es práctica la separación de procesamiento de aplicación y gestión de datos. Los clientes pueden tener acceso a ellos como servicios, tal como se refiere en la sección 18.4. Aplicaciones de cómputo intensivo, como los compiladores con poca o ninguna  gestión de datos. Aplicaciones intensivas en datos (navegación y consulta) con procesamiento de  aplicación no intensivo. Navegar la Web es el ejemplo más común de una situación donde se emplea esta arquitectura. Arquitectura cliente-servidor de dos niveles con clientes pesadosAplicaciones donde el procesamiento de aplicación lo proporciona software comercial (por ejemplo, Microsoft Excel) en el cliente. Aplicaciones en que se requiere procesamiento de datos de cómputo intensivo  (por ejemplo, visualización de datos). Aplicaciones móviles en las que no puede garantizarse la conectividad a Internet. Por  lo tanto, es posible algún procesamiento local usando información en caché de la base de datos. Arquitectura cliente-servidor multinivel Aplicaciones grandes con cientos o miles de clientes. Aplicaciones en que tanto los datos como la aplicación son volátiles.Aplicaciones en que se integran datos de fuentes múltiples. Figura 18.11 Uso  de patrones  arquitectónicos cliente-servidor M18_SOMMERVILLE_INGENIERIA_1ED_SE_479-507.indd   495M18_SOMMERVILLE_INGENIERIA_1ED_SE_479-507.indd   495 3/18/11   5:03:56 PM3/18/11   5:03:56 PM