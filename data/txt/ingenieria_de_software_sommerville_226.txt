2. Las versiones incompletas de un sistema se pueden inspeccionar sin costos adicio- nales. Si un programa está incompleto, entonces es necesario desarrollar equipos de  prueba especializados para poner a prueba las partes disponibles. Evidentemente, esto genera costos para el desarrollo del sistema. 3. Además de buscar defectos de programa, una inspección puede considerar también  atributos más amplios de calidad de un programa, como el cumplimiento con están-dares, la portabilidad y la mantenibilidad. Pueden buscarse ineficiencias, algoritmos inadecuados y estilos de programación imitados que hagan al sistema difícil de man-tener y actualizar.  Las inspecciones de programa son una idea antigua y la mayoría de estudios y experi-mentos indican que las inspecciones son más efectivas para el descubrimiento de defec-tos, que para las pruebas del programa. Fagan (1986) reportó que más del 60% de los errores en un programa se detectan mediante inspecciones informales de programa. En el proceso de Cleanroom (cuarto limpio) (Prowell et al., 1999) se afirma que más del 90% de los defectos pueden detectarse en inspecciones del programa. Sin embargo, las inspecciones no sustituyen las pruebas del software, ya que no son eficaces para descubrir defectos que surjan por interacciones inesperadas entre diferentes partes de un programa, problemas de temporización o dificultades con el rendimiento del sistema. Más aún, en compañías o grupos de desarrollo pequeños, suele ser espe-cialmente difícil y costoso reunir a un equipo de inspección separado, ya que todos los miembros potenciales del equipo también podrían ser desarrolladores de software. En el capítulo 24 (“Gestión de la calidad”) se estudian las revisiones e inspecciones con más detenimiento. En el capítulo 15 se explica el análisis estático automatizado, en el cual el texto fuente de un programa se analiza automáticamente para descubrir anomalías. Este capítulo se enfoca en las pruebas y los procesos de pruebas. La figura 8.3 presenta un modelo abstracto del proceso de prueba “tradicional”, como se utiliza en el desarrollo dirigido por un plan. Los casos de prueba son especificaciones de las entradas a la prueba y la salida esperada del sistema (los resultados de la prueba), además de información sobre lo que se pone a prueba. Los datos de prueba son las entradas que se diseñaron para probar un sistema. En ocasiones pueden generarse automáticamente datos de prueba; no obstante, es imposible la generación automática de casos de prueba, pues debe estar implicada gente que entienda lo que se supone que tiene que hacer el sis-tema para especificar los resultados de prueba previstos. Sin embargo, es posible automa-tizar la ejecución de pruebas. Los resultados previstos se comparan automáticamente con los resultados establecidos, de manera que no haya necesidad de que un individuo busque errores y anomalías al correr las pruebas.Planeación de pruebas La planeación de pruebas se interesa por la fecha y los recursos de todas las actividades durante el proceso  de pruebas. Incluye la definición del proceso de pruebas, al tomar en cuenta tanto al personal como el tiempo disponible. Por lo general, se creará un plan de prueba que define lo que debe probarse, la fecha establecida de pruebas y cómo se registrarán éstas. Para sistemas críticos, el plan de prueba también puede incluir detalles de las pruebas que se van a correr en el software. http://www.SoftwareEngineering-9.com/Web/Testing/Planning.htmlCapítulo 8 ■ Pruebas de software  209 M08_SOMMERVILLE_INGENIERIA_1ED_SE_205-233.indd   209M08_SOMMERVILLE_INGENIERIA_1ED_SE_205-233.indd   209 3/18/11   5:39:59 PM3/18/11   5:39:59 PM