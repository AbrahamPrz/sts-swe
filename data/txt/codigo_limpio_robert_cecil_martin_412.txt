modifican el mismo valor con la suficiente periodicidad como para generar un problema. por el contrario, detecta de forma eficaz si se produce dicha situación y la reintenta hasta que la actualización es satisfactoria. esta detección suele ser menos costosa que la adquisición de un bloqueo, incluso en situaciones de contención moderada o alta. ¿cómo lo hace la mv? la operación cas es atómica. por tanto, la operación cas tiene este aspecto: int variablebeingset; void simulatenonblockingset (int newvalue) { int currentvalue; do { currentvalue = variablebeingset } while(currentvalue != compareandswap(currentvalue, newvalue)); } int synchronized compareandswap(int currentvalue, int newvalue) { if(variablebeingset == currentvalue) { variablebeingset = newvalue; return currentvalue; } return variablebeingset; } cuando un método intenta actualizar una variable compartida, la operación cas comprueba que la variable establecida sigue teniendo el último valor conocido. en caso afirmativo, se cambia la variable. en caso contrario, la variable no se establece ya que otro subproceso ha conseguido acceder. el método que realiza el intento (mediante la operación cas) ve que el cambio no se ha realizado y lo intenta de nuevo. clases incompatibles con subprocesos existen clases que no son compatibles con subprocesos, como las siguientes: simpledateformat . conexiones de base de datos. contenedores de java.util . 413