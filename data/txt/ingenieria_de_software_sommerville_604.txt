capítulo 21 ■ lecturas sugeridas 587 en esencia, estos problemas con las pruebas ocurren porque los aspectos están estre- chamente integrados con el código base de un sistema. por lo tanto, son difíciles de probar en aislamiento. puesto que están tejidos en un programa en muchos lugares dife-rentes, no podemos estar seguros de que un aspecto que funciona con éxito en un punto de enlace funcionará necesariamente en todos los puntos de enlace. todos éstos siguen siendo problemas de investigación para el desarrollo de software orientado a aspectos. puntos clave ■ el principal beneficio de un enfoque orientado a aspectos al desarrollo de software es que soporta la separación de competencias. al representar las competencias transversales como aspectos, las competencias individuales pueden entenderse, reutilizarse y modificarse sin cambiar otras partes del programa. ■ el enredo ocurre cuando un módulo en un sistema incluye código que implementa diferentes requerimientos del sistema. el fenómeno relacionado de dispersión ocurre cuando la implementación de una sola competencia se dispersa a través de varios componentes en un programa. ■ los aspectos incluyen un punto de corte (un enunciado que define dónde se tejerá el aspecto dentro del programa) y consejos (el código para implementar la competencia transversal). los puntos de enlace son los eventos que se pueden referenciar en un punto de corte. ■ para garantizar la separación de las competencias, los sistemas pueden diseñarse como un sistema central que implementa las principales competencias de las partes interesadas, y un conjunto de extensiones que implementan competencias secundarias. ■ para identificar las competencias se puede usar un enfoque a la ingeniería de requerimientos orientado a puntos de vista, que permita recuperar los requerimientos de las partes interesadas e identificar la calidad de servicio transversal y las competencias de política. ■ la transición de requerimientos a diseño puede hacerse identificando casos de uso, cada uno de los cuales representa una competencia de las partes interesadas. el diseño puede modelarse mediante una versión extendida del uml con estereotipos de aspectos. ■ los problemas de inspeccionar y derivar pruebas para programas orientados a aspectos son una barrera significativa para la adopción del desarrollo de software orientado a aspectos en los proyectos de software grandes. lecturas sugeridas “aspect-oriented programming”. este número especial del cacm cuenta con algunos artículos dirigidos a un público general, que son un buen punto de partida para leer acerca de la programación orientada a aspectos. (comm. acm, 44 (10), octubre de 2001.)http:/ /dx. doi. org/ 10. 1145/ 383845. 383846. m21_sommerville_ingenieria_1ed_se_565-590.indd  587m21_sommerville_ingenieria_1ed_se_565-590.indd  587 3/18/11  5:38:59 pm3/18/11  5:38:59 pm