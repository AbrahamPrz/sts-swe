proyecto [117] . su código debe usar los términos de este lenguaje. en definitiva, cuantos más nombres con significado especial y relevante para su proyecto utilice, más fácil será para los lectores saber de qué trata el código. n4: nombres inequívocos seleccione nombres que ilustren de forma inequívoca el funcionamiento de funciones y variables. fíjese en este ejemplo de fitnesse: private string dorename() throws exception { if (refactorreferences) renamereferences(); renamepage(); pathtorename.removenamefromend(); pathtorename.addnametoend(newname); return pathparser.render(pathtorename); } el nombre de esta función no indica qué hace, al menos en términos amplios y sin concretar. además, se refuerza por la presencia de la función renamepage dentro de la función dorename . ¿qué indican los nombres sobre la diferencia entre ambas funciones? nada. un nombre más acertado para la función sería renamepageandoptionallyallreferences . puede parecerle extenso, y lo es, pero sólo se invoca desde un punto del módulo, de modo que su valor descriptivo supera su longitud. n5: usar nombres extensos para ámbitos extensos la longitud de un nombre debe estar relacionada con la de su ámbito. puede usar nombres de variables breves para ámbitos diminutos pero en ámbitos mayores debe emplear nombres extensos. los nombres de variables como i y j son correctos si su ámbito tiene cinco líneas de longitud. fíjese en el siguiente fragmento del conocido juego de los bolos: private void rollmany(int n, int pins) { for (int i=0; i<n; i++) 394