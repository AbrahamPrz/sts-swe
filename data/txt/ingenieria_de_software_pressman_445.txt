414 parte tres administración de la calidad enfoque de pruebas considera una visión externa y se llama prueba de caja negra. el segundo requiere una visión interna y se denomina prueba de caja blanca.2 la prueba de caja negra se refiere a las pruebas que se llevan a cabo en la interfaz del soft- ware. una prueba de caja negra examina algunos aspectos fundamentales de un sistema con poca preocupación por la estructura lógica interna del software. la prueba de caja blanca del software se basa en el examen cercano de los detalles de procedimiento. las rutas lógicas a través del software y las colaboraciones entre componentes se ponen a prueba al revisar con-juntos específicos de condiciones y/o bucles. a primera vista, parecería que las pruebas de caja blanca muy extensas conducirían a “pro- gramas 100 por ciento correctos”. lo único que se necesita es definir todas las rutas lógicas, desarrollar casos de prueba para revisarlas y evaluar resultados, es decir, generar casos de prueba para revisar de manera exhaustiva la lógica del programa. por desgracia, las pruebas exhaustivas presentan ciertos problemas logísticos. hasta para programas pequeños, el número de posibles rutas lógicas puede ser muy grande. sin embargo, las pruebas de caja blanca no deben descartarse como imprácticas. puede seleccionarse y revisarse un número limitado de rutas lógicas importantes. puede probarse la validez de las estructuras de datos importantes. 2 en ocasiones, en lugar de pruebas de caja negra y de caja blanca, se usan, respectivamente, los términos prueba funcional y prueba estructural.punto clave las pruebas de caja blanca pueden diseñarse sólo después de que existe el diseño a nivel de componentes (o código fuente). debe disponerse de los detalles lógicos del programa. considere un programa de 100 líneas en el lenguaje c. después de alguna declaración básica de datos, el pro- grama contiene dos bucles anidados que se ejecutan de 1 a 20 veces cada uno, dependiendo de las condiciones especificadas en la entra-da. dentro del bucle interior, se requieren cuatro constructos if-then-else. ¡existen aproximadamente 10 14 rutas posibles que pueden ejecu- tarse en este programa! para poner este número en perspectiva, suponga que se desarrolló un procesador de prueba mágico (“mágico” porque no existe tal pro-cesador) para realizar pruebas exhaustivas. el procesador puede desarrollar un caso de prueba, ejecutarlo y evaluar los resultados en un milisegundo. si trabajara 24 horas al día los 365 días del año, el procesador trabajaría durante 3 170 años para probar el programa. esto, sin duda alguna, causaría estragos en la mayoría de los calen-darios de desarrollo. por tanto, es razonable afirmar que la prueba exhaustiva es impo- sible para sistemas de software grandes.información pruebas exhaustivas 18.3 p rueba de caja blanca la prueba de caja blanca, en ocasiones llamada prueba de caja de vidrio, es una filosofía de diseño de casos de prueba que usa la estructura de control descrita como parte del diseño a nivel de componentes para derivar casos de prueba. al usar los métodos de prueba de caja blanca, puede derivar casos de prueba que: 1) garanticen que todas las rutas independientes dentro de un módulo se revisaron al menos una vez, 2) revisen todas las decisiones lógicas en sus lados ver-dadero y falso, 3) ejecuten todos los bucles en sus fronteras y dentro de sus fronteras operativas y 4) revisen estructuras de datos internas para garantizar su validez. 18.4 p rueba de ruta básica la prueba de ruta o trayectoria básica es una técnica de prueba de caja blanca propuesta por primera vez por tom mccabe [mcc76]. el método de ruta básica permite al diseñador de casos de prueba derivar una medida de complejidad lógica de un diseño de procedimiento y usar esta cita: “los errores se esconden en las esquinas y se congregan en las fronteras.” boris beizer 18pressman(411-436).indd  41418pressman(411-436).indd  414 21/1/10  10:58:5421/1/10  10:58:54