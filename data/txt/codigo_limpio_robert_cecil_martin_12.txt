para citar mi propio libro de hace 17 años, dicho estilo distingue la excelencia de la simple competencia. la visión japonesa comprende el verdadero valor del trabajador cotidiano y, en especial, de los sistemas de desarrollo que dependen de las sencillas acciones diarias de tales trabajadores. la calidad es el resultado de un millón de acciones cuidadosas, no de un método magnífico caído del cielo. que dichas acciones sean simples no significa que sean simplistas, y mucho menos que sean sencillas. son la base de la grandeza y, cada vez más, de cualquier empresa humana. ignorarlas no es humano en absoluto. evidentemente, todavía defiendo el pensamiento global, en especial el valor de los enfoques arquitectónicos cimentados en el conocimiento de los dominios y la capacidad de uso del software . este libro no versa sobre esto, al menos no de forma evidente. este libro transmite un mensaje más sutil cuya profundidad no debe menospreciarse. coincide con la visión de gente como peter sommerlad, kevlin henney y giovanni asproni, cuyos mantras son «el código es el diseño» y «código simple». aunque debemos recordar que la interfaz es el programa y que sus estructuras dicen mucho sobre la propia estructura del programa, es fundamental adoptar de forma continuada la humilde posición de que el diseño vive en el código. y aunque los cambios y la metáfora de la fábrica supongan costes, los cambios de diseño suponen valor. debemos considerar al código como la articulación de los esfuerzos de diseño, visto como un proceso, no como algo estático. es en el código donde se desarrollan los conceptos arquitectónicos de conexión y cohesión. si escucha a larry constantine describir la conexión y la cohesión, lo hace en términos del código, no desde conceptos abstractos propios de uml. en su ensayo abstraction descant , richard gabriel afirma que la abstracción es el mal. el código es el remedio al mal y el código limpio puede que sea divino. volviendo a mi caja de ga-jol , considero importante recordar que la sabiduría danesa nos recomienda no sólo prestar atención a las pequeñas cosas, sino también ser honestos con ellas. esto significa ser honesto con el código, con nuestros colegas sobre el estado del código y, en especial, con nosotros mismos. ¿hemos hecho todo lo posible para dejar las cosas mejor que como las encontramos? ¿hemos refactorizado el código antes de terminarlo? no se trata de preocupaciones periféricas, sino que se encuentran 13