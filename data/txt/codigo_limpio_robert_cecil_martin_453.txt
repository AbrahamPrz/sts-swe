667 * @param base la fecha base. 668 * 669 * @return la primera fecha que coincide con el día de la semana especificado 670 * y POSTERIOR a la fecha base. 671 */ 672 public static SerialDate getFollowingDayOfWeek(final int targetWeekday, 673 final SerialDate base) { 674 675 // comprobar argumentos… 676 if (!SerialDate.isValidWeekdayCode(targetWeekday)) { 677 throw new IllegalArgumentException( 678 “Invalid day-of-the-week code.” 679 ); 680 } 681 682 // buscar la fecha… 683 final int adjust; 684 final int baseDOW = base.getDayOfWeek(); 685 if (baseDOW > targetWeekday) { 686 adjust = 7 + Math.min(0, targetWeekday - baseDOW); 687 } 688 else { 689 adjust = Math.max(0, targetWeekday - baseDOW); 690 } 691 692 return SerialDate.addDays(adjust, base); 693 } 694 695 /** 696 * Devuelve la fecha que coincide con el día de la semana especificado y más 697 * PRÓXIMA a la fecha base. 698 * 699 * @param targetDOW un código para el día de la semana de destino. 700 * @param base la fecha base. 701 * 702 * @return la fecha que coincide con el día de la semana especificado y más 703 * PRÓXIMA a la fecha base. 704 */ 705 public static SerialDate getNearestDayOfWeek(final int targetDOW, 706 final SerialDate base) { 707 708 // comprobar argumentos… 454