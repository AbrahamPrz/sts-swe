242 capítulo 9 ■ evolución del software realizar que para implementarlos. en consecuencia, la rapidez de los procesos de toma de decisiones de la organización controla la tasa de cambio del sistema. la cuarta ley de lehman sugiere que la mayoría de los grandes proyectos de pro-gramación funcionan en un estado “saturado”. es decir, un cambio en los recursos o en el personal tiene efectos imperceptibles en la evolución a largo plazo del sistema. esto es congruente con la tercera ley, que sugiere que la evolución del programa es en gran medida independiente de las decisiones administrativas. esta ley confirma que los grandes equipos de desarrollo de software con frecuencia son improductivos, porque los gastos en comunicación dominan el trabajo del equipo. la quinta ley de lehman se relaciona con los incrementos de cambio en cada versión del sistema. agregar nueva funcionalidad a un sistema introduce inevitablemente nuevas fallas al mismo. cuanto más funcionalidad se agregue en cada versión, más fallas habrá. por consiguiente, un gran incremento en funcionalidad en una versión del sistema sig-nifica que esto tendrá que seguir en una versión ulterior, donde se reparen las fallas del nuevo sistema. a dicha versión debe agregarse relativamente poca funcionalidad. esta ley sugiere que no se deben presupuestar grandes incrementos de funcionalidad en cada versión, sin tomar en cuenta la necesidad de reparación de las fallas. las primeras cinco leyes fueron las propuestas iniciales de lehman; las leyes restan-tes se agregaron después de un trabajo posterior. las leyes sexta y séptima son similares y, en esencia, indican que los usuarios de software se volverán cada vez más infortunados con el sistema, a menos que se le mantenga y se le agregue nueva funcionalidad. la ley final refleja el trabajo más reciente sobre los procesos de retroalimentación, aunque toda-vía no está claro cómo se aplica en el desarrollo de software práctico. en general, las observaciones de lehman parecen sensatas. hay que tomarlas en cuenta cuando se planee el proceso de mantenimiento. podría suceder que las considera-ciones empresariales requieran ignorarlas en algún momento. por ejemplo, por razones de marketing, quizá sea necesario realizar muchos cambios significativos al sistema en una sola versión. la consecuencia probable de esto es que tal vez se requieran una o más versiones dedicadas a la reparación del error. a menudo esto se observa en el software de computadoras personales, cuando una nueva gran versión de alguna aplicación con frecuencia viene seguida por una actualización para reparar un bug. 9.3 mantenimiento del software el mantenimiento del software es el proceso general de cambiar un sistema después de que éste se entregó. el término usualmente se aplica a software personalizado, en el que gru-pos de desarrollo separados intervienen antes y después de la entrega. los cambios rea-lizados al software van desde los simples para corregir errores de codificación, los más extensos para corregir errores de diseño, hasta mejorías significativas para corregir errores de especificación o incorporar nuevos requerimientos. los cambios se implementan modi-ficando los componentes del sistema existentes y agregándole nuevos componentes donde sea necesario. existen tres tipos de mantenimiento de software: 1. reparaciones de fallas los errores de codificación por lo general son relativa- mente baratos de corregir; los errores de diseño son más costosos, ya que quizás impliquen la reescritura de muchos componentes del programa. los errores de m09_sommerville_ingenieria_1ed_se_234-260.indd  242m09_sommerville_ingenieria_1ed_se_234-260.indd  242 3/18/11  4:52:24 pm3/18/11  4:52:24 pm