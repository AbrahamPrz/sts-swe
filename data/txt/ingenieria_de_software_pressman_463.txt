432 PARTE TRES  ADMINISTRACIÓN DE LA CALIDAD clases de entrada e interacciones asociadas. La PBM puede usarse para garantizar que el com- portamiento documentado y el comportamiento real coinciden. Entonces, el uso del programa puede rastrearse a través de la documentación. 18.8.4  Prueba para sistemas de tiempo real La naturaleza asíncrona, dependiente del tiempo de muchas aplicaciones de tiempo real, agrega un nuevo y potencialmente difícil elemento a la mezcla de pruebas: el tiempo. El diseñador de casos de prueba no sólo debe considerar los casos de prueba convencionales, sino también la manipulación de eventos (es decir, el procesamiento de interrupciones), la temporización de los datos y el paralelismo de las tareas (procesos) que manejan los datos. En muchas situaciones, probar los datos proporcionados cuando un sistema de tiempo real está en un estado dará como resultado un procesamiento adecuado, mientras que los mismos datos proporcionados cuando el sistema está en un estado diferente pueden conducir a error. Por ejemplo, el software de tiempo real que controla una nueva fotocopiadora acepta in- terrupciones del operador (es decir, el operador de la máquina presiona teclas de control como RESET o DARKEN) sin error cuando la máquina saca copias (en el estado “copying”). Estas mis-mas interrupciones del operador, si se ingresan cuando la máquina está en el estado “jammed”, generan una pantalla del código de diagnóstico que indica la ubicación del atasco que se tiene que resolver (un error). Además, la íntima relación que existe entre el software de tiempo real y su entorno de hard- ware también puede causar problemas en las pruebas. Las pruebas del software deben consi-derar el impacto de los fallos de hardware en el procesamiento del software. Tales fallos pueden ser extremadamente difíciles de simular de manera realista. Los métodos amplios de diseño de casos de prueba para sistemas en tiempo real continúan  evolucionando. Sin embargo, puede proponerse una estrategia global de cuatro pasos: • Prueba de tareas. El primer paso en la prueba del software en tiempo real es probar cada tarea de manera independiente. Es decir, las pruebas convencionales se diseñan para cada tarea y se ejecutan independientemente durante dichas pruebas. La prueba de tareas descubre errores en lógica y función, mas no en temporización y comporta-miento.Las siguientes preguntas deben responderse durante las  pruebas de documentación y/o en el centro de ayuda: • ¿La documentación describe con precisión cómo lograr cada modo de uso? • ¿La descripción de cada secuencia de interacción es precisa? • ¿Los ejemplos son precisos? • ¿La terminología, descripciones de menú y respuestas del sistema  son consistentes con el programa real? • ¿Es relativamente fácil localizar guías dentro de la documentación? • ¿La solución de problemas puede lograrse con facilidad usando la  documentación? • ¿La tabla de contenido y el índice del documento son consistentes,  precisos y completos?• ¿El diseño del documento (plantilla, fuentes, sangrías, gráficos)  contribuye a comprender y asimilar rápidamente la información? • ¿Todos los mensajes de error del software que se muestran al usua- rio se describen con más detalle en el documento? ¿Las acciones por tomar como consecuencia de un mensaje de error se delinean con claridad? • Si se usan enlaces de hipertexto, ¿son precisos y completos? • Si se usa hipertexto, ¿el diseño de navegación es apropiado para  la información requerida? La única forma viable para responder estas preguntas es hacer  que una tercera parte independiente (por ejemplo, usuarios seleccio-nados) pruebe la documentación en el contexto del uso del programa. Todas las discrepancias se anotan y las áreas de ambigüedad o debi-lidad en el documento se definen para su potencial reescritura.INFORMACIÓN Pruebas de documentación ¿Cuál es una estrategia  efectiva para probar un sistema en tiempo real?? 18Pressman(411-436).indd   43218Pressman(411-436).indd   432 21/1/10   10:59:0021/1/10   10:59:00