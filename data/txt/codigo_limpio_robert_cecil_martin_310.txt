} public void testSimpleStringPresent() throws Exception { Args args = new Args(“x*”, new String[]{“-x”, “param”}); assertEquals(1, args.cardinality()); assertTrue(args.has(‘x’)); assertEquals(“param”, args.getString(‘x’)); } public void testMissingStringArgument() throws Exception { try { new Args(“x*”, new String[]{"-x"}); fail(); } catch (ArgsException e) { assertEquals(ArgsException.ErrorCode.MISSING_STRING, e.getErrorCode()); assertEquals(‘x’, e.getErrorArgumentId()); } } public void testSpacesInFormat() throws Exception { Args args = new Args(“x, y”, new String[]{“-xy”}); assertEquals(2, args.cardinality()); assertTrue(args.has(‘x’)); assertTrue(args.has(‘y’)); } public void testSimpleIntPresent() throws Exception { Args args = new Args(“x#”, new String[]{“-x”, “42”}); assertEquals(1, args.cardinality()); assertTrue(args.has(‘x’)); assertEquals(42, args.getInt(‘x’)); } public void testInvalidInteger() throws Exception { try { new Args(“x#”, new String[] {“-x”, “Forty two”}); fail(); } catch (ArgsException e) { assertEquals(ArgsException.ErrorCode.INVALID_INTEGER, e.getErrorCode()); assertEquals(‘x’, e.getErrorArgumentId()); assertEquals(“Forty two”, e.getErrorParameter()); } } public void testMissingInteger() throws Exception { try { new Args(“x#”, new String[]{“-x”}); fail(); } catch (ArgsException e) { assertEquals(ArgsException.ErrorCode.MISSING_INTEGER, e.getErrorCode()); assertEquals(‘x’, e.getErrorArgumentId()); } } 311