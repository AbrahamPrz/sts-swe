} public void testsimplestringpresent() throws exception { args args = new args(“x*”, new string[]{“-x”, “param”}); assertequals(1, args.cardinality()); asserttrue(args.has(‘x’)); assertequals(“param”, args.getstring(‘x’)); } public void testmissingstringargument() throws exception { try { new args(“x*”, new string[]{"-x"}); fail(); } catch (argsexception e) { assertequals(argsexception.errorcode.missing_string, e.geterrorcode()); assertequals(‘x’, e.geterrorargumentid()); } } public void testspacesinformat() throws exception { args args = new args(“x, y”, new string[]{“-xy”}); assertequals(2, args.cardinality()); asserttrue(args.has(‘x’)); asserttrue(args.has(‘y’)); } public void testsimpleintpresent() throws exception { args args = new args(“x#”, new string[]{“-x”, “42”}); assertequals(1, args.cardinality()); asserttrue(args.has(‘x’)); assertequals(42, args.getint(‘x’)); } public void testinvalidinteger() throws exception { try { new args(“x#”, new string[] {“-x”, “forty two”}); fail(); } catch (argsexception e) { assertequals(argsexception.errorcode.invalid_integer, e.geterrorcode()); assertequals(‘x’, e.geterrorargumentid()); assertequals(“forty two”, e.geterrorparameter()); } } public void testmissinginteger() throws exception { try { new args(“x#”, new string[]{“-x”}); fail(); } catch (argsexception e) { assertequals(argsexception.errorcode.missing_integer, e.geterrorcode()); assertequals(‘x’, e.geterrorargumentid()); } } 311