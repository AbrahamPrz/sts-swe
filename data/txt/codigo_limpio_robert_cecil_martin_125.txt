usamos el espacio en blanco horizontal para asociar elementos directamente relacionados y separar otros con una relación menos estrecha. fíjese en la siguiente función: private void measureline(string line) { linecount++; int linesize = line.length(); totalchars += linesize; linewidthhistogram.addline(linesize, linecount); recordwidestline(linesize); } hemos rodeado los operadores de asignación con espacios en blanco para destacarlos. las instrucciones de asignación tienen dos elementos principales: el lado izquierdo y el derecho. los espacios acentúan esta separación. por otra parte, no hemos incluido espacios entre los nombres de las funciones y el paréntesis de apertura, ya que la función y sus argumentos están estrechamente relacionados. su separación los desconectaría. separo los argumentos en los paréntesis de invocación de la función para acentuar la coma e indicar que los argumentos son independientes. el espacio en blanco también se usa para acentuar la precedencia de los operadores: public class quadratic { public static double root1(double a, double b, double c) { double determinant = determinant(a, b, c); return (-b + math.sqrt(determinant)) / (2*a); } public static double root2(int a, int b, int c) { double determinant = determinant(a, b, c); return (-b - math.sqrt(determinant)) / (2*a); } private static double determinant(double a, double b, double c) { return b*b - 4*a*c; } } fíjese en lo bien que se leen las ecuaciones. los factores carecen de espacios en blanco ya que tienen una mayor precedencia. los términos se separan mediante espacios en blanco ya que la suma y la resta son de precedencia inferior. desafortunadamente, muchas herramientas de formato de código ignoran la precedencia de los operadores e imponen un espaciado uniforme. por ello, separaciones sutiles como las anteriores suelen perderse tras modificar el 126