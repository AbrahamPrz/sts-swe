434 PARTE TRES  ADMINISTRACIÓN DE LA CALIDAD Los patrones de prueba no sólo proporcionan lineamientos útiles conforme comienzan las  actividades de prueba; también proporcionan tres beneficios adicionales descritos por Marick  [Mar02]: 1.  Proporcionan un vocabulario para quienes solucionan problemas. “Oiga, usted sabe, debemos usar  un objeto nulo”. 2.  Enfocan la atención en las fuerzas que hay detrás de un problema. Esto permite que los diseñado-res [de caso de prueba] entiendan mejor cuándo y por qué se aplica una solución. 3.  Alientan el pensamiento iterativo. Cada solución crea un nuevo contexto en el que pueden resol-verse nuevos problemas. Aunque estos beneficios son “leves”, no deben pasarse por alto. Gran parte de las pruebas  del software, incluso durante la década pasada, han sido actividades ad hoc. Si los patrones de  prueba pueden ayudar a un equipo de software a comunicarse de manera más efectiva acerca de las pruebas, a comprender las fuerzas de motivación que conducen a un enfoque específico para las pruebas y a abordar el diseño de las pruebas como una actividad evolutiva en la que cada iteración resulta en una suite más completa de casos de prueba, entonces los patrones lograron mucho. Los patrones de prueba se describen en forma muy similar a los patrones de diseño (capítulo  12). En la literatura se han propuesto decenas de patrones de prueba (por ejemplo, [Mar02]). Los siguientes tres (presentados sólo en forma resumida) proporcionan ejemplos representativos: Nombre del patrón: PairTesting Resumen: Patrón orientado a proceso, PairTesting describe una técnica que es análoga a la pro- gramación por parejas (capítulo 3) en la que dos examinadores trabajan en conjunto para diseñar y  ejecutar una serie de pruebas que pueden aplicarse a actividades de prueba de unidad, integración o validación. Nombre del patrón: SeparateTestInterface Resumen: Hay necesidad de probar cada clase en un sistema orientado a objetos, incluidas “clases  internas” (es decir, clases que no exponen alguna interfaz afuera del componente que los usa). El  patrón SeparateTestInterface describe cómo crear “una interfaz de prueba que puede usarse para  describir pruebas específicas sobre clases que son visibles solamente de manera interna en un com-ponente” [Lan01]. Nombre del patrón: ScenarioTesting Resumen: Una vez realizadas las pruebas de unidad e integración, hay necesidad de determinar si  el software se desempeñará en forma que satisfaga a los usuarios. El patrón ScenarioTesting des- cribe una técnica para revisar el software desde el punto de vista del usuario. Un fallo en este nivel indica que el software fracasó para satisfacer un requisito visible del usuario [Kan01]. Un análisis amplio de los patrones de prueba está más allá del ámbito de este libro. Si tiene  más interés, vea [Bin99] y [Mar02] para información adicional acerca de este importante tema.  18.10 R ESUMEN El objetivo principal para el diseño de casos de prueba es derivar un conjunto de pruebas que  tienen la mayor probabilidad de descubrir errores en el software. Para lograr este objetivo, se usan dos categorías diferentes de técnicas de diseño de caso de prueba: pruebas de caja blanca y pruebas de caja negra. Las pruebas de caja blanca se enfocan en la estructura de control del programa. Los casos de  prueba se derivan para asegurar que todos los enunciados en el programa se ejecutaron al me-PUNTO CLAVE Los patrones de prueba pueden  ayudar al equipo de software a comunicarse de manera más efectiva acerca de las pruebas y comprender mejor las fuerzas que conducen a un enfoque de prueba específico. WebRef Patrones que describen la  organización, eficiencia, estrategia y resolución de problemas de las pruebas pueden encontrarse en www.testing.com/test-patterns/patterns. 18Pressman(411-436).indd   43418Pressman(411-436).indd   434 21/1/10   10:59:0121/1/10   10:59:01