260 PARTE DOS  MODELADO aseguramiento de la calidad del software (ACS) y métodos de comprobación de la corrección  (véase el capítulo 21), contribuyen a la creación de componentes de software reutilizables. En esta subsección se estudian aspectos específicos de la reutilización que son complementarios de las prácticas sólidas de la ingeniería de software. El modelo de requerimientos se analiza para determinar qué elementos apuntan hacia com- ponentes reutilizables ya existentes. Los elementos del modelo de los requerimientos se  comparan con los componentes reutilizables en un proceso que en ocasiones se conoce como  “ajuste de especificaciones” [Bel95]. Si el ajuste de especificaciones señala hacia un componente que ya existe y que se ajusta a las necesidades de la aplicación en cuestión, se extrae el compo-nente de la biblioteca de reutilización (repositorio) y se emplea en el diseño de un nuevo sis-tema. Si no es posible encontrar el componente (por ejemplo, no hay coincidencia), se crea uno nuevo. Es en este punto —cuando se comienza a crear el componente nuevo— donde debe considerarse el diseño para la reutilización (DPR). Como ya se dijo, el DPR requiere que se apliquen conceptos y principios sólidos del diseño de  software (véase el capítulo 8). Pero las características del dominio de la aplicación también de-ben tomarse en cuenta. Binder [Bin93] sugiere varios aspectos clave 11 que constituyen la base  del diseño para la reutilización: Datos estándar. El dominio de la aplicación debe investigarse y tienen que identificarse las estructuras de datos globales estándar (como las de archivos o una base de datos com-pleta). Todos los componentes del diseño se caracterizan para hacer uso de estas estructu-ras de datos estándar. Protocolos de interfaz estándar. Deben establecerse tres niveles de protocolos de inter- faz: la naturaleza de las interfaces intramodulares, el diseño de las interfaces externas téc-nicas (no humanas) y la interfaz humano-computadora. Plantillas de programa. Se elige un estilo arquitectónico (véase el capítulo 9) que sirve  como plantilla para el diseño de la arquitectura del nuevo software. Una vez establecidos los datos estándar, interfaces y plantillas del programa, se tiene una es-tructura en la cual crear el diseño. Los componentes nuevos que conforman ésta tienen una probabilidad mayor de tener un uso posterior. 10.6.4  Clasificación y recuperación de componentes Considere una biblioteca universitaria grande. Se encuentran disponibles cientos de miles de libros, revistas y otras fuentes de información. Pero para acceder a dichas fuentes debe desarro-llarse un esquema de clasificación. Para navegar en este enorme volumen de información, los bibliotecarios han definido un esquema de clasificación que incluye un código de la Biblioteca del Congreso, palabras clave, nombres de los autores y otras entradas para el índice. Todos ellos permiten que el usuario encuentre fácil y rápidamente la fuente que necesita. Ahora, considere un repositorio grande de componentes en el que se encuentran decenas de  miles de componentes de software reutilizables. Pero, ¿cómo se encuentra el que se necesita? Al tratar de responder esta pregunta surge otra: ¿cómo describimos los componentes de soft-ware en términos no ambiguos y clasificables? Éstas son preguntas difíciles para las que todavía no hay una respuesta definitiva. En esta sección se estudian las direcciones actuales que permi-tirán que los ingenieros de software naveguen a través de las bibliotecas de la reutilización. Un componente de software reutilizable puede describirse de muchas formas, pero la des- cripción ideal incluye lo que Tracz [Tra95] llama modelo 3C: concepto, contenido y contexto. El  concepto de un componente de software es “la descripción de lo que hace el componente”  11 En general, las preparaciones del DPR deben tomarse como parte de la ingeniería del dominio.El DPR es muy difícil si hay que hacer  las interfaces o integrar los componentes con sistemas heredados o con sistemas múltiples cuya arquitectura y protocolos de interfaz son incongruentes.CONSEJO 10Pressman(234-264).indd   26010Pressman(234-264).indd   260 26/1/10   17:33:2426/1/10   17:33:24