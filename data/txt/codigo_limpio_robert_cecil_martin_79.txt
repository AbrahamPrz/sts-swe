por ello, conviene extraer el cuerpo de los bloques try y catch en funciones individuales. public void delete(page page) { try { deletepageandallreferences(page); } catch (exception e) { logerror(e); } } private void deletepageandallreferences(page page) throws exception { deletepage(page); registry.deletereference(page.name); configkeys.deletekey(page.name.makekey()); } private void logerror(exception e) { logger.log(e.getmessage()); } en este caso, la función delete es de procesamiento de errores. es fácil de entender e ignorar. la función deletepageandallreferences es para los procesos de borrar una página. el procesamiento de errores se puede ignorar. de este modo, la separación facilita la comprensión y la modificación del código. el procesamiento de errores es una cosa las funciones sólo deben hacer una cosa y el procesamiento de errores es un ejemplo. por tanto, una función que procese errores no debe hacer nada más. esto implica (como en el ejemplo anterior) que, si una función incluye la palabra clave try , debe ser la primera de la función y que no debe haber nada más después de los bloques catch/finally . el imán de dependencias error.java la devolución de códigos de error suele implicar que existe una clase o enumeración en la que se definen los códigos de error. public enum error { 80