capítulo 31 tendencias emergentes en ingeniería del software 707 interfaz con una amplia serie de sensores y responder en un marco temporal que sea adecuado a la tarea que se busca realizar. deben desarrollarse nuevos métodos que 1) ayuden a los ingenieros de software a predecir la temporalidad de varias características reactivas y 2) implementen dichas características de manera que las haga menos depen-dientes de la máquina y más portátiles. • nuevos modos de interacción con el usuario: el teclado y el ratón funcionan bien en un entorno pc, pero las tendencias de mundo abierto para software señalan que deben modelarse e implementarse nuevos modos de interacción. ya sea que dichos nuevos enfoques usen interfaces de toque múltiple, reconocimiento de voz o interfaces de mente directa, 9 las nuevas generaciones de software para dispositivos digitales deben modelar estas nuevas interfaces humano-computadora. • arquitecturas complejas: un automóvil lujoso tiene más de 2 000 funciones controladas mediante software que residen dentro de una compleja arquitectura de hardware que incluye múltiples cpu, una sofisticada estructura de bus, actuadores, sensores, una interfaz humana cada vez más sofisticada, y muchos componentes con clasificación de seguridad. sistemas incluso más complejos están en el horizonte inmediato, lo que presenta retos significativos para los diseñadores de software. • sistemas heterogéneos distribuidos: los componentes en tiempo real para cualquier moderno sistema incrustado pueden conectarse mediante un bus interno, una red inalámbrica o a través de internet (o todo junto). • crucialidad: el software se ha convertido en el componente pivote en virtualmente todos los sistemas cruciales para los negocios y en la mayoría de los sistemas importantes para la seguridad. sin embargo, la comunidad de ingeniería del software apenas comienza a aplicar incluso los principios más básicos de la seguridad de software. • variabilidad de mantenimiento: la vida del software dentro de un dispositivo digital rara vez dura más allá de 3 a 5 años, pero los complejos sistemas de aviónica dentro de una aeronave tienen una vida útil de al menos 20 años. el software de los automóviles falla en alguna parte intermedia. ¿esto tendrá algún impacto sobre el diseño? broy [bro06] argumenta que éstas y otras características del software pueden gestionarse sola-mente si la comunidad de ingeniería del software desarrolla una filosofía de ingeniería del soft-ware distribuida de manera más efectiva y colaborativa, mejores enfoques de ingeniería de re-querimientos, un enfoque más robusto al desarrollo impulsado por modelo y mejores herramientas de software. en las secciones que siguen se explorará brevemente cada una de estas áreas. 31.4.3 desarrollo colaborativo parece casi demasiado obvio de afirmar, pero se hará de cualquier forma: la ingeniería del soft- ware es una tecnología de información. desde el inicio de cualquier proyecto de software, cada participante debe compartir información: acerca de las metas y objetivos empresariales básicos, de los requerimientos de sistema específicos, de conflictos de diseño arquitectónico, de casi todo aspecto del software que se va a construir. en la actualidad, los ingenieros de software colaboran a través de zonas horarias y fronteras internacionales, y cada uno de ellos debe compartir información. lo mismo es cierto para los proyectos de fuente abierta en los que trabajan cientos o miles de desarrolladores de software 9 un breve estudio acerca de las interfaces de mente directa puede encontrarse en http://en.wikipedia.org/ wiki/brain-computer_interface, y un ejemplo comercial se describe en http://au.gamespot.com/ news/6166959.htmlpunto clave la colaboración involucra la diseminación oportuna de la información y un proceso efectivo para comunicarse y tomar decisiones. 31pressman(695-716).indd  70731pressman(695-716).indd  707 26/1/10  17:33:4026/1/10  17:33:40