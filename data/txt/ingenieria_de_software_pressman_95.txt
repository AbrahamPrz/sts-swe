64 PARTE UNO  EL PROCESO DEL SOFTWARE Como el diseño XP virtualmente no utiliza notación y genera pocos, si alguno, productos del  trabajo que no sean tarjetas CRC y soluciones en punta, el diseño es visto como un artefacto en transición que puede y debe modificarse continuamente a medida que avanza la construcción. El objetivo del rediseño es controlar dichas modificaciones, sugiriendo pequeños cambios en el diseño que “son capaces de mejorarlo en forma radical” [Fow00]. Sin embargo, debe notarse que el esfuerzo que requiere el rediseño aumenta en forma notable con el tamaño de la aplicación. Un concepto central en XP es que el diseño ocurre tanto antes como después de que comienza  la codificación. Rediseñar significa que el diseño se hace de manera continua conforme se cons-truye el sistema. En realidad, la actividad de construcción en sí misma dará al equipo XP una guía para mejorar el diseño. Codificación.  Después de que las historias han sido desarrolladas y de que se ha hecho el  trabajo de diseño preliminar , el equipo no inicia la codificación, sino que desarrolla una serie de  pruebas unitarias a cada una de las historias que se van a incluir en la entrega en curso (incre- mento de software).8 Una vez creada la prueba unitaria,9 el desarrollador está mejor capacitado  para centrarse en lo que debe implementarse para pasar la prueba. No se agrega nada extraño (MS). Una vez que el código está terminado, se le aplica de inmediato una prueba unitaria, con lo que se obtiene retroalimentación instantánea para los desarrolladores. Un concepto clave durante la actividad de codificación (y uno de los aspectos del que más se  habla en la XP) es la programación por parejas . XP recomienda que dos personas trabajen juntas  en una estación de trabajo con el objeto de crear código para una historia. Esto da un meca-nismo para la solución de problemas en tiempo real (es frecuente que dos cabezas piensen más que una) y para el aseguramiento de la calidad también en tiempo real (el código se revisa con-forme se crea). También mantiene a los desarrolladores centrados en el problema de que se trate. En la práctica, cada persona adopta un papel un poco diferente. Por ejemplo, una de ellas tal vez piense en los detalles del código de una porción particular del diseño, mientras la otra se asegura de que se siguen los estándares de codificación (parte necesaria de XP) o de que el código para la historia satisfará la prueba unitaria desarrollada a fin de validar el código con-frontándolo con la historia. A medida que las parejas de programadores terminan su trabajo, el código que desarrollan  se integra con el trabajo de los demás. En ciertos casos, esto lo lleva a cabo a diario un equipo de integración. En otros, las parejas de programadores tienen la responsabilidad de la integra-ción. Esta estrategia de “integración continua” ayuda a evitar los problemas de compatibilidad e interfaces y brinda un ambiente de “prueba de humo” (véase el capítulo 17) que ayuda a des-cubrir a tiempo los errores. Pruebas.  Y a se dijo que la creación de pruebas unitarias antes de que comience la codificación  es un elemento clave del enfoque de XP. Las pruebas unitarias que se crean deben implemen-tarse con el uso de una estructura que permita automatizarlas (de modo que puedan ejecutarse en repetidas veces y con facilidad). Esto estimula una estrategia de pruebas de regresión (véase el capítulo 17) siempre que se modifique el código (lo que ocurre con frecuencia, dada la filoso-fía del rediseño en XP). A medida que se organizan las pruebas unitarias individuales en un “grupo de prueba univer- sal” [Wel99], las pruebas de la integración y validación del sistema pueden efectuarse a diario. Esto da al equipo XP una indicación continua del avance y también lanza señales de alerta si las  8 Este enfoque es equivalente a saber las preguntas del examen antes de comenzar a estudiar. Vuelve mucho más  fácil el estudio porque centra la atención sólo en las preguntas que se van a responder. 9 La prueba unitaria, que se estudia en detalle en el capítulo 17, se centra en un componente de software individual  sobre interfaz, estructuras de datos y funcionalidad del componente, en un esfuerzo por descubrir errores locales  del componente.PUNTO CLAVE El rediseño mejora la estructura  interna de un diseño (o código fuente) sin cambiar su funcionalidad o comportamiento externo. Muchos equipos de software están llenos de individualistas. Si la programación por parejas ha de funcionar con eficacia, tendrá que trabajar para cambiar esa cultura.CONSEJO¿Qué es la programación por parejas??WebRef Hay información útil acerca de XP en la  dirección www.xprogramming.com. ¿Cómo se usan las  pruebas unitarias en XP?? 03Pressman(055-080).indd   6403Pressman(055-080).indd   64 14/1/10   13:41:1114/1/10   13:41:11