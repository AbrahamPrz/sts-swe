212  Capítulo 8 ■ Pruebas de software  Considere, por ejemplo, el objeto de estación meteorológica del modelo analizado en  el capítulo 7. La interfaz de este objeto se muestra en la figura 8.4. Tiene un solo atributo, que es su identificador ( identifier ). Ésta es una constante que se establece cuando se instala  la estación meteorológica. Por consiguiente, sólo se necesita una prueba que demuestre si se configuró de manera adecuada. Usted necesita definir casos de prueba para todos los méto-dos asociados con el objeto, como reportWeather, reportStatus, etcétera. Aunque lo ideal es poner a prueba los métodos en aislamiento, en algunos casos son precisas ciertas secuencias de prueba. Por ejemplo, para someter a prueba el método que desactiva los instrumentos de la estación meteorológica (shutdown), se necesita ejecutar el método restart (reinicio).  La generalización o herencia provoca que sea más complicada la prueba de las clases de objetos. Usted no debe poner únicamente a prueba una operación en la clase donde se definió, ni suponer que funcionará como se esperaba en las subclases que heredan la operación. La operación que se hereda puede hacer conjeturas sobre otras operaciones y atributos. Es posible que no sean válidas en algunas subclases que hereden la operación. Por consiguiente, tiene que poner a prueba la operación heredada en todos los contextos en que se utilice. Para probar los estados de la estación meteorológica, se usa un modelo de estado, tal como el que se muestra en la figura 7.8 del capítulo anterior. Al usar este modelo, iden-tificará secuencias de transiciones de estado que deban probarse y definirá secuencias de eventos para forzar dichas transiciones. En principio, hay que probar cualquier secuencia posible de transición de estado, aunque en la práctica ello resulte muy costoso. Los ejem-plos de secuencias de estado que deben probarse en la estación meteorológica incluyen:   Shutdown → Running → Shutdown Configuring → Running → Testing → Transmitting → Running Running → Collecting → Running → Summarizing → Transmitting → Running  Siempre que sea posible, se deben automatizar las pruebas de unidad. En estas pruebas de unidad automatizadas, podría usarse un marco de automatización de pruebas (como JUnit) para escribir y correr sus pruebas de programa. Los marcos de pruebas de unidad ofrecen clases de pruebas genéricas que se extienden para crear casos de prueba espe-cíficos. En tal caso, usted podrá correr todas las pruebas que implementó y reportar, con frecuencia mediante alguna GUI, el éxito o el fracaso de las pruebas. Es común que toda una serie de pruebas completa opere en algunos segundos, de modo que es posible ejecutar todas las pruebas cada vez que efectúe un cambio al programa. Un conjunto automatizado de pruebas tiene tres partes: 1. Una parte de configuración, en la cual se inicializa el sistema con el caso de prueba,  esto es, las entradas y salidas esperadas.identificador reportWeather  ( ) reportStatus  ( ) powerSave  (instruments) remoteControl  (commands) reconfigure  (commands) restart  (instruments) shutdown  (instruments)EstaciónMeteorológica Figura 8.4 Interfaz  de objeto de estación  meteorológica M08_SOMMERVILLE_INGENIERIA_1ED_SE_205-233.indd   212M08_SOMMERVILLE_INGENIERIA_1ED_SE_205-233.indd   212 3/18/11   5:39:59 PM3/18/11   5:39:59 PM