g.roll(pins); } es totalmente claro y se complicaría si la variable i se cambiara por algo como rollcount . por otra parte, las variables y funciones con nombres breves pierden su significado en las grandes distancias. por tanto, cuanto mayor sea el ámbito del nombre, más extenso y preciso tendrá que ser el nombre. n6: evitar codificaciones los nombres no deben codificarse con información de tipos o ámbitos. prefijos como m_ o f no sirven de nada en los entornos actuales. además, codificaciones de proyecto y/o subsistema como vis_ (para un sistema de imágenes visuales) distraen la atención y son redundantes. los entornos actuales proporcionan toda esa información sin tener que modificar los nombres. aleje sus nombres de la contaminación húngara. n7: los nombres deben describir efectos secundarios los nombres deben describir todo lo que haga una función, variable o clase. no oculte efectos secundarios con un nombre. no utilice un simple verbo para describir una función que realiza algo más que una simple acción. fíjese en este código de testng: public objectoutputstream getoos() throws ioexception { if (m_oos == null) { m_oos = new objectoutputstream(m_socket.getoutputstream()); } return m_oos; } esta función hace algo más que obtener oos ; lo crea si todavía no se ha creado. por lo tanto, un nombre más acertado sería createorreturnoos . pruebas (test) 395