// BankProxyHandler.java import java.lang.reflect.*; import java.util.*; // «InvocationHandler» necesario para la API de proxy. public class BankProxyHandler implements InvocationHandler { private Bank bank; public BankHandler (Bank bank) { this.bank = bank; } // Método definido en InvocationHandler public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { String methodName = method.getName(); if (methodName.equals(“getAccounts”)) { bank.setAccounts(getAccountsFromDatabase()); return bank.getAccounts(); } else if (methodName.equals(“setAccounts”)) { bank.setAccounts((Collection<Account>) args[0]); setAccountsToDatabase(bank.getAccounts()); return null; } else { … } } // Muchos detalles: protected Collection<Account> getAccountsFromDatabase() {…} protected void setAccountsToDatabase(Collection<Account> accounts) {…} } //En otra parte… Bank bank = (Bank) Proxy.newproxyInstance( Bank.class.getClassLoader(), new Class[] { Bank.class }, new BankProxyHandler(new BankImpl())); Definimos la interfaz  Bank , que envolvemos en el proxy y un POJO ( Plain-Old Object  u Objeto sencillo de Java),  BankImpl , que implementa la lógica empresarial (encontrará más información sobre POJO en un apartado posterior). La API Proxy requiere un objeto  InvocationHandler  que invocar para implementar las invocaciones de métodos  Bank  realizadas en el proxy. BankProxyHandler  usa la API de reflexión de Java para asignar las invocaciones de métodos genéricos a los métodos correspondientes de 217