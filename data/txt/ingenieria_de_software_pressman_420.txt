capítulo 17 estrategias de prueba de software 389 construyen software “robusto” que esté diseñado para probarse a sí mismo. el software debe diseñarse en forma que use técnicas antierrores (sección 17.3.1), es decir, el software debe  poder diagnosticar ciertas clases de errores. además, el diseño debe incluir pruebas automati-zadas y pruebas de regresión. usan revisiones técnicas efectivas como filtro previo a las pruebas. las revisiones técnicas (ca- pítulo 15) pueden ser tan efectivas como probar para descubrir errores. por esta razón, las re-visiones pueden reducir la cantidad del esfuerzo de pruebas que se requieren para producir software de alta calidad. realizan revisiones técnicas para valorar la estrategia de prueba y los casos de prueba. las re- visiones de prueba pueden descubrir inconsistencias, omisiones y errores evidentes en el abordaje de las pruebas. esto ahorra tiempo y también mejora la calidad del producto. desarrollan un enfoque de mejora continuo para el proceso de prueba. la estrategia de prue- bas debe medirse. las métricas recopiladas durante las pruebas deben usarse como parte de un enfoque de control de proceso estadístico para la prueba del software. 17.3 e strategias de prueba para software convencional2 existen muchas estrategias que pueden usarse para probar el software. en un extremo, puede esperarse hasta que el sistema esté completamente construido y luego realizar las pruebas sobre el sistema total, con la esperanza de encontrar errores. este enfoque, aunque atractivo, simple-mente no funciona. dará como resultado software defectuoso que desilusionará a todos los par-ticipantes. en el otro extremo, podrían realizarse pruebas diariamente, siempre que se construya alguna parte del sistema. este enfoque, aunque menos atractivo para muchos, puede ser muy efectivo. por desgracia, algunos desarrolladores de software son reacios a usarlo. ¿qué hacer? una estrategia de prueba que eligen la mayoría de los equipos de software se coloca entre los dos extremos. toma una visión incremental de las pruebas, comenzando con la de unidades de programa individuales, avanza hacia pruebas diseñadas para facilitar la integración de las unidades y culmina con pruebas que ejercitan el sistema construido. cada una de estas clases de pruebas se describe en las secciones que siguen. 17.3.1 prueba de unidad la prueba de unidad enfoca los esfuerzos de verificación en la unidad más pequeña del diseño de software: el componente o módulo de software. al usar la descripción del diseño de compo-nente como guía, las rutas de control importantes se prueban para descubrir errores dentro de la frontera del módulo. la relativa complejidad de las pruebas y los errores que descubren están limitados por el ámbito restringido que se establece para la prueba de unidad. las pruebas de unidad se enfocan en la lógica de procesamiento interno y de las estructuras de datos dentro de las fronteras de un componente. este tipo de pruebas puede realizarse en paralelo para múl-tiples componentes. consideraciones de las pruebas de unidad. las pruebas de unidad se ilustran de manera esquemática en la figura 17.3. la interfaz del módulo se prueba para garantizar que la informa- ción fluya de manera adecuada hacia y desde la unidad de software que se está probando. las estructuras de datos locales se examinan para asegurar que los datos almacenados temporal-cita: “probar sólo los requerimien- tos del usuario final es como inspeccionar un edificio con base en el trabajo realizado por el decorador de interiores a costa de cimientos, vigas y plomería.” boris beizer 2 a lo largo de este libro, se usan los términos software convencional o software tradicional para referirse a arqui- tecturas de software jerárquica común, o de “llamar y regresar”, que con frecuencia se encuentran en una varie- dad de dominios de aplicación. las arquitecturas de software tradicional no son orientadas a objetos y no abarcan webapps.no es mala idea diseñar casos de prueba de unidad antes de desarrollar el código para un componente. eso ayuda a garantizar que se desarrollará un código que pasará las pruebas.consejo 17pressman(383-410).indd  38917pressman(383-410).indd  389 21/1/10  10:59:2021/1/10  10:59:20