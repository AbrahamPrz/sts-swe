428 capítulo 16 ■ reutilización de software compañías tales como hewlett-packard han tenido también mucho éxito en sus progra- mas de reutilización (griss y wosser, 1995), y su experiencia se documentó en un libro de jacobson et al. (1997). 1 6.1 panorama de la reutilización durante los últimos 20 años, se han desarrollado muchas técnicas para apoyar la reutili-zación de software. dichas técnicas aprovechan el hecho de que los sistemas en el mismo dominio de aplicación son similares y tienen potencial de reutilización (esa reutilización es posible a diferentes niveles desde simples funciones hasta completas aplicaciones), y el hecho de que estándares para componentes reutilizables facilitan la reutilización. la figura 16.3 establece algunas formas posibles de implementar la reutilización de soft-ware, y en la figura 16.4 se describe brevemente cada una de ellas. teniendo en cuenta este arreglo de técnicas para la reutilización, la pregunta clave es: ¿cuál es la técnica más adecuada para usar en una situación particular? desde luego, esto depende de los requerimientos del sistema a desarrollar, la tecnología y los activos reutilizables disponibles, y la experiencia del equipo de desarrollo. los factores clave que deben considerarse al planear la reutilización son: 1. el calendario de desarrollo para el software si el software debe desarrollar- se rápidamente, usted debe tratar de reutilizar sistemas comerciales en vez de problema explicación costos crecientes de mantenimientosi no está disponible el código fuente de un sistema o componente de software de reutilización, entonces los costos de mantenimiento podrían ser superiores, porque los elementos reutilizados del sistema pueden volverse cada vez más incompatibles con los cambios del sistema. falta de apoyo de herramientasalgunas herramientas de software no apoyan el desarrollo con reutilización. tal vez sea difícil o imposible integrar dichas herramientas con un sistema de librería de componentes. el proceso de software supuesto por dichas herramientas quizá no tome en cuenta la reutilización. esto es particularmente cierto para herramientas que dan apoyo a la ingeniería de sistemas embebidos, aunque menos cierto para herramientas de desarrollo orientadas a objetos. síndrome “no se inventó aquí”algunos ingenieros de software prefieren rescribir los componentes, porque consideran que pueden mejorarlos. esto en parte tiene que ver con la confianza y en parte con el hecho de que escribir software original se observa como más desafiante que reutilizar el software de alguien más. creación, mantenimiento y uso de una librería de componentessuele ser costoso dotar a una librería de componentes de reutilización y garantizar que los desarrolladores de software puedan utilizar esta librería. hay que adaptar procesos de desarrollo para asegurar que se use la librería. descubrimiento, comprensión y adaptación de componentes de reutilización deben descubrirse componentes de software en una librería, entenderse y, en ocasiones, adaptarse para trabajar en un nuevo entorno. los ingenieros deben estar ampliamente seguros de encontrar un componente en la librería antes de incluir una búsqueda de componentes como parte de su proceso de desarrollo normal. figura 16.2 problemas con la reutilización m16_sommerville_ingenieria_1ed_se_423-451.indd  428m16_sommerville_ingenieria_1ed_se_423-451.indd  428 3/18/11  5:02:12 pm3/18/11  5:02:12 pm