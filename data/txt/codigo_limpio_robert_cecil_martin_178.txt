Listado 9-5 EnvironmentControllerTest.java (una selección mayor). @Test public void turnOnCoolerAndBlowerIfTooHot() throws Exception { tooHot(); assertEquals(“hBChl”, hw.getState()); } @Test public void turnOnHeaterAndBlowerIfTooCold() throws Exception { tooCold(); assertEquals(“HBchl”, hw.getState()); } @Test public void turnOnHiTempAlarmAtThreshold() throws Exception { wayTooHot(); assertEquals(“hBCHL”, hw.getState()); } @Test public void turnOnLoTempAlarmAtThreshold() throws Exception { wayTooCold(); assertEquals(“HBchL”, hw.getState()); } La función  getState  se reproduce en el Listado 9-6. No es un código muy eficaz. Para que lo sea, deberíamos haber usado  StringBuffer . Listado 9-6 MockControlHardware.java. public String getState() { String state = “”; state += heater ? “H” : “h”; state += blower ? “B” : “b”; state += cooler ? “C” : “c”; state += hiTempAlarm ? “H” : “h”; state += loTempAlarm ? “L” : “l”; return state; } StringBuffer  es poco atractivo. Incluso en código de producción, intento evitarlo si el coste es mínimo, como podría suceder en el Listado 9-6. Pero esta aplicación es claramente un sistema incrustado en tiempo real y es probable que los recursos del equipo y la memoria estén limitados. Sin 179