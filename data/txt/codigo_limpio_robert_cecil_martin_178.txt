listado 9-5 environmentcontrollertest.java (una selección mayor). @test public void turnoncoolerandbloweriftoohot() throws exception { toohot(); assertequals(“hbchl”, hw.getstate()); } @test public void turnonheaterandbloweriftoocold() throws exception { toocold(); assertequals(“hbchl”, hw.getstate()); } @test public void turnonhitempalarmatthreshold() throws exception { waytoohot(); assertequals(“hbchl”, hw.getstate()); } @test public void turnonlotempalarmatthreshold() throws exception { waytoocold(); assertequals(“hbchl”, hw.getstate()); } la función getstate se reproduce en el listado 9-6. no es un código muy eficaz. para que lo sea, deberíamos haber usado stringbuffer . listado 9-6 mockcontrolhardware.java. public string getstate() { string state = “”; state += heater ? “h” : “h”; state += blower ? “b” : “b”; state += cooler ? “c” : “c”; state += hitempalarm ? “h” : “h”; state += lotempalarm ? “l” : “l”; return state; } stringbuffer es poco atractivo. incluso en código de producción, intento evitarlo si el coste es mínimo, como podría suceder en el listado 9-6. pero esta aplicación es claramente un sistema incrustado en tiempo real y es probable que los recursos del equipo y la memoria estén limitados. sin 179