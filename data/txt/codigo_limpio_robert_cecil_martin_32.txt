ron comenzó su carrera como programador con fortran en strategic air command y ha escrito código para la práctica totalidad de lenguajes y equipos. merece la pena fijarse en sus palabras: en los últimos años, comencé y prácticamente terminé con las reglas de código simple de beck. en orden de prioridad, el código simple: ejecuta todas las pruebas. no contiene duplicados. expresa todos los conceptos de diseño del sistema. minimiza el número de entidades como clases, métodos, funciones y similares. de todos ellos, me quedo con la duplicación. cuando algo se repite una y otra vez, es una señal de que tenemos una idea que no acabamos de representar correctamente en el código. intento determinar cuál es y, después, expresar esa idea con mayor claridad. para mí, la expresividad debe incluir nombres con sentido y estoy dispuesto a cambiar los nombres de las cosas varias veces. con las modernas herramientas de creación de código como eclipse, el cambio de nombres es muy sencillo, por lo que no me supone problema alguno. la expresividad va más allá de los nombres. también me fijo si un objeto o un método hacen más de una cosa. si se trata de un objeto, probablemente tenga que dividirse en dos o más. si se trata de un método, siempre recurro a la refactorización de extracción de métodos para generar un método que exprese con mayor claridad su cometido y varios métodos secundarios que expliquen cómo lo hace. la duplicación y la expresividad son dos factores que permiten mejorar considerablemente código que no sea limpio. sin embargo, 33