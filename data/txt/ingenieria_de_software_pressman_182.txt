CAPÍTULO 6  MODELADO DE LOS REQUERIMIENTOS 151 ponsabilidades actualizar( ) y desplegar( ) deben, por tanto, ser compartidas por cada  uno de los objetos mencionados. Jugador sabe cuando algo ha cambiado y requiere ac- tualizarse( ). Colabora con los demás objetos para obtener una nueva posición u orien-tación, pero cada objeto controla su propio despliegue en la pantalla. Colaboraciones.  Una clase cumple sus responsabilidades en una de dos formas: 1) usa sus  propias operaciones para manipular sus propios atributos, con lo que satisface una responsabi-lidad particular o 2) colabora con otras clases. W irfs-Brock et al. [Wir90] definen las colabora- ciones del modo siguiente: Las colaboraciones representan solicitudes que hace un cliente a un servidor para cumplir con sus  responsabilidades. Una colaboración es la materialización del contrato entre el cliente y el servidor [...] Decimos que un objeto colabora con otro si, para cumplir una responsabilidad, necesita enviar al otro objeto cualesquiera mensajes. Una sola colaboración fluye en una dirección: representa una so-licitud del cliente al servidor. Desde el punto de vista del cliente, cada una de sus colaboraciones está asociada con una responsabilidad particular implementada por el servidor. Las colaboraciones se identifican determinando si una clase puede cumplir cada responsabili- dad. Si no es así, entonces necesita interactuar con otra clase. Ésa es una colaboración. Como ejemplo, considere la función de seguridad de CasaSegura. Como parte del procedi- miento de activación, el objeto PaneldeControl debe determinar si están abiertos algunos  sensores. Se define una responsabilidad llamada determinar-estado-delsensor( ). Si los sensores  están abiertos, PaneldeControl debe fijar el atributo estado como “no está listo”. La información  del sensor se adquiere de cada objeto Sensor. Por tanto, la responsabilidad determinar-estado- delsensor( ) se cumple sólo si PaneldeControl trabaja en colaboración con Sensor. Para ayudar a identificar a los colaboradores, se estudian tres relaciones generales diferentes  entre las clases [Wir90]: 1) la relación es-parte-de, 2) la relación tiene-conocimiento-de y 3) la relación depende-de. En los párrafos siguientes se analizan brevemente cada una de estas tres  responsabilidades generales. Todas las clases que forman parte de una clase agregada se conectan a ésta por medio de  una relación es-parte-de. Considere las clases definidas por el juego mencionado antes, la clase CuerpodelJugador es-parte-de Jugador, igual que BrazosdelJugador, PiernasdelJugador y  CabezadelJugador. En UML, estas relaciones se representan como el agregado que se ilustra en la figura 6.12. Cuando una clase debe adquirir información de otra, se establece la relación tiene-conocimien to- de. La responsabilidad determinar-estado-delsensor( ) ya mencionada es un ejemplo de ello. Jugador CabezadelJugador CuerpodelJugador BrazosdelJugador PiernasdelJugadorFIGURA 6.12 Una clase  agregada compuesta 06Pressman(126-157).indd   15106Pressman(126-157).indd   151 14/1/10   14:29:2114/1/10   14:29:21