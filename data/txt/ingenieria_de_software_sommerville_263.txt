246 capítulo 9 ■ evolución del software 4. antigüedad y estructura del programa conforme se realizan cambios al programa, su estructura tiende a degradarse. en consecuencia, a medida que los programas envejecen, se vuelven más difíciles de entender y cambiar. algunos sistemas se desarrollaron sin técnicas modernas de ingeniería de software. es posible que nunca hayan estado bien estructurados y tal vez estuvieron optimizados para eficiencia y no para comprensibilidad. la documentación del sistema puede estar perdida o ser inconsistente. es posible que los sistemas antiguos no se hayan sujetado a una ges-tión rigurosa de configuración, de modo que se desperdicia tiempo para encontrar las versiones correctas de los componentes del sistema a cambiar. los primeros tres de estos problemas surgen del hecho de que muchas organizacio-nes todavía consideran el desarrollo y el mantenimiento como actividades separadas. el mantenimiento se ve como una actividad de segunda clase, y no hay incentivo para gastar dinero durante el desarrollo para reducir los costos del cambio de sistema. la única solu-ción a largo plazo a este problema es aceptar que los sistemas rara vez tienen una vida definida pero continúan en uso, en cierta forma, durante un periodo indefinido. como se sugirió en la introducción, se debe considerar que los sistemas evolucionan a lo largo de su vida durante un proceso de desarrollo continuo. en el cuarto conflicto, el problema de la estructura degradada del sistema es el más sencillo de enfrentar. las técnicas de reingeniería de software (que se describen más ade-lante en este capítulo) son aplicables para mejorar la estructura y comprensibilidad del sistema. transformaciones arquitectónicas pueden adaptar el sistema a un hardware nuevo. la refactorización mejora la calidad del código del sistema y facilita el cambio. 9.3.1 predicción de mantenimiento los gerentes aborrecen las sorpresas, sobre todo si derivan en costos inesperadamente elevados. por consiguiente, se debe tratar de predecir qué cambios deben proponerse al sistema y qué partes del sistema es probable que sean las más difíciles de mantener. también hay que tratar de estimar los costos de mantenimiento globales para un sistema durante cierto lapso de tiempo. la figura 9.10 muestra dichas predicciones y las pregun-tas asociadas. predecir el número de peticiones de cambio para un sistema requiere un entendi-miento de la relación entre el sistema y su ambiente externo. algunos sistemas tienen unadocumentación la documentación del sistema ayuda al proceso de mantenimiento al proporcionar a quienes dan mantenimiento información acerca de la estructura y la organización del sistema, así como de las características que ofrece a los usuarios del sistema. aunque los defensores de los enfoques ágiles, como xp, sugieren que el código debe ser la principal documentación, los modelos de diseño de alto nivel y la información acerca de dependencias y restricciones facilitarán la comprensión y realización de cambios al código. el autor escribió un capítulo aparte sobre documentación que el lector puede descargar. http://www.softwareengineering-9.com/web/extrachaps/documentation.pdf m09_sommerville_ingenieria_1ed_se_234-260.indd  246m09_sommerville_ingenieria_1ed_se_234-260.indd  246 3/18/11  4:52:24 pm3/18/11  4:52:24 pm