a sus sistemas de los problemas del código concurrente. Principio de responsabilidad única (SRP) SRP [78]  establece que un método, clase o componente sólo debe tener un motivo para cambiar. El diseño de concurrencia es lo bastante complejo como para ser un motivo de cambio con derecho propio y, por tanto, debe separarse del resto del código. Desafortunadamente, es habitual incrustar los detalles de la implementación de concurrencia directamente en otro código de producción. Tenga en cuenta los siguientes aspectos: El código relacionado con la concurrencia tiene su propio ciclo de desarrollo , cambios y ajustes. El código relacionado con la concurrencia tiene sus propios desafíos , diferentes y más complicados, que los del código no relacionado con la concurrencia. El número de formas en las que el código incorrecto basado en la concurrencia puede fallar lo complica ya de por sí, sin la carga añadida del código de aplicación circundante. Recomendación :  Separe el código de concurrencia del resto del código [79] . Corolario: Limitar el ámbito de los datos Como hemos visto, dos procesos que modifican el mismo campo u objeto compartido pueden interferir entre ellos y provocar un comportamiento inesperado. Una solución consiste en usar la palabra clave  synchronized para proteger una sección importante del código que use el objeto compartido, aunque conviene limitar la cantidad de estas secciones. Cuantos más puntos actualicen datos compartidos, es más probable que: 240