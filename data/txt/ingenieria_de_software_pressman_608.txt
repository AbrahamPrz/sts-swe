capítulo 25 métricas de proceso y de proyecto 577 además, es posible calcular otras métricas interesantes: • errores por persona-mes. • kloc por persona-mes. • $ por página de documentación. las métricas orientadas a tamaño no se aceptan universalmente como la mejor forma de medir el proceso de software. la mayor parte de la controversia gira en torno del uso de líneas de código como medida clave. quienes proponen la medida loc afirman que las loc son un “ar-tefacto” de todos los proyectos de desarrollo de software y que pueden contarse fácilmente; que muchos modelos existentes de estimación de software usan loc o kloc como entrada clave y que ya existe un gran cuerpo de literatura y predicado de datos acerca de loc. por otra parte, los opositores argumentan que las medidas loc dependen del lenguaje de programación; que cuando se considera la productividad, castigan a los programas bien diseñados pero cortos; que no pueden acomodarse con facilidad en lenguajes no procedurales y que su uso en la esti-mación requiere un nivel de detalle que puede ser difícil de lograr (es decir, el planificador debe estimar las loc que se van a producir mucho antes de completar el análisis y el diseño). 25.2.2 métricas orientadas a función las métricas de software orientadas a función usan una medida de la funcionalidad entregada por la aplicación como un valor de normalización. la métrica orientada a función de mayor uso es el punto de función (pf). el cálculo del punto de función se basa en características del domi-nio y de la complejidad de información del software. la mecánica del cálculo del pf se estudió en el capítulo 23. 3 el punto de función, como la medida loc, es controvertido. quienes lo proponen afirman que el pf es independiente del lenguaje de programación, lo que lo hace ideal para aplicaciones que usan lenguajes convencionales y no procedurales, y que se basa en datos que es más pro-bable que se conozcan tempranamente en la evolución de un proyecto, lo que hace al pf más atractivo como enfoque de estimación. sus opositores afirman que el método requiere cierta “maña”, pues dicho cálculo se basa en datos subjetivos más que objetivos, que el conteo del dominio de información (y otras dimensiones) puede ser difícil de recopilar después del hecho y que el pf no tiene significado físico directo: es sólo un número. 25.2.3 reconciliación de métricas loc y pf la relación entre líneas de código y puntos de función depende del lenguaje de programación que se use para implementar el software y la calidad del diseño. algunos estudios intentan re-lacionar las medidas pf y loc. la tabla 4 [qsm02], que se presenta en la página siguiente, ofrece estimaciones burdas del número promedio de líneas de código requeridas para construir un punto de función en varios lenguajes de programación. una revisión de estos datos indica que un loc de c++ proporciona aproximadamente 2.4 veces la “funcionalidad” (como promedio) que un loc de c. más aún, un loc de smalltalk pro-porciona al menos cuatro veces la funcionalidad de un loc para un lenguaje de programación convencional, como ada, cobol o c. al usar la información contenida en la tabla, es posible “retroactivar” [jon98] el software existente para estimar el número de puntos de función, una vez conocido el número total de enunciados del lenguaje de programación.punto clave las métricas orientadas a tamaño se usan ampliamente, pero continúa el debate acerca de su validez y aplicabilidad. 3 vea la sección 23.2.1 para un análisis detallado del cálculo de pf. 4 usado con permiso de quantitative software management (www.qsm.com), copyright 2002. 25pressman(571-592).indd  57725pressman(571-592).indd  577 19/1/10  23:39:5419/1/10  23:39:54