CAPÍTULO 4  PRINCIPIOS QUE GUÍAN LA PRÁCTICA 99   LECTURAS  Y FUENTES  DE INFORMACIÓN  ADICIONALES La comunicación con el cliente es una actividad de importancia crítica en la ingeniería de software, pero  pocos de sus practicantes dedican tiempo a leer sobre ella. Withall ( Software Requirements Patterns, Microsoft  Press, 2007) presenta varios patrones útiles que analizan problemas en la comunicación. Sutliff ( User-Centred  Requirements Engineering, Springer, 2002) se centra mucho en los retos relacionados con la comunicación. Los libros de Weigers (Software Requierements, 2a. ed., Microsoft Press, 2003), Pardee (To Satisfy and Delight Your Customer, Dorset House, 1996) y Karten [Kar94] analizan a profundidad los métodos para tener una interacción eficaz con el cliente. Aunque su libro no se centra en el software, Hooks y Farry ( Customer Cen- tered Products, American Management Association, 2000) presentan lineamientos generales útiles para la comunicación con los clientes. Young ( Effective Requirements Practices , Addison-Wesley, 2001) pone el énfa- sis en un “equipo conjunto” de clientes y desarrolladores que recaben los requerimientos en colaboración. Somerville y Kotonya ( Requirements Engineering: Processes and Techniques , Wiley, 1998) analizan el concepto  de “provocación” y las técnicas y otros requerimientos de los principios de ingeniería. Los conceptos y principios de la comunicación y planeación son estudiados en muchos libros de admi- nistración de proyectos. Entre los más útiles se encuentran los de Bechtold ( Essentials of Software Project  Management, 2a. ed., Management Concepts, 2007), Wysocki ( Effective Project Management: Traditional, Adap- tive, Extreme, 4a. ed., Wiley, 2006), Leach (Lean Project Management: Eight Principles for Success, BookSurge Publishing, 2006) Hughes ( Software Project Management, McGraw-Hill, 2005) y Stellman y Greene (Applied  Software Project Management, O’Reilly Media, Inc., 2005). Davis [Dav95] hizo una compilación excelente de referencias sobre principios de la ingeniería de soft- ware. Además, virtualmente todo libro al respecto contiene un análisis útil de los conceptos y principios para análisis, diseño y prueba. Entre los más utilizados (además de éste, claro) se encuentran los siguientes: Abran, A., y J. Moore, SWEBOK: Guide to the Software Engineering Body of Knowledge , IEEE, 2002. Christensen, M., y R. Thayer, A Project Manager’s Guide to Software Engineering Best Practices , IEEE-CS  Press (Wiley), 2002. Jalote, P., An Integrated Approach to Software Engineering, Springer, 2006. Pfleeger, S., Software Engineering: Theory and Practice, 3a. ed., Prentice-Hall, 2005. Schach, S., Object- Oriented and Classical Software Engineering , McGraw-Hill, 7a. ed., 2006. Sommerville, I., Software Engineering, 8a. ed., Addison-Wesley, 2006 Estos libros también presentan análisis detallados sobre los principios de modelado y construcción. Los principios de modelado se estudian en muchos libros dedicados al análisis de requerimientos o diseño  de software. Los libros de Lieberman (The Art of Software Modeling, Auerbach, 2007), Rosenberg y Stephens  (Use Case Driven Object Modeling with UML: Theory and Practice, Apress, 2007), Roques ( UML in Practice, Wiley,  2004) y Penker y Eriksson (Business Modeling with UML: Business Patterns at Work, Wiley, 2001) analizan los  principios y métodos de modelado. Todo ingeniero de software que trate de hacer diseño está obligado a leer el texto de Norman ( The Design  of Everyday Things, Currency/Doubleday, 1990). Winograd y sus colegas (Bringing Design to Software, Addi- son-Wesley, 1996) editaron una excelente colección de ensayos sobre aspectos prácticos del diseño de soft-ware. Constantine y Lockwood (Software for Use, Addison-Wesley, 1999) presenta los conceptos asociados  con el “diseño centrado en el usuario”. Tognazzini ( Tog on Software Design, Addison-Wesley, 1995) presenta  una reflexión filosófica útil sobre la naturaleza del diseño y el efecto que tienen las decisiones sobre la calidad y la capacidad del equipo para producir software que agregue mucho valor para su cliente. Stahl y sus cole-gas (Model-Driven Software Development: Technology, Engineering, Wiley, 2006) estudian los principios del desarrollo determinado por el modelo. Son cientos los libros que abordan uno o más elementos de la actividad de construcción. Kernighan y  Plauger [Ker78] escribieron un texto clásico sobre el estilo de programación, McConell [McC93] presenta li-neamientos prácticos para la construcción de software, Bentley [Ben99] sugiere una amplia variedad de perlas de la programación, Knuth [Knu99] escribió una serie clásica de tres volúmenes acerca del arte de programar y Hunt [Hun99] sugiere lineamientos pragmáticos para la programación. Myers y sus colegas (The Art of Software Testing , 2a. ed., Wiley, 2004) desarrollaron una revisión importante  de su texto clásico y muchos principios importantes para la realización de pruebas. Los libros de Perry ( Effec- tive Methods for Software Testing, 3a. ed., W  iley 2006), Whittaker (How to Break Software, Addison-Wesley,  2002), Kaner y sus colegas (Lessons Learned in Software Testing , Wiley, 2001) y Marick (The Craft of Software  Testing, Prentice-Hall, 1997) presentan por separado conceptos y principios importantes para hacer pruebas, así como muchas guías prácticas. 04Pressman(081-100).indd   9904Pressman(081-100).indd   99 26/1/10   17:32:0126/1/10   17:32:01