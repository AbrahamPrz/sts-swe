2.1 ■ modelos de proceso de software 31 las principales etapas del modelo en cascada reflejan directamente las actividades fundamentales del desarrollo: 1. análisis y definición de requerimientos los servicios, las restricciones y las metas del sistema se establecen mediante consulta a los usuarios del sistema. luego, se definen con detalle y sirven como una especificación del sistema. 2. diseño del sistema y del software el proceso de diseño de sistemas asigna los reque- rimientos, para sistemas de hardware o de software, al establecer una arquitectura de sistema global. el diseño del software implica identificar y describir las abstraccio-nes fundamentales del sistema de software y sus relaciones. 3. implementación y prueba de unidad durante esta etapa, el diseño de software se rea liza como un conjunto de programas o unidades del programa. la prueba de uni-dad consiste en verificar que cada unidad cumpla con su especificación. 4. integración y prueba de sistema las unidades del programa o los programas indivi- duales se integran y prueban como un sistema completo para asegurarse de que se cumplan los requerimientos de software. después de probarlo, se libera el sistema de software al cliente. 5. operación y mantenimiento por lo general (aunque no necesariamente), ésta es la fase más larga del ciclo de vida, donde el sistema se instala y se pone en práctica. el mantenimiento incluye corregir los errores que no se detectaron en etapas anteriores del ciclo de vida, mejorar la implementación de las unidades del sistema e incremen-tar los servicios del sistema conforme se descubren nuevos requerimientos. en principio, el resultado de cada fase consiste en uno o más documentos que se auto-rizaron (“firmaron”). la siguiente fase no debe comenzar sino hasta que termine la fase previa. en la práctica, dichas etapas se traslapan y se nutren mutuamente de información. durante el diseño se identifican los problemas con los requerimientos. en la codificación se descubren problemas de diseño, y así sucesivamente. el proceso de software no es un simple modelo lineal, sino que implica retroalimentación de una fase a otra. entonces, es posible que los documentos generados en cada fase deban modificarse para reflejar los cambios que se realizan. debido a los costos de producción y aprobación de documentos, las iteraciones suelen ser onerosas e implicar un rediseño significativo. por lo tanto, después de un pequeño número de iteraciones, es normal detener partes del desarrollo, como la especificación, y continuar con etapas de desarrollo posteriores. los problemas se dejan para una reso-lución posterior, se ignoran o se programan. este freno prematuro de los requerimientos quizá signifique que el sistema no hará lo que el usuario desea. también podría conducir a sistemas mal estructurados conforme los problemas de diseño se evadan con la imple-mentación de trucos. durante la fase final del ciclo de vida (operación y mantenimiento), el software se pone en servicio. se descubren los errores y las omisiones en los requerimientos origi-nales del software. surgen los errores de programa y diseño, y se detecta la necesidad de nueva funcionalidad. por lo tanto, el sistema debe evolucionar para mantenerse útil. hacer tales cambios (mantenimiento de software) puede implicar la repetición de etapas anteriores del proceso. m02_sommerville_ingenieria_1ed_se_027-055.indd  31m02_sommerville_ingenieria_1ed_se_027-055.indd  31 3/18/11  4:45:30 pm3/18/11  4:45:30 pm