capítulo 7 modelado de los requerimientos 165 password maestro no coincide, los cuatro dígitos se comparan con una tabla de passwords secunda- rios (que deben asignarse para recibir invitados o trabajadores que necesiten entrar a la casa cuando el propietario no esté presente). si el password coincide con una entrada de la tabla, se pasa <mensaje de identificación válida = verdadero> a la función mostrar mensaje y estado. si no coinciden, se pasa <mensaje de identificación válida = falso> a la función de mostrar mensaje y estado. si en esta etapa se desean detalles algorítmicos adicionales, también puede incluirse una repre- sentación del lenguaje de diseño del programa (ldp) como parte de la pspec. sin embargo, muchos profesionales piensan que la versión ldp debe posponerse hasta comenzar el diseño de los componentes. 6 las herramientas mencionadas aquí no son obligatorias sino una muestra de las que hay en esta categoría. en la mayoría de casos, los nombres de las herramientas son marcas registradas por sus respectivos desarrolladores.objetivo: las herramientas de análisis estructurado per- miten que un ingeniero de software cree modelos de datos, de flujo y de comportamiento en una forma que permite la consisten-cia y continuidad con facilidad para hacer la revisión, edición y ampliación. los modelos creados con estas herramientas dan al inge-niero de software la perspectiva de la representación del análisis y lo ayudan a eliminar errores antes de que éstos se propaguen al diseño o, lo que sería peor, a la implementación. mecánica: las herramientas de esta categoría son un “diccionario de datos”, como la base de datos central para describir todos los objetos de datos. una vez definidas las entradas del diccionario, se crean diagramas entidad-relación y se desarrollan las jerarquías de los objetos. las características de los diagramas de flujo de datos per-miten que sea fácil crear este modelo gráfico y también proveen de características para generar pspec y cspec. asimismo, las herra-mientas de análisis permiten que el ingeniero de software produzca modelos de comportamiento con el empleo del diagrama de estado como notación operativa. herramientas representativas. 6 maca&d, wina&d, desarrolladas por software excel (www. excelsoftware.com), brinda un conjunto de herramientas de análisis y diseño sencillas y baratas para computadoras mac y windows. metacase workbench, desarrollada por metacase consulting (www.metacase.com), es una metaherramienta utilizada para definir un método de análisis o diseño (incluso análisis estructurado) y sus conceptos, reglas, notaciones y generadores. system architect, desarrollado por popkin software (www.popkin. com), da una amplia variedad de herramientas de análisis y diseño, incluso para modelar datos y hacer análisis estructurado.herramientas de software análisis estructurado 7.3 creación de un modelo de comportamiento la notación de modelado que hemos estudiado hasta el momento representa elementos estáti- cos del modelo de requerimientos. es hora de hacer la transición al comportamiento dinámico del sistema o producto. para hacerlo, dicho comportamiento se representa como función de eventos y tiempo específicos. el modelo de comportamiento indica la forma en la que responderá el software a eventos o estímulos externos. para generar el modelo deben seguirse los pasos siguientes: 1. evaluar todos los casos de uso para entender por completo la secuencia de interacción dentro del sistema. 2. identificar los eventos que conducen la secuencia de interacción y que entienden el modo en el que éstos se relacionan con objetos específicos. 3. crear una secuencia para cada caso de uso. 4. construir un diagrama de estado para el sistema. 5. revisar el modelo de comportamiento para verificar la exactitud y consistencia. en las secciones siguientes se estudia cada uno de estos pasos.¿cómo se modela la reacción del software ante algún evento externo?? 07pressman(158-182).indd  16507pressman(158-182).indd  165 14/1/10  14:19:3914/1/10  14:19:39