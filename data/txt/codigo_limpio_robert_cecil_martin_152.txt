excepción común: localport port = new localport(12); try { port.open(); } catch (portdevicefailure e) { reporterror(e); logger.log(e.getmessage(), e); } finally { … } nuestra clase localport es un simple envoltorio que captura y traduce excepciones generadas por la clase acmeport : public class localport { private acmeport innerport; public localport(int portnumber) { innerport = new acmeport(portnumber); } public void open() { try { innerport.open(); } catch (deviceresponseexception e) { throw new portdevicefailure(e); } catch (atm1212unlockedexception e) { throw new portdevicefailure(e); } catch (gmxerror e) { throw new portdevicefailure(e); } } … } los envoltorios como el definido para acmeport pueden ser muy útiles. de hecho, es recomendable envolver api de terceros. al hacerlo, se minimizan las dependencias: puede cambiar a otra biblioteca diferente sin apenas problemas y el envoltorio también facilita imitar invocaciones de terceros cuando se prueba el código. una última ventaja es que no estamos limitados a las decisiones de diseño de api de un determinado fabricante. puede definir una api que le resulte cómoda. en el ejemplo anterior, definimos un único tipo de excepción para el fallo de puertos y podemos escribir un código mucho más limpio. a menudo, una única clase de excepción es suficiente para una zona concreta del código. la información enviada con la excepción puede distinguir los errores. use clases diferentes 153