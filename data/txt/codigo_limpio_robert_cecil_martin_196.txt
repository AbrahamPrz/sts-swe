} private static void checkoddnumbersforsubsequentprimes() { int primeindex = 1; for (int candidate = 3; primeindex < primes.length; candidate += 2) { if (isprime(candidate)) primes[primeindex++] = candidate; } } private static boolean isprime(int candidate) { if (isleastrelevantmultipleofnextlargerprimefactor(candidate)) { multiplesofprimefactors.add(candidate); return false; } return isnotmultipleofanypreviousprimefactor(candidate); } private static boolean isleastrelevantmultipleofnextlargerprimefactor(int candidate) { int nextlargerprimefactor = primes[multiplesofprimefactors.size()]; int leastrelevantmultiple = nextlargerprimefactor * nextlargerprimefactor; return candidate == leastrelevantmultiple; } private static boolean isnotmultipleofanypreviousprimefactor(int candidate) { for (int n = 1; n < multiplesofprimefactors.size(); n++) { if (ismultipleofnthprimefactor(candidate, n)) return false; } return true; } private static boolean ismultipleofnthprimefactor(int candidate, int n) { return candidate == smallestoddnthmultiplenotlessthancandidate(candidate, n); } private static int smallestoddnthmultiplenotlessthancandidate(int candidate, int n) { int multiple = multiplesofprimefactors.get(n); while (multiple < candidate) multiple += 2 * primes[n]; multiplesofprimefactors.set(n, multiple); return multiple; } } lo primero que apreciarÃ¡ es que ha aumentado la longitud del programa, 197