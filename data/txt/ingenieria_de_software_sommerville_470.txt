como se explicó en el capítulo 16, numerosos y nuevos sistemas empresariales se desa- rrollan ahora al configurar sistemas comerciales cots. sin embargo, cuando una com-pañía no puede usar un sistema cots porque no cubre sus requerimientos, el software que se requiere debe desarrollarse especialmente. para el software personalizado, la inge-niería de software basada en componentes es una forma efectiva orientada a la reutiliza-ción para desarrollar nuevos sistemas empresariales. la ingeniería de software basada en componentes (cbse, por las siglas de compo-nent-based software engineering) surgió a finales de la década de 1990 como un en-foque al desarrollo de sistemas de software basado en la reutilización de componentes de software. su creación fue motivada por la frustración de los diseñadores al percatarse de que el desarrollo orientado a objetos no conducía a una reutilización extensa, como se había sugerido originalmente. las clases de objetos individuales eran muy detalladas y específi-cas y con frecuencia tenían que acotarse con una aplicación al momento de compilar. para usarlas, se debe tener conocimiento detallado de las clases, y por lo general esto significa tener el código fuente del componente. por consiguiente, era casi imposible vender o distri-buir objetos como componentes de reutilización individuales. los componentes son abstracciones de alto nivel en comparación con los objetos y se definen mediante sus interfaces. por lo general, son más grandes que los objetos individua-les y todos los detalles de implementación se ocultan a otros componentes. la cbse es el proceso de definir, implementar e integrar o componer los componentes independientes e imprecisos en los sistemas. se ha constituido en un importante enfoque de desarrollo de soft-ware porque los sistemas de software son cada vez más amplios y complejos. los clientes demandan un software más confiable que se entregue e implemente más rápidamente. la única forma de enfrentar la complejidad y entregar un mejor software con mayor rapidez es reutilizar en lugar de implementar una vez más los componentes de software. los fundamentos de la ingeniería de software basada en componentes son: 1. componentes independientes que se especifican por completo mediante sus interfa- ces. debe existir una separación clara entre la interfaz del componente y su imple- mentación. esto significa que la implementación de un componente puede sustituirse por otra, sin cambiar otras partes del sistema. 2. estándares de componentes que facilitan la integración de éstos. tales estándares se incrustan en un modelo de componentes. definen, a un nivel mínimo, cómo deben especificarse las interfaces de componentes y cómo se comunican estos últimos. algunos modelos van más allá y definen las interfaces que deben implementarse por todos los componentes integrantes. si los componentes se conforman a los estándares, entonces su ejecución es independiente de su lenguaje de programación. los compo-nentes escritos en diferentes lenguajes pueden integrarse en el mismo sistema. 3. middleware que brinda soporte de software para integración de componentes. para hacer que componentes independientes distribuidos trabajen en conjunto, es nece-sario soporte de middleware que maneje las comunicaciones de componentes. el middleware para soporte de componentes maneja eficientemente los conflictos de bajo nivel y permite enfocarse en problemas relacionados con la aplicación. además, el middleware para soporte de componentes puede brindar apoyo para la asignación de recursos, la gestión de transacciones, la seguridad y concurrencia. 4. un proceso de desarrollo que se engrana con la ingeniería de software basada en componentes. usted necesita un proceso de desarrollo que permita la evolución de capítulo 17 ■ ingeniería de software basada en componentes 453 m17_sommerville_ingenieria_1ed_se_452-478.indd  453m17_sommerville_ingenieria_1ed_se_452-478.indd  453 3/18/11  5:03:04 pm3/18/11  5:03:04 pm