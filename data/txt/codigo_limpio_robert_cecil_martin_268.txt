return argsfound.contains(arg); } public boolean isvalid() { return valid; } private class argsexception extends exception { } } espero que su reacción inicial ante tal cantidad de código es alegrarse por no haberlo conservado tal cual. si ha sido su reacción, recuerde que será la que tengan otros que lean un borrador de su código. en realidad, primer borrador es lo mejor que se puede decir sobre este código. evidentemente es un trabajo en progreso. la cantidad de variables de instancia es apabullante. cadenas extrañas como « tilt », hashset y treeset , y los bloques try-catch-catch aumentan el desastre. no era mi intención crear este desastre. en realidad, intentaba mantener cierta organización, como demuestra la elección de nombres de funciones y variables, y la estructura del programa. pero es evidente que el problema se me fue de las manos. el desastre aumentó gradualmente. las versiones anteriores no fueron tan malas. por ejemplo, el listado 14-9 muestra una versión inicial en la que sólo funcionaban los argumentos booleanos. listado 14-9 args.java (sólo argumentos booleanos) package com.objectmentor.utilities.getopts; import java.util.*; public class args { private string schema; private string[] args; private boolean valid; private set<character> unexpectedarguments = new treeset<character>(); private map<character, boolean> booleanargs = new hashmap<character, boolean>(); private int numberofarguments = 0; public args(string schema, string[] args) { this.schema = schema; this.args = args; 269