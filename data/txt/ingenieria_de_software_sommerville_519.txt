502  Capítulo 18 ■ Ingeniería de software distribuido 3. Los usuarios pueden pagar por el software de acuerdo con la cantidad de uso que  hagan de él o mediante una suscripción anual o mensual. En ocasiones, el software es gratuito para quien lo utilice, pero entonces los usuarios deben estar de acuerdo en aceptar publicidad, que financia el servicio del software.  Para usuarios de software, el beneficio de SaaS es que los costos para administrar el software se transfieren al proveedor. El proveedor es responsable de corregir los bugs e ins-talar las actualizaciones de software, enfrentar los cambios a la plataforma del sistema ope-rativo y asegurar que la capacidad del hardware pueda cumplir la demanda. Los costos de gestión de licencia del software son iguales a cero. Si alguien tiene muchas computadoras, no hay necesidad de autorizar las licencias del software para todas ellas. Si una aplicación de software sólo se usa ocasionalmente, el modelo “pago por uso” puede ser más barato que comprar una aplicación. Es posible acceder al software desde dispositivos móviles, tales como los teléfonos inteligentes (smart phones), desde cualquier parte del mundo. Por supuesto, este modelo de provisión de software tiene algunas desventajas. El prin-cipal problema, posiblemente, es el costo de transferir datos al servicio remoto. La trans-ferencia de datos se da de acuerdo con las velocidades de la red, por lo que transferir una gran cantidad de datos puede tardar mucho tiempo. También es posible que se deba pagar al proveedor del servicio de acuerdo con la cantidad transferida. Otros problemas son la falta de control sobre la evolución del software (el proveedor puede cambiar el software cuando lo desee) y problemas con la legislación y las regulaciones. Muchos países tienen leyes que regulan el almacenamiento, gestión, conservación y accesibilidad de los datos, y transferir datos a un servicio remoto puede quebrantar dichas leyes. La noción de SaaS y arquitecturas orientadas a servicios (SOA, por las siglas de ser-vice-oriented architectures), que se estudian en el capítulo 19, evidentemente se relacio-nan, aunque no son lo mismo: 1. SaaS es una forma de proporcionar funcionalidad en un servidor remoto, con acceso  de clientes mediante un navegador Web. El servidor conserva los datos y el estado del usuario durante una sesión de interacción. Por lo regular, las transacciones son largas (por ejemplo, la edición de un documento). 2. SOA es un enfoque a la estructuración de un sistema de software como un conjunto de servicios independientes, sin estado. Éstos pueden proporcionarse mediante múl-tiples proveedores y distribuirse. Por lo general, las transacciones son transacciones cortas donde se solicita un servicio, se hace algo y luego se devuelve el resultado.  SaaS es una forma de entregar funcionalidad de aplicación a los usuarios, mientras que SOA es una tecnología de implementación para sistemas de aplicación. La funciona-lidad implementada con el uso de SOA no necesita aparecer a los usuarios como servi-cios. De igual modo, los servicios de usuario no tienen que implementarse usando SOA. Sin embargo, si SaaS se implementa mediante SOA, es posible que las aplicaciones usen API de servicio para acceder a la funcionalidad de otras aplicaciones. Entones pueden integrarse en sistemas más complejos. A éstos se les llama mashups (remezcla o aplica-ción híbrida) y representan otro enfoque a la reutilización de software y el desarrollo de software rápido. Desde una perspectiva de desarrollo de software, el proceso de desarrollo de servicios tiene mucho en común con otros tipos de desarrollo de software. Sin embargo, la cons-trucción de servicio, por lo regular, no está dirigida por los requerimientos del usuario,  M18_SOMMERVILLE_INGENIERIA_1ED_SE_479-507.indd   502M18_SOMMERVILLE_INGENIERIA_1ED_SE_479-507.indd   502 3/18/11   5:03:56 PM3/18/11   5:03:56 PM