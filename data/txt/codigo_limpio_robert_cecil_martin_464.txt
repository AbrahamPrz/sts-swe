100 final SerialDate jan9Y2002 = SerialDate.addMonths(2, this.nov9Y2001); 101 final SerialDate answer = SerialDate.createInstance(9, 1, 2002); 102 assertEquals(answer, jan9Y2002); 103 } 104 105 /** 106 * Caso de prueba de un error, ya corregido. 107 */ 108 public void testAddMonthsTo5Oct2003() { 109 final SerialDate d1 = SerialDate.createInstance(5, MonthConstants.OCTOBER, 2003); 110 final SerialDate d2 = SerialDate.addMonths(2, d1); 111 assertEquals(d2, SerialDate.createInstance(5, MonthConstants.DECEMBER, 2003)); 112 } 113 114 /** 115 * Caso de prueba de un error, ya corregido. 116 */ 117 public void testAddMonthsTo1Jan2003() { 118 final SerialDate d1 = SerialDate.createInstance(1, MonthConstants.JANUARY, 2003); 119 final SerialDate d2 = SerialDate.addMonths(0, d1); 120 assertEquals(d2, d1); 121 } 122 123 /** 124 * El lunes anterior al viernes 9 de noviembre de 2001 debe ser el 5 de noviembre. 125 */ 126 public void testMondayPrecedingFriday9Nov2001() { 127 SerialDate mondayBefore = SerialDate.getPreviousDayOfWeek( 128 SerialDate.MONDAY, this.nov9Y2001 129 ); 130 assertEquals(5, mondayBefore.getDayOfMonth()); 131 } 132 133 /** 134 * El lunes posterior al viernes 9 de noviembre de 2001 debe ser el 12 de noviembre. 135 */ 136 public void testMondayFollowingFriday9Nov2001() { 137 SerialDate mondayAfter = SerialDate.getFollowingDayOfWeek( 138 SerialDate.MONDAY, this.nov9Y2001 139 ); 465