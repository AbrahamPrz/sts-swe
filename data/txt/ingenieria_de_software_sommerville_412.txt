15.1 ■ análisis estático 395 para implementar y usar. en ocasiones, la evidencia de la confiabilidad del sistema se integra en un caso de confiabilidad o protección. esto se usa para convencer a un cliente o a un regulador externo de la confiabilidad o protección del sistema. 1 5.1 análisis estático las técnicas de análisis estático son técnicas de verificación del sistema que no inclu-yen la ejecución de un programa. en vez de ello, funcionan sobre una representación fuente del software: un modelo de especificación o diseño, o el código fuente del pro-grama. las técnicas de análisis estático pueden usarse para comprobar la especificación y los modelos de diseño de un sistema con la finalidad de buscar errores antes de que esté disponible una versión ejecutable del sistema. también tienen la ventaja de que la presen-cia de errores no interrumpe la comprobación del sistema. cuando se prueba un progra-ma, los defectos pueden enmascarar u ocultar otros defectos, de manera que se debe eliminar un defecto detectado y luego repetir el proceso de prueba. como se estudió en el capítulo 8, tal vez la técnica de análisis estático usada con más frecuencia sea la revisión e inspección por pares, en la que un grupo de personas se encar-gan de comprobar una especificación, un diseño o un programa. ellos analizan a detalle el diseño o código, y examinan posibles errores u omisiones. otra técnica consiste en utilizar herramientas de modelado de diseño para comprobar anomalías en el uml, por ejemplo, el hecho de que el mismo nombre sea usado por diferentes objetos. sin embargo, para sistemas críticos, pueden emplearse técnicas adicionales de análisis estático: 1. verificación formal, en la que se producen argumentos matemáticamente rigurosos de que un programa se conforma a su especificación. 2. comprobación de modelo, en la que se usa un verificador de teoremas para revisar una descripción formal del sistema en busca de inconsistencias. 3. análisis automatizado de programa, en el que el código fuente de un programa se revi- sa por patrones que, según se sabe, son potencialmente erróneos. dichas técnicas están estrechamente relacionadas. la comprobación de modelos se apo ya en un modelo formal del sistema que puede crearse a partir de una especificación formal. los analizadores estáticos utilizan aseveraciones formales incrustadas en un pro-grama como comentarios, para comprobar que el código asociado es inconsistente con dichas aseveraciones. 15.1.1 verificación y métodos formales los métodos formales del desarrollo de software, como se estudió en el capítulo 12, se apoyan en un modelo formal que sirve como especificación del sistema. dichos métodos formales se interesan principalmente por un análisis matemático de la especificación, por transformar la especificación a una representación más detallada, semánticamente equi-valente, o por verificar de manera formal que una representación del sistema es semán-ticamente equivalente a otra representación. m15_sommerville_ingenieria_1ed_se_393-422.indd  395m15_sommerville_ingenieria_1ed_se_393-422.indd  395 3/18/11  5:01:19 pm3/18/11  5:01:19 pm