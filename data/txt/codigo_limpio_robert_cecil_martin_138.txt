private double radius; public final double PI = 3.141592653589793; public double area() { return PI * radius * radius; } } De nuevo, vemos la naturaleza complementaria de estas dos definiciones; totalmente contrarias. Esto ilustra la dicotomía fundamental entre objetos y estructuras de datos: El código por procedimientos (el que usa estructuras de datos) facilita la inclusión de nuevas funciones sin modificar las estructuras de datos existentes. El código orientado a objetos, por su parte, facilita la inclusión de nuevas clases sin cambiar las funciones existentes. El complemento también es cierto: El código por procedimientos dificulta la inclusión de nuevas estructuras de datos ya que es necesario cambiar todas las funciones. El código orientado a objetos dificulta la inclusión de nuevas funciones ya que es necesario cambiar todas las clases. Por tanto, lo que es difícil para la programación orientada a objetos es fácil para los procedimientos, y viceversa. En cualquier sistema complejo habrá ocasiones en las que queramos añadir nuevos tipos de datos en lugar de nuevas funciones. En dichos casos, los objetos y la programación orientada a objetos es lo más adecuado. Por otra parte, en ocasiones tendremos que añadir nuevas funciones en lugar de tipos de datos, para lo que resulta más adecuado usar código por procedimientos y estructuras de datos. Los programadores experimentados saben que la idea de que todo es un objeto es un mito. En ocasiones solamente  queremos  sencillas estructuras de datos con procedimientos que operen en las mismas. 139