StringBuffer html = new StringBuffer(“<hr”); if(size > 0) html.append(“ size=\“”).append(size + 1).append(“\””); html.append(“>”); return html.toString(); } Si lo analiza, verá lo que sucede. Esta función crea la etiqueta HTML que traza una regla horizontal por la página. La altura de la regla se especifica en la variable  size . Fíjese otra vez en el código. Este método mezcla al menos dos niveles de abstracción. El primero es la noción de que una regla horizontal tiene un tamaño. El segundo es la sintaxis de la propia etiqueta  HR . El código proviene del módulo  HruleWidget  de FitNesse. Este módulo detecta una fila de cuatro o más guiones y la convierte en la correspondiente etiqueta  HR . Cuantos más guiones haya, mayor será el tamaño. A continuación le muestro la refactorización del código. He cambiado el nombre del campo  size  para reflejar su verdadero cometido. Contenía el número de guiones adicionales. public String render() throws Exception { HtmlTag hr = new HtmlTag(“hr”); if (extraDashes > 0) hr.addAttribute(“size”, hrSize(extraDashes)); return hr.html(); } private String hrSize(int height) { int hrSize = height + 1; return String.format(“%d”, hrSize); } Este cambio separa correctamente los dos niveles de abstracción. La función  render  simplemente crea una etiqueta  HR  sin tener que saber nada sobre su sintaxis HTML. El módulo  HtmlTag  se encarga de los problemas sintácticos. De hecho, al realizar este cambio detecté un sutil error. El código original no incluía la barra final en la etiqueta  HR , como haría el estándar XHTML (es decir, generaba  <hr>  en lugar de  <hr/> ). El módulo  HtmlTag  se había modificado hace tiempo para ajustarlo a XHTML. 385