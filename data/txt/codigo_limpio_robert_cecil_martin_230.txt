image.dispose(); system.gc(); image = newimage; } al extraer a este reducido nivel, comenzamos a detectar incumplimientos de srp. por ello, podríamos cambiar un nuevo método extraído a otra clase. esto aumenta su visibilidad. otro miembro del equipo puede ver la necesidad de volver a extraer el nuevo método y usarlo en otro contexto diferente. esta reutilización mínima puede reducir considerablemente la complejidad del sistema. saber cómo lograrlo es fundamental para alcanzar la reutilización a gran escala. el patrón método de plantilla [73] es una técnica muy utilizada para eliminar duplicados de nivel superior. por ejemplo: public class vacationpolicy { public void accrueusdivisionvacation() { // código para calcular las vacaciones en función de las horas trabajadas //… // código para garantizar que las vacaciones cumplen los mínimos legales //… // código para aplicar vacation al registro payroll //… } public void accrueeudivisionvacation() { // código para calcular las vacaciones en función de las horas trabajadas //… // código para garantizar que las vacaciones cumplen los mínimos legales //… // código para aplicar vacation al registro payroll //… } } el código entre accrueusdivisionvacation y accrueeuropeandivisionvacation es prácticamente idéntico, a excepción del cálculo de mínimos legales. esa parte del algoritmo cambia en función del tipo de empleado. podemos eliminar la duplicación evidente si aplicamos el patrón de método de plantilla : abstract public class vacationpolicy { public void accruevacation() { calculatebasevacationhours(); alterforlegalminimums(); applytopayroll(); } 231