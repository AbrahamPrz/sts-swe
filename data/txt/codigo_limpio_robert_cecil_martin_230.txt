image.dispose(); System.gc(); image = newImage; } Al extraer a este reducido nivel, comenzamos a detectar incumplimientos de SRP. Por ello, podríamos cambiar un nuevo método extraído a otra clase. Esto aumenta su visibilidad. Otro miembro del equipo puede ver la necesidad de volver a extraer el nuevo método y usarlo en otro contexto diferente. Esta reutilización mínima puede reducir considerablemente la complejidad del sistema. Saber cómo lograrlo es fundamental para alcanzar la reutilización a gran escala. El patrón  Método de plantilla [73]  es una técnica muy utilizada para eliminar duplicados de nivel superior. Por ejemplo: public class VacationPolicy { public void accrueUSDivisionVacation() { // código para calcular las vacaciones en función de las horas trabajadas //… // código para garantizar que las vacaciones cumplen los mínimos legales //… // código para aplicar vacation al registro payroll //… } public void accrueEUDivisionVacation() { // código para calcular las vacaciones en función de las horas trabajadas //… // código para garantizar que las vacaciones cumplen los mínimos legales //… // código para aplicar vacation al registro payroll //… } } El código entre  accrueUSDivisionVacation  y accrueEuropeanDivisionVacation  es prácticamente idéntico, a excepción del cálculo de mínimos legales. Esa parte del algoritmo cambia en función del tipo de empleado. Podemos eliminar la duplicación evidente si aplicamos el patrón de  Método de plantilla : abstract public class VacationPolicy { public void accrueVacation() { calculateBaseVacationHours(); alterForLegalMinimums(); applyToPayroll(); } 231