recomendación : evite usar más de un método en un objeto compartido . en ocasiones tendrá que usar más de un método en un objeto compartido. en ese caso, hay tres formas de crear código correcto: bloqueo basado en clientes : el cliente debe bloquear al servidor antes de invocar el primer método y asegurarse de que el alcance del bloque incluye el código que invoque el último método. bloqueo basado en servidores : debe crear un método en el servidor que bloquee el servidor, invoque todos los métodos y después anule el bloqueo. el cliente debe invocar el nuevo método. servidor adaptado : cree un intermediario que realice el bloque. es un ejemplo de bloqueo basado en servidores en el que el servidor original no se puede modificar. reducir el tamaño de las secciones sincronizadas la palabra clave synchronized presenta un bloqueo. todas las secciones de código protegidas por el mismo bloque sólo tendrán un proceso que las ejecute en un momento dado. los bloqueos son costosos ya que generan retrasos y añaden sobrecarga. por ello, no conviene colapsar el código con instrucciones synchronized . por otra parte, las secciones críticas [86] deben protegerse, de modo que debemos diseñar nuestro código con el menor número posible de secciones críticas. algunos programadores intentan lograrlo ampliando el tamaño de sus secciones críticas. sin embargo, al ampliar la sincronización más allá de la sección crítica mínima aumentan los problemas y afecta negativamente al rendimiento [87] . recomendación : reduzca al máximo el tamaño de las secciones synchronized . crear código de cierre correcto es complicado 246