wikipageproperty symlinks = properties.set(symbolicpage.property_name); symlinks.set(“sympage”, “pagetwo”); pageone.commit(data); request.setresource(“root”); request.addinput(“type”, “pages”); responder responder = new serializedpageresponder(); simpleresponse response = (simpleresponse) responder.makeresponse( new fitnessecontext(root), request); string xml = response.getcontent(); assertequals(“text/xml”, response.getcontenttype()); assertsubstring(“<name>pageone</name>”, xml); assertsubstring(“<name>pagetwo</name>”, xml); assertsubstring(“<name>childone</name>”, xml); assertnotsubstring(“sympage”, xml); } public void testgetdataashtml() throws exception { crawler.addpage(root, pathparser.parse(“testpageone”), “test page”); request.setresource(“testpageone”); request.addinput(“type”, “data”); responder responder = new serializedpageresponder(); simpleresponse response = (simpleresponse) responder.makeresponse( new fitnessecontext(root), request); string xml = response.getcontent(); assertequals(“text/xml”, response.getcontenttype()); assertsubstring(“test page”, xml); assertsubstring(“<test”, xml); } fíjese en las invocaciones de pathparser . transforman cadenas en instancias de pagepath usadas por las arañas. esta transformación es totalmente irrelevante para la prueba y únicamente complica su cometido. los detalles circundantes a la creación del respondedor y la obtención y conversión de la respuesta también sobran. también la forma de crear la url de solicitud a partir de un recurso y un argumento (contribuí a crear este código, por lo que tengo todo el derecho a criticarlo). al final, el código no se ha diseñado de forma legible. el lector se ve rodeado de miles de detalles que debe comprender antes de que las pruebas tengan sentido. fíjese ahora en las pruebas mejoradas del listado 9-2. hacen exactamente lo mismo, pero se han refactorizado de forma más clara y 175