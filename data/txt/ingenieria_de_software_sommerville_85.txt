68  Capítulo 3 ■ Desarrollo ágil de software  Un problema general con el desarrollo incremental es que tiende a degradar la estruc- tura del software, de modo que los cambios al software se vuelven cada vez más difíciles de implementar. En esencia, el desarrollo avanza al encontrar soluciones alternativas a los problemas, con el resultado de que el código se duplica con frecuencia, partes del software se reutilizan de forma inadecuada y la estructura global se degrada conforme el código se agrega al sistema. La programación extrema aborda este problema al sugerir que el software debe refac-torizarse continuamente. Esto significa que el equipo de programación busca posibles mejoras al software y las implementa de inmediato. Cuando un miembro del equipo observa un código que puede optimarse, realiza dichas mejoras, aun en situaciones donde no hay necesidad apremiante de ellas. Los ejemplos de refactorización incluyen la reor-ganización de una jerarquía de clases para remover un código duplicado, el ordenamiento y el cambio de nombre de atributos y métodos, y la sustitución de código con llamadas a métodos definidos en la librería de un programa. Los entornos de desarrollo del pro-grama, como Eclipse (Carlson, 2005), incluyen herramientas para refactorizar, lo cual simplifica el proceso de encontrar dependencias entre secciones de código y realizar modificaciones globales al código. Entonces, en principio, el software siempre debe ser de fácil comprensión y cambiar a medida que se implementen nuevas historias. En la práctica, no siempre es el caso. En ocasiones la presión del desarrollo significa que la refactorización se demora, porque se dedica el tiempo a la implementación de una nueva funcionalidad. Algunas característi-cas y cambios nuevos no pueden ajustarse con facilidad al refactorizar el nivel del código y al requerir modificar la arquitectura del sistema. En la práctica, muchas compañías que adoptaron XP no usan todas las prácticas de programación extrema que se mencionan en la figura 3.4. Seleccionan según sus formas específicas de trabajar. Por ejemplo, algunas compañías encuentran útil la programación en pares; otras prefieren usar la programación y las revisiones individuales. Para acomo-dar diferentes niveles de habilidad, algunos programadores no hacen refactorización en partes del sistema que ellos no desarrollan, y pueden usarse requerimientos convenciona-les en vez de historias de usuario. Sin embargo, la mayoría de las compañías que adoptan una variante XP usan liberaciones pequeñas, desarrollo de primera prueba e integración continua.Figura 3.6 Ejemplos  de tarjetas de tarea para prescripción de medicamentos. Tarea 1: Cambiar dosis del medicamento prescrito Tarea 2: Selección de formulario Tarea 3: Verificación de dosis La verificación de dosis es una prevención de seguridad para comprobar que el médico no prescribe una dosisriesgosamente pequeña o grande. Al usar el ID del formulario para el nombre genérico del medicamento, busca el formulario y recupera las dosis, máxima y mínima, recomendadas. Verifica la dosis prescrita contra el mínimo y el máximo. Si está fuera de rango, emite un mensaje de error señalando que la dosis es muy alta o muy baja. Si está dentro del rango, habilita el botón “Confirmar”. M03_SOMMERVILLE_INGENIERIA_1ED_SE_056-081.indd   68M03_SOMMERVILLE_INGENIERIA_1ED_SE_056-081.indd   68 3/18/11   4:46:25 PM3/18/11   4:46:25 PM