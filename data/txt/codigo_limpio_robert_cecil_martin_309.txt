public class ArgsTest extends TestCase { public void testCreateWithNoSchemaOrArguments() throws Exception { Args args = new Args(“”, new String[0]); assertEquals(0, args.cardinality()); } public void testWithNoSchemaButWithOneArgument() throws Exception { try { new Args(“”, new String[]{“-x”}); fail(); } catch (ArgsException e) { assertEquals(ArgsException.ErrorCode.UNEXPECTED_ARGUMENT, e.getErrorCode()); assertEquals(‘x’, e.getErrorArgumentId()); } } public void testWithNoSchemaButWithMultipleArguments() throws Exception { try { new Args(“”, new String[]{“-x”, “-y”}); fail(); } catch (ArgsException e) { assertEquals(ArgsException.ErrorCode.UNEXPECTED_ARGUMENT, e.getErrorCode()); assertEquals(‘x’, e.getErrorArgumentId()); } } public void testNonLetterSchema() throws Exception { try { new Args(“*”, new String[]{}); fail(“Args constructor should have thrown exception”); } catch (ArgsException e) { assertEquals(ArgsException.ErrorCode.INVALID_ARGUMENT_NAME, e.getErrorCode()); assertEquals(‘*’, e.getErrorArgumentId()); } } public void testInvalidArgumentFormat() throws Exception { try { new Args(“f~”, new String[]{}); fail(“Args constructor should have throws exception”); } catch (ArgsException e) { assertEquals(ArgsException.ErrorCode.INVALID_FORMAT, e.getErrorCode()); assertEquals(‘f’, e.getErrorArgumentId()); } } public void testSimpleBooleanPresent() throws Exception { Args args = new Args(“x”, new String []{“-x”}); assertEquals(1, args.cardinality()); assertEquals(true, args.getBoolean(‘x’)); 310