public class argstest extends testcase { public void testcreatewithnoschemaorarguments() throws exception { args args = new args(“”, new string[0]); assertequals(0, args.cardinality()); } public void testwithnoschemabutwithoneargument() throws exception { try { new args(“”, new string[]{“-x”}); fail(); } catch (argsexception e) { assertequals(argsexception.errorcode.unexpected_argument, e.geterrorcode()); assertequals(‘x’, e.geterrorargumentid()); } } public void testwithnoschemabutwithmultiplearguments() throws exception { try { new args(“”, new string[]{“-x”, “-y”}); fail(); } catch (argsexception e) { assertequals(argsexception.errorcode.unexpected_argument, e.geterrorcode()); assertequals(‘x’, e.geterrorargumentid()); } } public void testnonletterschema() throws exception { try { new args(“*”, new string[]{}); fail(“args constructor should have thrown exception”); } catch (argsexception e) { assertequals(argsexception.errorcode.invalid_argument_name, e.geterrorcode()); assertequals(‘*’, e.geterrorargumentid()); } } public void testinvalidargumentformat() throws exception { try { new args(“f~”, new string[]{}); fail(“args constructor should have throws exception”); } catch (argsexception e) { assertequals(argsexception.errorcode.invalid_format, e.geterrorcode()); assertequals(‘f’, e.geterrorargumentid()); } } public void testsimplebooleanpresent() throws exception { args args = new args(“x”, new string []{“-x”}); assertequals(1, args.cardinality()); assertequals(true, args.getboolean(‘x’)); 310