20.1 ■ diseño de sistemas embebidos 543 en etapas relativamente tempranas del proceso de diseño, para dar un indicio de la cantidad de procesamiento requerido y del tiempo necesario para completar dicho procesamiento. esto es especialmente importante para tareas de cómputo intenso, como el procesamiento de señales. 6. diseño de datos se especifica la información que intercambian los procesos y eventos que coordinan el intercambio de información, y se diseñan las estructuras de datos para administrar este intercambio de información. varios procesos concurren-tes pueden compartir estas estructuras de datos. 7. planeación del proceso se diseña un sistema de planeación que garantice que los procesos iniciarán a tiempo para cumplir sus plazos. el orden de dichas actividades en el proceso de diseño de software de tiempo real depende del tipo de sistema a desarrollar, así como de sus requerimientos de proceso y plataforma. en algunos casos se podrá seguir un enfoque bastante abstracto, que comience con los estímulos y el procesamiento asociado, y decidir al final del proceso sobre las plataformas de hardware y de ejecución. en otros casos, la elección del hard-ware y del sistema operativo se efectúa antes de comenzar el diseño del software. ante tal situación, se debe diseñar el software para considerar las restricciones impuestas por las capacidades del hardware. los procesos en un sistema de tiempo real deben coordinarse y compartir informa-ción. los mecanismos de coordinación de proceso garantizan la exclusión mutua para los recursos compartidos. cuando un proceso modifica un recurso compartido, otros procesos no podrán cambiar dicho recurso. los mecanismos para probar la exclusión mutua incluyen semáforos (dijkstra, 1968), monitores (hoare, 1974) y regiones críti-cas (brinch-hansen, 1973). estos mecanismos de sincronización de proceso se descri-ben en la mayoría de los textos acerca de sistemas operativos (silberschatz et al., 2008; tanenbaum, 2007). al diseñar el intercambio de información entre procesos, se debe considerar el hecho de que tales procesos pueden ejecutarse a diferentes velocidades. un proceso genera información; el otro proceso consume esa información. si el productor se ejecuta más rápido que el consumidor, nueva información podría sobrescribir un ítem de información leído previamente antes de que el proceso consumidor lea la información original. si el proceso consumidor se ejecuta más rápido que el proceso productor, el mismo ítem podría leerse dos veces. para solucionar este problema, se debe implementar intercambio de información mediante un buffer compartido y usar mecanismos de exclusión mutua para controlar el acceso a ese buffer. esto significa que la información no puede sobrescribirse antes de leerse y que la información no debe leerse dos veces. la figura 20.4 ilustra la noción de buffer compartido. por lo general, esto se implementa como una cola circular, de manera que la falta de concordancia de velocidades entre los procesos productor y consumidor pueda acomodarse sin tener que demorar la ejecución del proceso. el proceso productor siempre ingresa datos en la ubicación del buffer al final de la cola (representada como v10 en la figura 20.4). el proceso consumidor recupera en todo momento información del inicio de la cola (representada como v1 en la figura 20.4). después de que el proceso consumidor recupera la información, el inicio de la cola se ajusta para apuntar al siguiente ítem (v2). luego de que el proceso productor agrega información, el final de la cola se ajusta para apuntar al siguiente espacio (slot) libre en la cola. m20_sommerville_ingenieria_1ed_se_537-564.indd  543m20_sommerville_ingenieria_1ed_se_537-564.indd  543 3/18/11  5:05:49 pm3/18/11  5:05:49 pm