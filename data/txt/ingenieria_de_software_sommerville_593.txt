576  Capítulo 21 ■ Ingeniería de software orientada a aspectos  21. 3 Ingeniería de software con aspectos Los aspectos se introdujeron originalmente con un lenguaje de programación de secuen- cias, pero, como se estudió, la noción de competencias es una que realmente proviene de los requerimientos del sistema. Por lo tanto, tiene sentido adoptar un enfoque orientado a aspectos en todas las etapas del proceso de desarrollo del sistema. En las primeras etapas de la ingeniería de software, adoptar un enfoque orientado a aspectos significa usar la noción de separación de competencias como base para considerar los requerimientos y el diseño del sistema. Identificar y modelar las competencias debe ser parte de la ingeniería de requerimientos y de diseño. Los lenguajes de programación orientados a aspectos, pues, ofrecen el soporte tecnológico para mantener la separación de las competencias en su implementación del sistema. Cuando se diseña un sistema, Jacobson y Ng (2004) sugieren que debe considerarse que el sistema soporte diferentes competencias de las partes interesadas como un sistema central más extensiones. Esto se ilustra en la figura 21.7, donde se usan paquetes UML para representar tanto el núcleo como las extensiones. El sistema central es un conjunto de funciones del sistema que implementan el propósito esencial del sistema. Por consi-guiente, si el propósito de un sistema particular es mantener información de los pacientes en un hospital, el sistema central en tal caso ofrece un medio para crear, editar, gestionar y acceder a una base de datos de registros de pacientes. Las extensiones del sistema central reflejan competencias adicionales de las partes interesadas, que deben integrarse con el sistema central. Por ejemplo, es importante que un sistema de información médica mantenga la confidencialidad de la información de los pacientes, de manera que una extensión podría ocuparse del control del acceso, otra de la encriptación, etcétera. Existen algunos tipos diferentes de extensiones que se derivan de los distintos tipos de competencias que se estudiaron en la sección 21.1. 1. Extensiones funcionales secundarias Agregan capacidades adicionales a la funcio- nalidad que ofrece el sistema central. En este caso, con el ejemplo del MHC-PMS, la producción de informes sobre los medicamentos prescritos en el mes anterior sería una extensión funcional secundaria para un sistema de información de pacientes. 2. Extensiones de política Agregan capacidades funcionales para soportar políticas de la organización. Las extensiones que adicionan características de seguridad son ejemplos de extensiones de política. 3. Extensiones QoS Agregan capacidades funcionales para ayudar a alcanzar los requerimientos de calidad del servicio que se especificaron para el sistema. Por ejemplo, una extensión podría implementar una caché para reducir el número de accesos a la base de datos o automatizar los respaldos para recuperación en caso de una falla del sistema. 4. Extensiones de infraestructura Estas extensiones agregan capacidades funcionales para soportar la implementación de un sistema en alguna plataforma de implemen-tación específica. Por ejemplo, en un sistema de información de pacientes, pueden usarse extensiones de infraestructura para implementar la interfaz al sistema de ges-tión de base de datos subyacente. Pueden hacerse cambios a esta interfaz modifi-cando las extensiones de infraestructura asociadas. M21_SOMMERVILLE_INGENIERIA_1ED_SE_565-590.indd   576M21_SOMMERVILLE_INGENIERIA_1ED_SE_565-590.indd   576 3/18/11   5:38:58 PM3/18/11   5:38:58 PM