268 parte dos modelado tarse primero en un nivel de generalización elevado. después de que con el ratón el usuario manifieste interés, deben darse más detalles. un ejemplo, común para muchas aplicaciones de procesamiento de textos, es la función de subrayar. la función en sí es una de varias en el menú estilo del texto . no obstante, no se enlista cada una de las herramientas para subrayar. el usuario debe hacer clic en la opción de subrayar; después se presentan todas las opciones para esta función (una raya, doble raya, línea punteada, etcétera). la escena: cubículo de vinod, cuando comienza el diseño de la interfaz de usuario. participantes: vinod y jamie, miembros del equipo de ingeniería de software de casasegura. la conversación:jamie: he estado pensando en la interfaz de la función de vigilan- cia. vinod (sonríe): es bueno pensar.jamie: creo que tal vez podamos simplificar algunas cosas.vinod: ¿qué quieres decir?jamie: bueno, qué tal si eliminamos el plano de la casa. es bueno, pero va a requerir mucho esfuerzo de desarrollo. en vez de eso, puede pedirse al usuario que especifique la cámara que quiere ver y que luego despliegue el video en una ventana. vinod: ¿cómo recordaría el propietario cuántas cámaras hay y dónde están? jamie (algo irritado): él es el propietario; debe saberlo.vinod: ¿y si no es así?jamie: debería.vinod: eso no es lo que estamos discutiendo… ¿qué pasa si lo olvida? jamie: bueno, podríamos darle una lista de cámaras y sus ubica- ciones. vinod: es posible, pero, ¿por qué debería pedir una lista?jamie: bueno, damos la lista la pida o no.vinod: eso está mejor. al menos no tendrá que recordar cosas que le podemos dar. jamie (piensa unos instantes): pero, ¿te gusta o no el plano de la casa? vinod: mmm.jamie: ¿cuál piensas que le agrade más a mercadotecnia?vinod: bromeas, ¿verdad?jamie: no.vinod: mmm… el plano… adoran las características bonitas de los productos… no les importa cuál es más fácil de elaborar. jamie (suspira): bien, quizá hagamos ambos prototipos.vinod: buena idea… así dejamos que el cliente decida.casasegura violación de la regla dorada de la interfaz de usuario 11.1.3 hacer consistente la interfaz la interfaz debe presentar y obtener información en forma consistente. esto implica: 1) que toda la información se organice de acuerdo con reglas de diseño que se respeten en todas las panta-llas desplegadas, 2) que los mecanismos de entrada se limiten a un conjunto pequeño usado en forma consistente en toda la aplicación, y 3) que los mecanismos para pasar de una tarea a otra se definan e implementen de modo consistente. mandel [man97] define varios principios de diseño que ayudan a que la interfaz tenga consistencia: permita que el usuario coloque la tarea en curso en un contexto significativo. muchas interfaces implementan capas complejas de interacciones con decenas de imágenes en la pan- talla. es importante dar indicadores (títulos en las ventanas, iconos gráficos, código de colores consistente , etc.) que permitan al usuario conocer el contexto del trabajo en curso. además, debe poder determinar de dónde viene y qué alternativas hay para hacer la transición a una nueva tarea. mantener la consistencia en toda la familia de aplicaciones. todas las aplicaciones (o productos) que hay en un grupo deben implementar las mismas reglas de diseño a fin de que se mantenga la consistencia en toda la interacción.cita: “las cosas que parezcan dife- rentes deben actuar en forma diferente. las cosas que parez-can iguales deben actuar igual.” larry marine 11pressman(265-294).indd  26811pressman(265-294).indd  268 14/1/10  16:13:4414/1/10  16:13:44