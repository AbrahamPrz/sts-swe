17.2 ■ Procesos CBSE  467 requerimientos. En consecuencia, se debe decidir cuáles composiciones ofrecen la mejor  cobertura de los requerimientos. Una vez seleccionados los componentes para su posible inclusión en un sistema, se deben validar para comprobar que se comportan como se espera. La extensión de la vali-dación requerida depende de la fuente de los componentes. Si usted usa un componente que haya desarrollado una fuente conocida y confiable, puede decidir que no es necesaria la prueba de componentes. Usted simplemente analiza los componentes cuando se inte-gran con otros. Por otra parte, si utiliza un componente de otras fuentes desconocidas, siempre deberá comprobar y probar dicho componente antes de incluirlo en su sistema. La validación de componentes implica desarrollar un conjunto de casos de prueba para un componente (o, posiblemente, extender los casos de prueba suministrados con dicho componente) y desarrollar un conjunto de pruebas para ejecutar pruebas de componente. El principal problema con la validación de componentes es que la especificación de compo-nentes tal vez no esté suficientemente detallada para permitirle desarrollar un conjunto com-pleto de pruebas de componentes. Por lo general, los componentes se especifican de manera informal, y su única documentación formal es la de su especificación de interfaz. Ésta quizá no incluya suficiente información para desarrollar un conjunto completo de pruebas que lo convencerían de que la interfaz anunciada del componente es la que requiere. Además de probar que un componente para reutilización logra lo que se requiere, es posible que se tenga que verificar también que el componente no incluya algún código o una funcionalidad maliciosos e innecesarios. Los desarrolladores profesionales pocas veces usan componentes de fuentes no confiables, en especial si esas fuentes no proporcio-nan código fuente. Por lo tanto, el problema de código malicioso no surge habitualmente. Sin embargo, los componentes con frecuencia pueden contener funcionalidad innecesaria y se debe comprobar que esta funcionalidad no interfiera con el uso del componente. El problema con la funcionalidad innecesaria es que puede activarse por el componente en sí. Esto podría volver lento al componente, hacer que produzca resultados inesperados o, en algunos casos, provocar fallas graves al sistema. La figura 17.9 resume una situación en la que la funcionalidad innecesaria en un sistema de reutilización causó una falla catas-trófica del software.La falla del lanzador Ariane 5 Mientras se desarrollaba el cohete espacial Ariane 5, los diseñadores decidieron reutilizar el software de  referencia inercial que se desempeñó con éxito en el Ariane 4. El software de referencia inercial mantiene la estabilidad del cohete. Decidieron reutilizarlo sin cambios (como se haría con los componentes), aun cuando incluía funcionalidad adicional que no se requería en el Ariane 5. En el primer lanzamiento del Ariane 5 falló el software de navegación inercial y no pudo controlarse el cohete. Los controladores en tierra instruyeron al lanzador a autodestruirse; así, el cohete y su carga fueron destruidos. La causa del problema fue una excepción no considerada cuando una conversión de un número de punto fijo a entero dio por resultado un desbordamiento numérico. Esto hizo que el sistema en tiempo de ejecución desactivara el sistema de referencia inercial, de manera que no pudo mantenerse la estabilidad del lanzador. La falla nunca ocurrió en el Ariane 4 porque tenía motores menos poderosos, y el valor que se convirtió no podía ser suficientemente grande para que la conversión se desbordara. La falla ocurrió en un código que no se requería en el Ariane 5. Las pruebas de validación para el software de reutilización se basaron en los requerimientos del Ariane 5. Puesto que no había requerimientos para la función que falló, no se desarrollaron pruebas. En consecuencia, el problema con el software nunca se descubrió durante las pruebas de simulación del lanzamiento. Figura 17.9 Ejemplo  de falla de validación con software reutilizado M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   467M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   467 3/18/11   5:03:05 PM3/18/11   5:03:05 PM