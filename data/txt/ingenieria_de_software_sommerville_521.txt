504 capítulo 18 ■ ingeniería de software distribuido la figura 18.16 ilustra esta situación. este diagrama muestra cinco usuarios del servicio de aplicación, quienes trabajan para tres clientes diferentes del proveedor del servicio. los usuarios interactúan con los servicios mediante un perfil de cliente que define la configura-ción del servicio para su empleador. la multitenencia es una situación en la que muchos usuarios diferentes acceden al mismo sistema y la arquitectura del sistema se define para permitir que el hecho de com-partir los recursos del sistema sea eficiente. sin embargo, debe parecer a cada usuario que él tiene el uso exclusivo del sistema. la multitenencia implica diseñar el sistema de modo que exista una separación absoluta entre la funcionalidad y los datos del sis-tema. por lo tanto, se debe diseñar el sistema de manera que todas las operaciones sean sin estados. los datos deben proporcionarse por parte del cliente o estar disponibles en un sistema de almacenamiento o base de datos al que pueda accederse desde cualquier instancia del sistema. las bases de datos relacionales no son ideales para proporcionar multitenencia, y los grandes proveedores de servicio, tales como google, implementaron bases de datos más simples para datos de usuarios. un problema particular en los sistemas multitenencia es la gestión de datos. la forma más sencilla de proporcionar gestión de datos es que cada cliente tenga su propia base de datos, la cual pueden usar y configurar como desee. sin embargo, esto requiere que el proveedor del servicio conserve numerosas instancias de base de datos diferentes (una por cliente) y las ponga a disposición de la demanda. esto es ineficiente en términos de capacidad de servidor y aumenta el costo global del servicio. como alternativa, el proveedor del servicio puede usar una sola base de datos en la que diferentes usuarios estén prácticamente aislados dentro de dicha base de datos. esto se ilustra en la figura 18.17, donde se observa que las entradas de la base de datos tienen tam-bién un “identificador de tenencia”, que vincula dichas entradas a usuarios específicos. al usar vistas de base de datos, es posible extraer las entradas para cada cliente del servicio y así presentar a los usuarios de dicho cliente una base de datos personal virtual. esto puede extenderse para cubrir las necesidades específicas del cliente usando las caracterís-ticas de configuración discutidas anteriormente. la escalabilidad es la capacidad del sistema de hacer frente a un número creciente de usuarios sin reducir la qos global que se entrega a cualquier usuario. por lo gene-ral, cuando se considera la escalabilidad en el contexto de saas, se toma en cuenta la “ampliación”, en lugar de la “expansión”. recuerde que “ampliación” significa agregar servidores adicionales para así incrementar el número de transacciones que pueden pro-cesarse en paralelo. la escalabilidad es un tema complejo que aquí no puede tratarse con detalle, pero algunos lineamientos generales para implementar software escalable son: 1. desarrolle aplicaciones en las que cada componente se implemente como un simple servicio sin estado que pueda ejecutarse en cualquier servidor. por consiguiente, tenencia clave nombre dirección 234 c100 xyz corp 43, anystreet, sometown 234 c110 bigcorp 2, main st, motown435 x234 j. bowie  56, mill st, starville592 pp37 r. burns alloway, ayrshire figura 18.17 base de datos multitenencia m18_sommerville_ingenieria_1ed_se_479-507.indd  504m18_sommerville_ingenieria_1ed_se_479-507.indd  504 3/18/11  5:03:56 pm3/18/11  5:03:56 pm