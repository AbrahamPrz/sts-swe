siente la tentación de devolver null desde un método, pruebe a generar una excepción o a devolver un objeto de caso especial. si invoca un método que devuelva null desde una api de terceros, envuélvalo en un método que genere una excepción o devuelva un objeto de caso especial. en muchos casos, los objetos de caso especial son un remedio sencillo. imagine que tiene el siguiente código: list<employee> employees = getemployees(); if (employees != null) { for(employee e : employees) { totalpay += e.getpay(); } } ahora, getemployees puede devolver null , ¿pero es necesario? si cambiamos getemployee para que devuelva una lista vacía, podremos limpiar el código: list<employee> employees = getemployees(); for(employee e : employees) { totalpay += e.getpay(); } afortunadamente, java dispone de collections.emptylist() y devuelve una lista inmutable predefinida que podemos usar para este cometido: public list<employee> getemployees() { if (… there are no employees …) return collections.emptylist(); } si usa este tipo de código, minimizará la presencia de nullpointerexception y su código será más limpio. no pasar null devolver null desde métodos es incorrecto, pero es peor pasar null a métodos. a menos que trabaje con una api que espere que pase null , debe evitarlo siempre que sea posible. veamos otro ejemplo, un sencillo método que calcula una métrica para dos puntos: public class metricscalculator 156