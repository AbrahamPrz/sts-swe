siente la tentación de devolver  null  desde un método, pruebe a generar una excepción o a devolver un objeto de caso especial. Si invoca un método que devuelva  null  desde una API de terceros, envuélvalo en un método que genere una excepción o devuelva un objeto de caso especial. En muchos casos, los objetos de caso especial son un remedio sencillo. Imagine que tiene el siguiente código: List<Employee> employees = getEmployees(); if (employees != null) { for(Employee e : employees) { totalPay += e.getPay(); } } Ahora,  getEmployees  puede devolver  null , ¿pero es necesario? Si cambiamos  getEmployee  para que devuelva una lista vacía, podremos limpiar el código: List<Employee> employees = getEmployees(); for(Employee e : employees) { totalPay += e.getPay(); } Afortunadamente, Java dispone de  Collections.emptyList()  y devuelve una lista inmutable predefinida que podemos usar para este cometido: public List<Employee> getEmployees() { if (… there are no employees …) return Collections.emptyList(); } Si usa este tipo de código, minimizará la presencia de NullPointerException  y su código será más limpio. No pasar Null Devolver  null  desde métodos es incorrecto, pero es peor pasar  null  a métodos. A menos que trabaje con una API que espere que pase  null , debe evitarlo siempre que sea posible. Veamos otro ejemplo, un sencillo método que calcula una métrica para dos puntos: public class MetricsCalculator 156