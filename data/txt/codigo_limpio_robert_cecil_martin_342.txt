month(int index) { this.index = index; } public static month make(int monthindex) { for (month m : month.values()) { if (m.index == monthindex) return m; } throw new illegalargumentexception(“invalid month index ” + monthindex); } public final int index; } al cambiar monthconstants por esta enumeración se modifica la clase daydate y todos sus usuarios. tardé una hora en realizar todos los cambios. sin embargo, las funciones que antes aceptaban un valor int para el mes, ahora aceptan un enumerador month . esto significa que podemos deshacernos del método isvalidmonthcode (línea 326) y de la comprobación de errores del código de los meses como en monthcodetoquarter (línea 356) [g5]. tras ello, en la línea 91, tenemos serialversionuid . esta variable se usa para controlar el señalizador. si la cambiamos, con lo que todos los elementos daydate escritos con una versión antigua del software serán ilegibles y se generará invalidclassexception . si no declara la variable serialversionuid , el compilador genera una automáticamente y será diferente cada vez que modifique el módulo. ya sé que todos los documentos recomiendan el control manual de esta variable, pero creo que el control automático de la señalización es más seguro [g4]. después de todo, prefiero depurar una invalidclassexception que el extraño comportamiento que se produciría si me olvido de cambiar serialversionuid . por ello, eliminaré la variable, al menos por ahora [97] . creo que el comentario de la línea 93 es redundante. los comentarios redundantes sólo sirven para acumular mentiras y desinformación [c2]. por ello los eliminaré. los comentarios de las líneas 97 y 100 hablan sobre números de serie, que ya hemos mencionado antes [c1]. las variables que describen son la primera y última fecha posible que daydate puede describir. podríamos hacer que fuera más claro [n1]. 343