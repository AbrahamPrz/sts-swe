Month(int index) { this.index = index; } public static Month make(int monthIndex) { for (Month m : Month.values()) { if (m.index == monthIndex) return m; } throw new IllegalArgumentException(“Invalid month index ” + monthIndex); } public final int index; } Al cambiar  MonthConstants  por esta enumeración se modifica la clase DayDate  y todos sus usuarios. Tardé una hora en realizar todos los cambios. Sin embargo, las funciones que antes aceptaban un valor  int  para el mes, ahora aceptan un enumerador  Month . Esto significa que podemos deshacernos del método  isValidMonthCode  (línea 326) y de la comprobación de errores del código de los meses como en  monthCodeToQuarter  (línea 356) [G5]. Tras ello, en la línea 91, tenemos  serialVersionUID . Esta variable se usa para controlar el señalizador. Si la cambiamos, con lo que todos los elementos DayDate  escritos con una versión antigua del  software  serán ilegibles y se generará  InvalidClassException . Si no declara la variable serialVersionUID , el compilador genera una automáticamente y será diferente cada vez que modifique el módulo. Ya sé que todos los documentos recomiendan el control manual de esta variable, pero creo que el control automático de la señalización es más seguro [G4]. Después de todo, prefiero depurar una  InvalidClassException  que el extraño comportamiento que se produciría si me olvido de cambiar  serialVersionUID . Por ello, eliminaré la variable, al menos por ahora [97] . Creo que el comentario de la línea 93 es redundante. Los comentarios redundantes sólo sirven para acumular mentiras y desinformación [C2]. Por ello los eliminaré. Los comentarios de las líneas 97 y 100 hablan sobre números de serie, que ya hemos mencionado antes [C1]. Las variables que describen son la primera y última fecha posible que DayDate puede describir. Podríamos hacer que fuera más claro [N1]. 343