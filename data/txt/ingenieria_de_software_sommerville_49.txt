32  Capítulo 2 ■ Procesos de software Ingeniería de software de cuarto limpio Un ejemplo del proceso de desarrollo formal, diseñado originalmente por IBM, es el proceso de cuarto limpio  (cleanroom). En el proceso de cuarto limpio, cada incremento de software se especifica formalmente y tal especificación se transforma en una implementación. La exactitud del software se demuestra mediante un enfoque formal. No hay prueba de unidad para defectos en el proceso y la prueba del sistema se enfoca en la valoración de la fiabilidad del sistema.  El objetivo del proceso de cuarto limpio es obtener un software con cero defectos, de modo que los sistemas  que se entreguen cuenten con un alto nivel de fiabilidad. http://www.SoftwareEngineering-9.com/Web/Cleanroom/  El modelo en cascada es consecuente con otros modelos del proceso de ingeniería y  en cada fase se produce documentación. Esto hace que el proceso sea visible, de modo que los administradores monitoricen el progreso contra el plan de desarrollo. Su principal problema es la partición inflexible del proyecto en distintas etapas. Tienen que estable-cerse compromisos en una etapa temprana del proceso, lo que dificulta responder a los requerimientos cambiantes del cliente. En principio, el modelo en cascada sólo debe usarse cuando los requerimientos se entiendan bien y sea improbable el cambio radical durante el desarrollo del sistema. Sin embargo, el modelo en cascada refleja el tipo de proceso utilizado en otros proyectos de ingeniería. Como es más sencillo emplear un modelo de gestión común durante todo el pro-yecto, aún son de uso común los procesos de software basados en el modelo en cascada. Una variación importante del modelo en cascada es el desarrollo de sistemas forma-les, donde se crea un modelo matemático para una especificación del sistema. Después se corrige este modelo, mediante transformaciones matemáticas que preservan su consis-tencia en un código ejecutable. Con base en la suposición de que son correctas sus trans-formaciones matemáticas, se puede aseverar, por lo tanto, que un programa generado de esta forma es consecuente con su especificación. Los procesos formales de desarrollo, como el que se basa en el método B (Schneider, 2001; Wordsworth, 1996) son muy adecuados para el desarrollo de sistemas que cuenten con rigurosos requerimientos de seguridad, fiabilidad o protección. El enfoque formal simplifica la producción de un caso de protección o seguridad. Esto demuestra a los clientes o reguladores que el sistema en realidad cumple sus requerimientos de protec-ción o seguridad. Los procesos basados en transformaciones formales se usan por lo general sólo en el desarrollo de sistemas críticos para protección o seguridad. Requieren experiencia espe-cializada. Para la mayoría de los sistemas, este proceso no ofrece costo/beneficio signifi-cativos sobre otros enfoques en el desarrollo de sistemas.  2.1.2 Desarrollo incremental El desarrollo incremental se basa en la idea de diseñar una implementación inicial, expo-ner ésta al comentario del usuario, y luego desarrollarla en sus diversas versiones hasta producir un sistema adecuado (figura 2.2). Las actividades de especificación, desarrollo  M02_SOMMERVILLE_INGENIERIA_1ED_SE_027-055.indd   32M02_SOMMERVILLE_INGENIERIA_1ED_SE_027-055.indd   32 3/18/11   4:45:30 PM3/18/11   4:45:30 PM