412 parte tres administración de la calidad 18.1 f undamentos de las pruebas del software la meta de probar es encontrar errores, y una buena prueba es aquella que tiene una alta pro- babilidad de encontrar uno. por tanto, un sistema basado en computadora o un producto debe diseñarse e implementarse teniendo en mente la “comprobabilidad”. al mismo tiempo, las prue-bas en sí mismas deben mostrar un conjunto de características que logren la meta de encontrar la mayor cantidad de errores con el mínimo esfuerzo. comprobabilidad. james bach 1 proporciona la siguiente definición de comprobabilidad: “la comprobabilidad del software significa simplemente saber con cuánta facilidad puede probarse [un programa de cómputo].” las siguientes características conducen a software comprobable. operatividad. “mientras mejor funcione, más eficientemente puede probarse.” si un sistema se diseña e implementa teniendo como objetivo la calidad, relativamente pocos errores blo- quearán la ejecución de las pruebas, lo que permitirá avanzar en ellas sin interrupciones. observabilidad. “lo que ve es lo que prueba.” las entradas proporcionadas como parte de las pruebas producen distintas salidas. los estados del sistema y las variables son visibles o consultables durante la ejecución. la salida incorrecta se identifica con facilidad. los errores internos se detectan y se reportan de manera automática. el código fuente es accesible. controlabilidad. “mientras mejor pueda controlar el software, más podrá automatizar y opti- mizar las pruebas.” todas las salidas posibles pueden generarse a través de alguna combina-ción de entradas, y los formatos de entrada/salida (e/s) son consistentes y estructurados. todo código es ejecutable a través de alguna combinación de entradas. el ingeniero de prue-bas puede controlar directamente los estados del software, del hardware y las variables. las pruebas pueden especificarse, automatizarse y reproducirse convenientemente. descomponibilidad. “al controlar el ámbito de las pruebas, es posible aislar más rápida- mente los problemas y realizar pruebas nuevas y más inteligentes.” el sistema de software se construye a partir de módulos independientes que pueden probarse de manera independiente. simplicidad. “mientras haya menos que probar, más rápidamente se le puede probar.” el programa debe mostrar simplicidad funcional (por ejemplo, el conjunto característico es el mí-nimo necesario para satisfacer los requerimientos); simplicidad estructural (la arquitectura es modular para limitar la propagación de fallos) y simplicidad de código (se adopta un estándar de codificación para facilitar la inspección y el mantenimiento). estabilidad. “mientras menos cambios, menos perturbaciones para probar.” los cambios al software son raros, se controlan cuando ocurren y no invalidan las pruebas existentes. el soft-ware se recupera bien de los fallos. comprensibilidad. “mientras más información se tenga, se probará con más inteligencia.” el diseño arquitectónico y las dependencias entre componentes internos, externos y compartidos son bien comprendidos. la documentación técnica es accesible al instante, está bien organi-zada, es específica, detallada y precisa. los cambios al diseño son comunicados a los exami-nadores. pueden usarse los atributos sugeridos por bach para desarrollar una configuración de software (es decir, programas, datos y documentos) que sean fáciles de probar. características de la prueba. ¿y qué hay acerca de las pruebas en sí? kaner, falk y nguyen [kan93] sugieren los siguientes atributos de una “buena” prueba: 1 los párrafos que siguen se usan con permiso de james bach (copyright 1994) y se adaptaron de material que originalmente apareció en un comentario en el grupo de noticias comp.software-eng.cita: “todo programa hace algo bien, sólo que puede no ser aquello que queremos que haga.” anónimo ¿cuáles son las características de la comprobabilidad?? cita: “los errores son más comunes, más dominantes y más proble-máticos en software que en otras tecnologías.” david parnas 18pressman(411-436).indd  41218pressman(411-436).indd  412 21/1/10  10:58:5321/1/10  10:58:53