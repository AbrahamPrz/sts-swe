196 capítulo 7 ■ diseño e implementación 3. rastreo de problemas, donde se da soporte para que los usuarios reporten bugs y otros problemas, y también para que todos los desarrolladores sepan quién trabaja en dichos problemas y cuándo se corrigen. las herramientas de administración de la configuración de software soportan cada una de las actividades anteriores. dichas herramientas pueden diseñarse para trabajar en conjunto en un sistema de gestión de cambio global, como clearcase (bellagio y milligan, 2005). en los sistemas de administración de configuración integrada, se dise-ñan en conjunto las herramientas de gestión de versiones, integración de sistema y ras-treo del problema. comparten un estilo de interfaz de usuario y se integran a través de un repositorio de código común. alternativamente, pueden usarse herramientas por separado, instaladas en un entorno de desarrollo integrado. la gestión de versiones puede soportarse mediante un sistema de gestión de versiones como subversion (pilato et al., 2008), que puede soportar desarrollo multisitio o multiequipo. el soporte a la integración de sistema podría construirse en el lenguaje o apoyarse en un conjunto de herramientas por separado, como el sistema de construcción gnu. esto incluye lo que quizá sea la herramienta de integración mejor conocida, hecha en unix. el rastreo de bugs o los sistemas de rastreo de conflictos, como bugzilla, se usan para reportar bugs y otros conflictos, así como para seguir la pista sobre si se corrigieron o no. en virtud de su importancia en la ingeniería de software profesional, en el capítulo 25 se analizan con más detenimiento la administración de la configuración y del cambio. 7.3.3 desarrollo huésped-objetivo la mayoría del desarrollo de software se basa en un modelo huésped-objetivo. el software se desarrolla en una computadora (el huésped), aunque opera en una máquina separada (el objetivo). en un sentido más amplio, puede hablarse de una plataforma de desarrollo y una plataforma de ejecución. una plataforma es más que sólo hardware. incluye el sistema operativo instalado más otro software de soporte como un sistema de gestión de base de datos o, para plataformas de desarrollo, un entorno de desarrollo interactivo. en ocasiones, las plataformas de desarrollo y ejecución son iguales, lo que posibilita dise-ñar el software y ponerlo a prueba en la misma máquina. sin embargo, es más común que sean diferentes, de modo que es necesario mover el software desarrollado a la plataforma de ejecución para ponerlo a prueba, u operar un simulador en su máquina de desarrollo. los simuladores se usan con frecuencia al elaborar sistemas embebidos. se simu-lan dispositivos de hardware, tales como sensores, y los eventos en el entorno donde el sistema se podrá en funcionamiento. los simuladores aceleran el proceso de desarrollo para sistemas embebidos, pues cada desarrollador puede contar con su propia plataforma de ejecución, sin tener que descargar el software al hardware objetivo. no obstante, los simuladores son costosos de desarrollar y, por lo tanto, a menudo sólo se encuentran disponibles para las arquitecturas de hardware más conocidas. si el sistema objetivo tiene instalado middleware u otro software que necesite usar, en tal caso el sistema se debe poner a prueba utilizando dicho software. tal vez no resulte práctico instalar dicho software en su máquina de desarrollo, incluso si es la misma que la plataforma objetivo, debido a restricciones de licencia. ante tales circunstancias, usted necesita transferir su código desarrollado a la plataforma de ejecución, con la finalidad de poner a prueba el sistema. m07_sommerville_ingenieria_1ed_se_176-204.indd  196m07_sommerville_ingenieria_1ed_se_176-204.indd  196 3/18/11  4:50:14 pm3/18/11  4:50:14 pm