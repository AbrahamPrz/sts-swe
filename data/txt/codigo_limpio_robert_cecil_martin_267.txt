public String errorMessage() throws Exception { switch (errorCode) { case OK: throw new Exception(“TILT: Should not get here.”); case UNEXPECTED_ARGUMENT: return unexpectedArgumentMessage(); case MISSING_STRING: return String.format(“Could not find string parameter for -%c.”, errorArgumentId); case INVALID_INTEGER: return String.format(“Argument - %c expects an integer but was ‘%s’.”, errorArgumentId, errorParameter); case MISSING_INTEGER: return String.format(“Could not find integer parameter for -%c.”, errorArgumentId); } return “”; } private String unexpectedArgumentMessage() { StringBuffer message = new StringBuffer(“Arguments(s) -”); for (char c : unexpectedArguments) { message.append(c); } message.append(“ unexpected.”); return message.toString(); } private boolean falseIfNull(Boolean b) { return b != null && b; } private int zeroIfNull(Integer i) { return i == null ? 0 : i; } private String blankIfNull(String s) { return s = null ? “” : s; } public String getString(char arg) { return blankIfNull(stringArgs.get(arg)); } public int getInt(char arg) { return zeroIfNull(intArgs.get(arg)); } public boolean getBoolean(char arg) { return falseIfNull(booleanArgs.get(arg)); } public boolean has(char arg) ( 268