capítulo 3 desarrollo ágil 75 viajar ligero. conforme avanza el trabajo de ingeniería de software, conserve sólo aque- llos modelos que agreguen valor a largo plazo y elimine los demás. todo producto del tra- bajo que se conserve debe recibir mantenimiento cuando haya cambios. esto representa una labor que hace lento al equipo. ambler [amb02a] afirma que “cada vez que se decide conservar un modelo, se pierde agilidad en nombre de la conveniencia de tener disponible esa información en forma abstracta para el equipo (y de ese modo mejorar potencialmente la comunicación dentro del equipo, así como con los participantes)”. el contenido es más importante que la representación. el modelado debe transmitir información al público al que se dirige. un modelo con sintaxis perfecta que transmita poco contenido útil no es tan valioso como otro que tenga notación defectuosa, pero que, no obstante, provea contenido de valor para los usuarios. conocer los modelos y herramientas que se utilizan en su creación. entender las fortalezas y debilidades de cada modelo y las herramientas que se emplean para crearlos.adaptación local. el enfoque de modelado debe adaptarse a las necesidades del equipo ágil. un segmento importante de la comunidad de ingeniería de software ha adoptado el lenguaje de unificado de modelado (uml, por sus siglas en inglés) 16 como el método preferido para repre- sentar modelos del análisis y del diseño. el proceso unificado (véase el capítulo 2) fue desarro-llado para proveer una estructura para la aplicación del uml. scott ambler [amb06] desarrolló una versión simplificada del pu que integra su filosofía de modelado ágil. 3.5.8 el proceso unificado ágil (pua) el proceso unificado ágil (pua) adopta una filosofía “en serie para lo grande” e “iterativa para lo pequeño” [amb06] a fin de construir sistemas basados en computadora. al adoptar las activida-des en fase clásicas del pu —concepción, elaboración, construcción y transición—, el pua brinda un revestimiento en serie (por ejemplo, una secuencia lineal de actividades de ingeniería de software) que permite que el equipo visualice el flujo general del proceso de un proyecto de soft-ware. sin embargo, dentro de cada actividad, el equipo repite con objeto de alcanzar la agilidad y entregar tan rápido como sea posible incrementos de software significativos a los usuarios finales. cada iteración del pua aborda las actividades siguientes [amb06]: • modelado. se crean representaciones de uml de los dominios del negocio y el problema. no obstante, para conservar la agilidad, estos modelos deben ser “sólo suficientemente buenos” [amb06] para permitir que el equipo avance. • implementación. los modelos se traducen a código fuente. • pruebas. igual que con la xp, el equipo diseña y ejecuta una serie de pruebas para detectar errores y garantizar que el código fuente cumple sus requerimientos. • despliegue. como en la actividad general del proceso que se estudió en los capítulos 1 y 2, el despliegue en este contexto se centra en la entrega de un incremento de software y en la obtención de retroalimentación de los usuarios finales. • configuración y administración del proyecto. en el contexto del pua, la administración de la configuración (véase el capítulo 22) incluye la administración del cambio y el riesgo, y el control de cualesquiera productos del trabajo persistentes 17 que produzca el equipo. “viajar ligero” es una filosofía apropiada para todo el trabajo de ingeniería de software. construir sólo aquellos modelos que agreguen valor… ni más ni menos.consejo 16 en el apéndice 1 se presenta un método breve para aprender uml. 17 un producto del trabajo persistente es un modelo o documento o caso de prueba producido por el equipo y que se conservará durante un periodo indeterminado. no se eliminará una vez entregado el incremento de software. 03pressman(055-080).indd  7503pressman(055-080).indd  75 14/1/10  13:41:1414/1/10  13:41:14