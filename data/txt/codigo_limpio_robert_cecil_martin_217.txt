bankimpl , y así sucesivamente. el código es abundante y complejo, incluso para este sencillo caso [59] . el uso de una de las bibliotecas de manipulación de bytes es igualmente complicado. el volumen y la complejidad de este código son dos de los inconvenientes de los proxies . dificultan la creación de código limpio. además, los proxies no ofrecen un mecanismo para especificar puntos de ejecución globales del sistema, imprescindibles para una verdadera solución aop [60] . estructuras aop java puras afortunadamente, gran parte del código predefinido de proxy se puede procesar de forma automática mediante herramientas. los proxies se usan internamente en varias estructuras de java como spring aop y jboss aop, para implementar aspectos en java [61] . en spring, se crea la lógica empresarial en forma de pojo, específicos de su dominio. no dependen de estructuras empresariales (ni de otros dominios). por tanto, son conceptualmente más sencillos y más fáciles de probar. su relativa simplicidad garantiza que se implementen correctamente las correspondientes historias y el mantenimiento y evolución del código en historias futuras. la infraestructura necesaria de la aplicación, incluidos aspectos transversales como persistencia, transacciones, seguridad, almacenamiento en caché y recuperación ante fallos, se incorpora por medio de archivos de configuración declarativos o api. en muchos casos, se especifican aspectos de bibliotecas spring o jboss, en los que la estructura controla el uso de proxies de java o bibliotecas de código de bytes de forma transparente al usuario. estas declaraciones controlan el contenedor de inyección de dependencias, que crea instancias de los principales objetos y las conecta bajo demanda. el listado 11-4 muestra un fragmento tipo de un archivo de configuración de spring v2.5, app.xml [62] . 218