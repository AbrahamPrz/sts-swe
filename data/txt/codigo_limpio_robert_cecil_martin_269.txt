valid = parse(); } public boolean isvalid() { return valid; } private boolean parse() { if (schema.length() == 0 && args.length == 0) return true; parseschema(); parsearguments(); return unexpectedarguments.size() == 0; } private boolean parseschema() { for (string element : schema.split(“,”)) { parseschemaelement(element); } return true; } private void parseschemaelement(string element) { if (element.length() == 1) { parsebooleanschemaelement(element); } } private void parsebooleanschemaelement(string element) { char c = element.charat(0); if (character.isletter(c)) { booleanargs.put(c, false); } } private boolean parsearguments() { for (string arg : args) parseargument(arg); return true; } private void parseargument(string arg) { if (arg.startswith(“-”)) parseelement(arg); } private void parseelements(string arg) { for (int i = 1; i < arg.length(); i++) parseelement(arg.charat(i)); } private void parseelement(char argchar) { if (isboolean(argchar)) { numberofarguments++; setbooleanarg(argchar, true); 270