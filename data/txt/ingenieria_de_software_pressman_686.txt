655CAPÍTULO 29MANTENIMIENTO Y REINGENIERÍA CONCEPTOS  CLAVE   análisis de inventarios. . . . . 662 ingeniería hacia adelante . . . 669ingeniería inversa  . . . . . . . . 664  datos . . . . . . . . . . . . . . . . 665 procesamiento  . . . . . . . . . 666 interfaces de usuario . . . . . 667 mantenibilidad  . . . . . . . . . . 657mantenimiento de software . 656reestructuración  . . . . . . . . . 668  código  . . . . . . . . . . . . . . . 668 datos . . . . . . . . . . . . . . . . 668 reestructuración de documentos  . . . . . . . . . . 662 reingeniería de procesos de empresa (RPE) . . . . . . . . 658 reingeniería de software . . . 661soportabilidad. . . . . . . . . . . 657 ¿Qué es? Considere cualquier producto tec- nológico que le haya funcionado bien. Lo usa con regularidad, pero está envejeciendo. Se descompone con frecuencia, se tarda más tiem- po en reparar del que quisiera y ya no representa a la más reciente tecnología. ¿Qué hacer? Durante algún tiempo intenta repararlo, parcharlo, incluso extiende su funciona-lidad. A esto se le llama mantenimiento. Pero éste se vuel-ve cada vez más difícil conforme pasan los años. Llega un momento en el que necesitará reconstruirlo. Creará un producto con funcionalidad agregada, mejor desempeño y confiabilidad, así como mantenibilidad mejorada. A eso se le llama reingeniería. ¿Quién lo hace? En el nivel de la organización, el mante- nimiento lo realiza el personal de apoyo que es parte de la organización de ingeniería de software. La reingenie-ría la realizan especialistas en negocios (con frecuencia compañías consultoras). En el nivel de software, la reinge-niería la realizan ingenieros de software. ¿Por qué es importante?  Al vivir en un mundo que cam- bia rápidamente, las demandas sobre las funciones empre-sariales y la tecnología de la información que las apoyan cambian a un paso que pone enorme presión competitiva sobre toda organización comercial. Por esto, el software debe mantenerse continuamente y, en el momento adecua-do, someterse a reingeniería para sostener el paso.¿Cuáles son los pasos? El mantenimiento corrige los  defectos, adapta el software para satisfacer un entorno cambiante y mejorar la funcionalidad a fin de cubrir las necesidades evolutivas de los clientes. Estratégicamente, la reingeniería de procesos de empresa (RPE) define las metas empresariales, identifica y evalúa los procesos empresariales existentes y crea procesos empresariales re-visados que satisfacen mejor las metas del momento. La reingeniería de software abarca análisis de inventarios, res-tructuración de documentos, ingeniería inversa, reestructu-ración de programas y datos e ingeniería hacia adelante. La intención de dichas actividades es crear versiones de los programas existentes que muestren mayor calidad y mejor mantenibilidad. ¿Cuál es el producto final?  Se producen varios produc- tos operativos de mantenimiento y reingeniería (por ejem-plo, casos de uso, modelos de análisis y diseño, procedi-mientos de prueba). El resultado final es actualización de software. ¿Cómo me aseguro de que lo hice bien? Con el uso  de las mismas prácticas SQA que se aplican en todo pro-ceso de ingeniería de software: revisiones técnicas para valorar los modelos de análisis y diseño; revisiones espe-cializadas para considerar aplicabilidad y compatibilidad empresarial; y aplicación de pruebas para descubrir erro-res en contenido, funcionalidad e interoperabilidad. UNA  MIRADA   RÁPIDASin importar su dominio de aplicación, su tamaño o su complejidad, el software de compu- tadora evolucionará con el tiempo. El cambio impulsa este proceso. Para el software de computadora, el cambio ocurre cuando se corrigen los errores, cuando el software  se adapta a un nuevo entorno, cuando el cliente solicita nuevas características o funciones y cuando la aplicación se somete a reingeniería para ofrecer beneficio en un contexto moderno. Durante los pasados 30 años, Manny Lehman [por ejemplo, Leh97a] y sus colaboradores reali-zaron análisis detallados de software de grado industrial y de sistemas con la intención de de-sarrollar una teoría unificada para evolución del software . Los detalles de este trabajo están más  allá del ámbito de este libro, pero vale la pena destacar las leyes subyacentes derivadas de ella [Leh97b]: Ley de cambio continuo (1974):  El software que se implementó en un contexto de cómputo del  mundo real y que, por tanto, evolucionará con el tiempo (llamados sistemas tipo E) debe adaptarse  continuamente o de otro modo se volverá progresivamente menos satisfactorio. Ley de complejidad creciente (1974):  Conforme un sistema tipo E evoluciona, su complejidad  aumenta, a menos que se haga trabajo para mantenerlo o reducirlo. Ley de autorregulación (1974): El proceso de evolución del sistema tipo E es autorregulable con  medidas de distribución de producto y de proceso cercanas a lo normal. 29Pressman(655-674).indd   65529Pressman(655-674).indd   655 26/1/10   17:32:5826/1/10   17:32:58