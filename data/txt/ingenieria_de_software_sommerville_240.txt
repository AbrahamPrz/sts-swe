8.2 ■ desarrollo dirigido por pruebas 223 quier código en el sistema se ejecuta realmente. el código se prueba a medida que se escribe, de modo que los defectos se descubren con oportunidad en el proceso de desarrollo. 2. pruebas de regresión un conjunto de pruebas se desarrolla incrementalmente conforme se desarrolla un programa. siempre es posible correr pruebas de regresión para demostrar que los cambios al programa no introdujeron nuevos bugs. 3. depuración simplificada cuando falla una prueba, debe ser evidente dónde yace el problema. es preciso comprobar y modificar el código recién escrito. no se requieren herramientas de depuración para localizar el problema. los reportes del uso del desa-rrollo dirigido por pruebas indican que difícilmente alguna vez se necesitará usar un depurador automatizado en el desarrollo dirigido por pruebas (martin, 2007). 4. documentación del sistema las pruebas en sí actúan como una forma de documen-tación que describen lo que debe hacer el código. leer las pruebas suele facilitar la comprensión del código. uno de los beneficios más importantes del desarrollo dirigido por pruebas es que reduce los costos de las pruebas de regresión. estas últimas implican correr los conjun-tos de pruebas ejecutadas exitosamente después de realizar cambios a un sistema. la prueba de regresión verifica que dichos cambios no hayan introducido nuevos bugs en el sistema, y que el nuevo código interactúa como se esperaba con el código existente. las pruebas de regresión son muy costosas y, por lo general, poco prácticas cuando un sistema se prueba manualmente, pues son muy elevados los costos en tiempo y esfuerzo. ante tales situaciones, usted debe ensayar y elegir las pruebas más relevantes para volver a correrlas, y es fácil perder pruebas importantes. sin embargo, las pruebas automatizadas, que son fundamentales para el desarrollo de primera prueba, reducen drásticamente los costos de las pruebas de regresión. las prue-bas existentes pueden volverse a correr de manera más rápida y menos costosa. después de realizar cambios a un sistema en el desarrollo de la primera prueba, todas las prue-bas existentes deben correr con éxito antes de añadir cualquier funcionalidad accesoria. como programador, usted podría estar seguro de que la nueva funcionalidad que agregue no causará ni revelará problemas con el código existente. el desarrollo dirigido por pruebas se usa más en el diseño de software nuevo, donde la funcionalidad se implementa en código nuevo o usa librerías estándar perfectamente pro-badas. si se reutilizan grandes componentes en código o sistemas heredados, entonces se necesita escribir pruebas para dichos sistemas como un todo. el desarrollo dirigido por pruebas también puede ser ineficaz con sistemas multihilo. los diferentes hilos pueden entrelazarse en diferentes momentos y en diversas corridas de pruebas y, por lo tanto, producirán resultados variados. si se usa el desarrollo dirigido por pruebas, se necesitará de un proceso de prueba del sistema para validar el sistema; esto es, comprobar que cumple con los requerimientos de todos los participantes del sistema. las pruebas de sistema también demuestran rendimiento, confiabilidad y evidencian que el sistema no haga aquello que no debe hacer, como producir salidas indeseadas, etcétera. andrea (2007) sugiere cómo pueden extenderse las herramien-tas de prueba para integrar algunos aspectos de las pruebas de sistema con tdd. el desarrollo dirigido por pruebas resulta ser un enfoque exitoso para proyectos de dimensión pequeña y mediana. por lo general, los programadores que adoptan dicho enfo-que están contentos con él y descubren que es una forma más productiva de desarrollar m08_sommerville_ingenieria_1ed_se_205-233.indd  223m08_sommerville_ingenieria_1ed_se_205-233.indd  223 3/18/11  5:40:00 pm3/18/11  5:40:00 pm