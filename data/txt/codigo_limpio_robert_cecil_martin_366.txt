equivocado. aunque hay implementaciones de stack en las que el concepto de amplitud es razonable, otras no pueden conocer su nivel de amplitud. por tanto, la función debería incluirse en una interfaz derivada como boundedstack . pensará que la implementación podría devolver cero si la pila no tuviera límites. el problema es que no existen pilas totalmente sin límites. no se puede evitar outofmemoryexception mediante la comprobación de stack.percentfull() < 50.0. la implementación de esta función para que devuelva 0 sería una mentira. la moraleja es que no puede mentir o escapar de una abstracción mal ubicada. el aislamiento de abstracciones es una de las operaciones más complicadas para los desarrolladores de software y no se puede corregir cuando se realiza de forma incorrecta. g7: clases base que dependen de sus variantes el motivo más habitual para dividir conceptos en clases base y derivadas es para que los conceptos de nivel superior de la clase base sean independientes de los de nivel inferior de las derivadas. por ello, cuando vemos clases base que mencionan los nombres de sus variantes, se intuye un problema. por lo general, las clases base no deben saber nada sobre su derivadas. evidentemente, hay excepciones. en ocasiones, el número de variantes es fijo y la clase base tiene código que elegir entre las variantes. es muy habitual en implementaciones de equipos con estado finito. sin embargo, en ese caso las variantes y la clase base están íntimamente unidas y siempre se implementan en el mismo archivo jar. en el caso general, deben implementarse en archivos independientes. al implementar variantes y clases base en archivos diferentes y garantizar que los archivos de la clase base desconocen el contenido de los archivos de las variantes podemos implementar nuestros sistemas en componentes discretos e independientes. al modificar dichos componentes, se pueden volver a implementar sin necesidad de implementar de nuevo los componentes base. de este modo se reduce significativamente el impacto del 367