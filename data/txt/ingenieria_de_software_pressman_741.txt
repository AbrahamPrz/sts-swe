710 PARTE CINCO  TEMAS AVANZADOS Los lenguajes de modelado específicos de dominio (LMED) representan “la estructura, compor- tamiento y requerimientos de la aplicación dentro de dominios de aplicación particulares” y se  describen con metamodelos que “definen las relaciones entre conceptos en el domino y especi-fican con precisión la semántica y restricciones clave asociadas con dichos conceptos de domi-nio” [Sch06]. La diferencia principal entre un LMED y un lenguaje de modelado de propósito general como UML (apéndice 1) es que el primero se sintoniza con los conceptos de diseño in-herentes en el dominio de aplicación y, por tanto, puede representar relaciones y restricciones entre elementos de diseño en forma eficiente. 31.4.6  Diseño posmoderno En un interesante artículo acerca del diseño de software en la “era posmoderna”, Philippe Kru-chten [Kru05] hace la siguiente observación: La ciencia de la computación no ha logrado la gran narrativa que explique todo, el gran cuadro : no  hemos encontrado las leyes fundamentales del software que jugarían el papel que las leyes fundamen- tales de la física juegan en otras disciplinas de la ingeniería. Todavía vivimos con el resabio amargo de la explosión de burbujas de internet y el día del juicio final Y2K. De modo que, en esta era posmo-derna, donde parece que todo importa un poco, aunque realmente no importa mucho, ¿cuáles son las siguientes direcciones para el diseño de software? Parte de cualquier intento por comprender las tendencias en el diseño del software es establecer  fronteras al diseño. ¿Dónde se detiene la ingeniería de requerimientos y comienza el diseño? ¿Dónde se detiene el diseño y comienza la generación de código? Las respuestas a estas pre-guntas no son sencillas como podrían parecer al principio. Aun cuando el modelo de requeri-mientos deba enfocarse en “qué”, no en “cómo”, todo analista hace un poco de diseño y casi todos los diseñadores hacen un poco de análisis. De igual modo, conforme el diseño de compo-nentes de software se acerca un poco más al detalle algorítmico, un diseñador comienza a re-presentar el componente en un nivel de abstracción que está cerca del código. El diseño posmoderno continuará enfatizando la importancia de la arquitectura del software  (capítulo 9). Un diseñador debe enunciar un conflicto arquitectónico, tomar una decisión que aborde el conflicto y luego definir con claridad las suposiciones, restricciones e implicaciones que la decisión impone sobre el software como un todo. Pero, ¿existe un marco conceptual donde los conflictos pueden describirse y la arquitectura puede definirse? El desarrollo de soft-ware orientado a aspecto (capítulo 2) o el desarrollo de software impulsado por modelo (sección 31.4.4) pueden convertirse en importantes enfoques de diseño en los años por venir, pero toda-vía es muy pronto para decirlo. Puede ser que la innovación en el desarrollo basado en compo-nentes (capítulo 10) pueda conducir a una filosofía de diseño que enfatice el ensamblado de los componentes existentes. Si el pasado es prólogo, es enormemente probable que surjan muchos “nuevos” métodos de diseño, pero pocos remontarán la curva de la promoción excesiva (figura 31.2) mucho más allá del “valle de la desilusión”. 31.4.7  Desarrollo impulsado por pruebas Los requerimientos impulsan el diseño y éste establece un cimiento para construcción. Esta simple realidad en ingeniería del software funciona razonablemente bien y es esencial confor-me se crea una arquitectura de software. Sin embargo, un cambio sutil puede proporcionar be-neficios significativos cuando se consideran el diseño en el nivel de componentes y la construc-ción. En el desarrollo impulsado por pruebas  (DIP), los requerimientos para un componente de soft- ware funcionan como la base para la creación de una serie de casos de prueba que ejerciten la interfaz y que intenten encontrar errores en las estructuras de datos y en la funcionalidad que PUNTO CLAVE “DIP es una tendencia que enfatiza  el diseño de casos de prueba antes de la creación de código fuente”. 31Pressman(695-716).indd   71031Pressman(695-716).indd   710 26/1/10   17:33:4026/1/10   17:33:40