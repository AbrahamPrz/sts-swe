probamos lo siguiente: @test public void testlogaddappender() { logger logger = logger.getlogger(“mylogger”); logger.removeallappenders(); logger.addappender(new consoleappender( new patternlayout(“%p %t %m%n”), consoleappender.system_out)); logger.info(“hello”); } funciona; en la consola aparece un mensaje con la palabra hello . resulta extraño tener que indicarle a consoleappender que escriba en la consola. al eliminar el argumento consoleappender.systemout , vemos que hello sigue impreso. pero al eliminar patternlayout , de nuevo vemos la queja de la falta de un flujo de salida. es un comportamiento muy extraño. si nos fijamos en la documentación, vemos que el constructor consoleappender predeterminado no está configurado, lo que no parece demasiado obvio ni útil. parece más bien un error o una incoherencia de log4j . tras nuevas búsquedas en google, investigaciones y pruebas, conseguimos el listado 8-1. hemos descubierto cómo funciona log4j y hemos codificado esos conocimientos en un grupo de sencillas pruebas de unidad. listado 8-1 logtest.java. public class logtest ( private logger logger; @before public void initialize() { logger = logger.getlogger(“logger”); logger.removeallappenders(); logger.getrootlogger().removeallappenders(); } @test public void basiclogger() { basicconfigurator.configure(); logger.info(“basiclogger”); } 164