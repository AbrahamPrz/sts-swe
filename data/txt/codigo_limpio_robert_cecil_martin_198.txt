admite funciones SQL como instrucciones  update . Cuando la clase  Sql  tenga que admitir una instrucción  update , tendremos que abrirla para realizar modificaciones. El problema de abrir una clase es el riesgo que conlleva. Cualquier modificación puede afectar a otro código de la clase. Debe probarse concienzudamente. Listado 10-9 Clase que debemos abrir para realizar cambios. public class Sql { public Sql(String table, Column[] columns) public String create() public String insert(Object[] fields) public String selectAll() public String findByKey(String keyColumn, String keyValue) public String select(Column column, String pattern) public String select(Criteria criteria) public String preparedInsert() private String columnList(Column[] columns) private String valuesList(Object[] fields, final Column[] columns) private String selectWithCriteria(String criteria) private String placeholderList(Column[] columns) } La clase  Sql  debe cambiar al añadir un nuevo tipo de instrucción. También debe cambiar cuando variemos los detalles de un tipo de instrucción concreto; por ejemplo, si tenemos que modificar la funcionalidad  select  para admitir selecciones secundarias. Estos dos motivos de cambio significan que la clase  Sql  incumple SRP. Podemos detectar este incumplimiento desde un punto de vista organizativo. El método  outline  de  Sql  muestra que hay métodos privados, como  selectWithCriteria , que parecen relacionarse únicamente con instrucciones  select . El comportamiento de métodos privados aplicados a un pequeño subconjunto de una clase puede ser una heurística útil para detectar zonas que mejorar. Sin embargo, la verdadera razón debe ser el cambio del sistema. Si la clase  Sql  se considera totalmente lógica, no debemos preocuparnos por separar las responsabilidades. Si no necesitamos funcionalidad de actualización en el futuro, podemos olvidarnos de  Sql . Pero si tenemos que 199