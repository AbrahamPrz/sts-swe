capítulo 9 ■ referencias 259 coleman, d., ash, d., lowther, b. y oman, p. (1994). “using metrics to evaluate software system maintainability”. ieee computer, 27 (8), 44–49. erlikh, l. (2000). “leveraging legacy system dollars for e-business”. it professional, 2 (3), mayo/ junio 2000, 17–23.fowler, m., beck, k., brant, j., opdyke, w. y roberts, d. (1999). refactoring: improving the design of existing code. boston: addison-wesley.guimaraes, t. (1983). “managing application program maintenance expenditures”. comm. acm, 26 (10), 739–46.hopkins, r. y jenkins, k. (2008). eating the it elephant: moving from greenfield development to brownfield. boston: ibm press. kafura, d. y reddy, g. r. (1987). “the use of software complexity metrics in software maintenance”. ieee trans. on software engineering, se-13 (3), 335–43. kerievsky, j. (2004). refactoring to patterns. boston: addison wesley.kozlov, d., koskinen, j., sakkinen, m. y markkula, j. (2008). “assessing maintainability change over multiple software releases”. j. of software maintenance and evolution, 20 (1), 31–58. krogstie, j., jahr, a. y sjoberg, d. i. k. (2005). “a longitudinal study of development and maintenance in norway: report from the 2003 investigation”. information and software technology, 48 (11), 993–1005. lehman, m. m. (1996). “laws of software evolution revisited”. proc. european workshop on software process technology (ewspt’96), springer-verlag. 108–24. lehman, m. m. y belady, l. (1985). program evolution: processes of software change. london: academic press. lehman, m. m., perry, d. e. y ramil, j. f. (1998). “on evidence supporting the feast hypothesis and the laws of software evolution”. proc. metrics ‘98, bethesda. maryland: ieee computer society press. 84–8. lehman, m. m., ramil, j. f. y sandler, u. (2001). “an approach to modelling long-term growth trends in software systems”. proc. int. conf. on software maintenance, florencia, italia: 219–28. lientz, b. p. y swanson, e. b. (1980). software maintenance management. reading, mass.: addison- wesley. mccabe, t. j. (1976). “a complexity measure”. ieee trans. on software engineering., se-2 (4), 308–20. nosek, j. t. y palvia, p. (1990). “software maintenance management: changes in the last decade”. software maintenance: research and practice, 2 (3), 157–74. opdyke, w. f. y johnson, r. e. (1990). “refactoring: an aid in designing application frameworks and evolving object-oriented systems”. 1990 symposium on object-oriented programming emphasizing practical applications (sooppa ‘90), poughkeepsie, new york. poole, c. y huisman, j. w. (2001). “using extreme programming in a maintenance environment”. ieee software, 18 (6), 42–50. m09_sommerville_ingenieria_1ed_se_234-260.indd  259m09_sommerville_ingenieria_1ed_se_234-260.indd  259 3/18/11  4:52:25 pm3/18/11  4:52:25 pm