390 parte tres administración de la calidad mente mantienen su integridad durante todos los pasos en la ejecución de un algoritmo. todas las rutas independientes a través de la estructura de control se ejercitan para asegurar que todos los estatutos en un módulo se ejecuten al menos una vez. las condiciones de frontera se prue-ban para asegurar que el módulo opera adecuadamente en las fronteras establecidas para limi-tar o restringir el procesamiento. y, finalmente, se ponen a prueba todas las rutas para el manejo de errores. el flujo de datos a través de la interfaz de un componente se prueba antes de iniciar cual- quiera otra prueba. si los datos no entran y salen de manera adecuada, todas las demás pruebas son irrelevantes. además, deben ejercitarse las estructuras de datos locales y averiguarse (si es posible) el impacto local sobre los datos globales durante las pruebas de unidad. la prueba selectiva de las rutas de ejecución es una tarea esencial durante la prueba de uni- dad. los casos de prueba deben diseñarse para descubrir errores debidos a cálculos erróneos, comparaciones incorrectas o flujo de control inadecuado. las pruebas de frontera son una de las tareas de prueba de unidad más importantes. con frecuencia, el software falla en sus fronteras. es decir: con frecuencia los errores ocurren cuando se procesa el enésimo elemento de un arreglo ene-dimensional, cuando se invoca la enésima repetición de un bucle con n pasadas, cuando se encuentra el valor máximo o mínimo permisi- ble. es muy probable que los casos de prueba que ejercitan la estructura de datos, el flujo de control y los valores de datos justo abajo y arriba de máximos y mínimos descubran errores. un buen diseño anticipa las condiciones de error y establece rutas de manejo de errores para enrutar o terminar limpiamente el procesamiento cuando ocurre un error. yourdon [you75] llama a este enfoque antierrores. desafortunadamente, hay una tendencia a incorporar el ma-nejo de errores en el software y luego nunca probarlo. una historia verídica puede servir como ilustración: un sistema de diseño asistido por computadora se desarrolló bajo contrato. en un módulo de proce- samiento de transacción, un bromista colocó el siguiente mensaje de manejo de error después de una serie de pruebas condicionales que invocaban varias ramas de flujo de control: ¡error! no hay forma de que pueda llegar aquí. ¡este “mensaje de error” lo descubrió un cliente durante el entrenamiento para usuarios! entre los potenciales errores que deben ponerse a prueba cuando se evalúa el manejo de erro- res están: 1) la descripción de error ininteligible, 2) el error indicado no corresponde con el error que se encuentra, 3) la condición del error causa la intervención del sistema antes de manejar el casos de pruebamódulo interfaz estructuras de datos localescondiciones de fronterarutas independientesrutas de manejo de errorfigura 17.3 prueba de unidad ¿qué errores se encuentran comúnmente durante las pruebas de unidad?? webref puede encontrar información útil acerca de una gran variedad de artículos y recursos para “prueba ágil” en testing.com/agile 17pressman(383-410).indd  39017pressman(383-410).indd  390 21/1/10  10:59:2121/1/10  10:59:21