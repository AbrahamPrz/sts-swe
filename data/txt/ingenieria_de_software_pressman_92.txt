capítulo 3 desarrollo ágil 61 de software. la organización propia tiene cierto número de beneficios técnicos, pero, lo que es más importante, sirve para mejorar la colaboración y elevar la moral del equipo. en esencia, el equipo sirve como su propio gerente. ken schwaber [sch02] aborda estos as-pectos cuando escribe: “el equipo selecciona cuánto trabajo cree que puede realizar en cada iteración, y se compromete con la labor. nada desmotiva tanto a un equipo como que alguien establezca compromisos por él. nada motiva más a un equipo como aceptar la res-ponsabilidad de cumplir los compromisos que haya hecho él mismo.” 3.4 programación extrema (xp) a fin de ilustrar un proceso ágil con más detalle, daremos un panorama de la programación ex- trema (xp), el enfoque más utilizado del desarrollo de software ágil. aunque las primeras activi-dades con las ideas y los métodos asociados a xp ocurrieron al final de la década de 1980, el trabajo fundamental sobre la materia había sido escrito por kent beck [bec04a]. una variante de xp llamada xp industrial [ixp] se propuso en una época más reciente [ker05]. ixp mejora la xp y tiene como objetivo el proceso ágil para ser usado específicamente en organizaciones grandes. 3.4.1 valores xp beck [bec04a] define un conjunto de cinco valores que establecen el fundamento para todo tra- bajo realizado como parte de xp: comunicación, simplicidad, retroalimentación, valentía y respeto. cada uno de estos valores se usa como un motor para actividades, acciones y tareas específicas de xp. a fin de lograr la comunicación eficaz entre los ingenieros de software y otros participantes (por ejemplo, para establecer las características y funciones requeridas para el software), xp pone el énfasis en la colaboración estrecha pero informal (verbal) entre los clientes y los desarrollado-res, en el establecimiento de metáforas 3 para comunicar conceptos importantes, en la retroali- mentación continua y en evitar la documentación voluminosa como medio de comunicación. para alcanzar la simplicidad, xp restringe a los desarrolladores para que diseñen sólo para las necesidades inmediatas, en lugar de considerar las del futuro. el objetivo es crear un diseño sencillo que se implemente con facilidad en forma de código. si hay que mejorar el diseño, se rediseñará 4 en un momento posterior. la retroalimentación se obtiene de tres fuentes: el software implementado, el cliente y otros miembros del equipo de software. al diseñar e implementar una estrategia de pruebas eficaz (capítulos 17 a 20), el software (por medio de los resultados de las pruebas) da retroalimentación al equipo ágil. xp usa la prueba unitaria como su táctica principal de pruebas. a medida que se desarrolla cada clase, el equipo implementa una prueba unitaria para ejecutar cada operación de acuerdo con su funcionalidad especificada. cuando se entrega un incremento a un cliente, las historias del usuario o casos de uso (véase el capítulo 5) que se implementan con el incre- mento se utilizan como base para las pruebas de aceptación. el grado en el que el software implementa la salida, función y comportamiento del caso de uso es una forma de retroalimen-tación. por último, conforme se obtienen nuevos requerimientos como parte de la planeación iterativa, el equipo da al cliente una retroalimentación rápida con miras al costo y al efecto en la programación de actividades. 3 en el contexto de xp, una metáfora es “una historia que cada quien —clientes, programadores y gerentes— narra, acerca de cómo funciona el sistema” [bec04a]. 4 el rediseño permite que un ingeniero mejore la estructura interna de un diseño (o código fuente) sin cambiar su funcionalidad o comportamiento externos. en esencia, el rediseño puede utilizarse para mejorar la eficiencia, disponibilidad o rendimiento de un diseño o del código que lo implementa.mantenlo sencillo siempre que se pueda, pero reconoce que el “rediseño” continuo consume mucho tiempo y recursos.consejo 03pressman(055-080).indd  6103pressman(055-080).indd  61 14/1/10  13:41:1014/1/10  13:41:10