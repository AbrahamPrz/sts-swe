private void calculateBaseVacationHours() { /* … */ }; abstract protected void alterForLegalMinimums(); private void applyToPayroll(); { /* … */ }; } public class USVacationPolicy extends VacationPolicy { @Override protected void alterForLegalMinimums() { // Lógica específica de EE.UU. } } public class EUVacationPolicy extends VacationPolicy { @Override protected void alterForLegalMinimums() { // Lógica específica de la UE. } } Las subclases ocupan el vacío generado en el algoritmo  accrueVacation y solamente proporcionan los datos que no están duplicados. Expresividad Muchos tenemos experiencia con código enrevesado. Muchos lo hemos creado. Es fácil crear código que entendamos, ya que durante su creación nos centramos en comprender el problema que intentamos resolver. Los encargados de mantener el código no lo comprenderán de la misma forma. El principal coste de un proyecto de  software  es su mantenimiento a largo plazo. Para minimizar los posibles defectos al realizar cambios, es fundamental que comprendamos el funcionamiento del sistema. Al aumentar la complejidad de los sistemas, el programador necesita más tiempo para entenderlo y aumentan las posibilidades de errores. Por tanto, el código debe expresar con claridad la intención de su autor. Cuando más claro sea el código, menos tiempo perderán otros en intentar comprenderlo. Esto reduce los defectos y el coste de mantenimiento. Puede expresarse si elige nombres adecuados. El objetivo es ver el nombre de una clase y función, y que sus responsabilidades no nos sorprendan. También puede expresarse si reduce el tamaño de funciones y clases. Al hacerlo, resulta más sencillo asignarles nombres, crearlas y comprenderlas. 232