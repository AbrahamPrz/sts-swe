11.3 ■ Protección  299 2. Los errores son transitorios. Una variable de estado puede tener un valor incorrecto  causado por la ejecución de un código defectuoso. Sin embargo, antes de que se acceda a ésta y se origine una caída del sistema, es factible procesar alguna otra entrada del sistema que restablezca el estado a un valor válido. 3. El sistema puede incluir mecanismos de detección de fallas y de protección, que aseguran que el comportamiento erróneo se descubra y corrija antes de que resulten afectados los servicios del sistema.  Otra razón por la que las fallas en un sistema pueden no conducir a caídas del sistema es que, en la práctica, los usuarios adaptan su comportamiento para evitar el uso de entra-das que saben que causan caídas del programa. Los usuarios experimentados “soslayan” las características de software que descubren que son falibles. Por ejemplo, el autor evita ciertas características, tales como la numeración automática en el sistema de procesa-miento de texto que usó para escribir este libro. Cuando usaba la autonumeración, ésta normalmente salía mal. La reparación de las fallas de desarrollo en las características sin usar no muestra una diferencia práctica con la fiabilidad del sistema. A medida que los usuarios comparten información sobre problemas y soluciones alternativas, se redu-cen los efectos de los problemas del software. La distinción entre fallas en el desarrollo, errores y caídas, que se explica en la figura 11.3, ayuda a identificar tres enfoques complementarios usados para mejorar la fiabilidad de un sistema: 1. Prevención de fallas de desarrollo Se usan técnicas de desarrollo que minimizan  la posibilidad de los errores humanos y/o captan las equivocaciones antes de que resulten en fallas de desarrollo del sistema. Los ejemplos de estas técnicas incluyen evitar códigos del lenguaje de programación proclives al error, como punteros y el uso de análisis estático para descubrir anomalías del programa. 2. Detección y eliminación de fallas en el desarrollo El uso de técnicas de verifica-ción y validación que incrementan las oportunidades de que se detecten y eliminen las fallas en el desarrollo antes de que se use el sistema. Las pruebas y la depuración sistemáticas son un ejemplo de una técnica de detección de este tipo de fallas. 3. Tolerancia a fallas en el desarrollo Se refiere a las técnicas que aseguran que las fallas en el desarrollo de un sistema no deriven en errores del sistema o que los erro-res del sistema no deriven en caídas del sistema. La incorporación de mecanismos de autocomprobación en un sistema y el uso de módulos de sistema redundantes son ejemplos de técnicas de tolerancia a la fallas en el desarrollo.  La aplicación práctica de estas técnicas se trata en el capítulo 13, que examina las técnicas para la ingeniería de software confiable.  11. 3 Protección Los sistemas críticos para la protección son aquellos en los que resulta esencial que la operación del sistema sea segura en todo momento; esto es, el sistema nunca debe dañar a las personas o a su entorno, incluso cuando falle. Los ejemplos de sistemas críticos para la protección incluyen los sistemas de control y monitorización en las aeronaves, los  M11_SOMMERVILLE_INGENIERIA_1ED_SE_289-308.indd   299M11_SOMMERVILLE_INGENIERIA_1ED_SE_289-308.indd   299 3/18/11   4:54:18 PM3/18/11   4:54:18 PM