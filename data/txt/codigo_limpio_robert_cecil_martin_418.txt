} } y también cambia el código cliente: while (true) { integer nextvalue = iterator.getnextornull(); if (next == null) break; // hacer algo con nextvalue } en este caso, en realidad cambiamos la api de la clase para que sea compatible con el subproceso [120] . el cliente debe realizar una comprobación de null en lugar de comprobar hasnext() . por lo general, el bloqueo basado en el servidor es preferible por estos motivos: reduce el código repetido: el bloqueo basado en el servidor hace que el cliente bloquee correctamente el servidor. al incluir el código de bloqueo en el servidor, se libera a los clientes para usar el objeto y no tener que preocuparse de crear código de bloqueo adicional. permite un mejor rendimiento: puede intercambiar un servidor compatible con subprocesos por otro incompatible en caso de desarrollo de un solo subproceso, lo que evita la sobrecarga. reduce las posibilidades de error: sólo se necesita un programador que se olvide del bloqueo. aplica una única política: la política se aplica solamente al servidor, no a todos los clientes. reduce el ámbito de las variables compartidas: el cliente las desconoce y tampoco sabe cómo se bloquean. todo se oculta en el servidor. cuando se produce un fallo, su origen se busca en menos puntos. ¿y si no es el propietario del código de servidor? usar un adaptador para cambiar la api y añadir bloqueo public class threadsafeintegeriterator { private integeriterator iterator = new integeriterator(); public synchronized integer getnextornull() { 419