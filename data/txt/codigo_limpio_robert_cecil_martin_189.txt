que se puede reutilizar en otras aplicaciones. listado 10-3 una clase con una única responsabilidad. public class version { public int getmajorversionnumber() public int getminorversionnumber() public int getbuildnumber() } srp es uno de los conceptos más importantes del diseño orientado a objetos y también uno de los más sencillos de entender y cumplir, pero también es uno de los que más se abusa al diseñar clases. habitualmente nos encontramos clases que hacen demasiadas cosas. ¿por qué? crear software que funcione y crear software limpio son dos actividades diferentes. muchos tenemos un cerebro limitado, de modo que nos centramos en que el código funcione más que en su organización y limpieza. es algo totalmente válido. mantener objetivos separados es tan importante en nuestras actividades de programación como en nuestros programas. el problema es que muchos creemos que hemos terminado cuando el programa funciona. no cambiamos al otro objetivo de organización y limpieza. pasamos al siguiente problema en lugar de retroceder y dividir las clases en unidades independientes con una única responsabilidad. al mismo tiempo, muchos programadores temen que un elevado número de pequeñas clases con un único propósito dificulten la comprensión del conjunto. les preocupa que tengan que desplazarse entre las clases para determinar cómo funciona un aspecto concreto. sin embargo, un sistema con muchas clases reducidas no tiene más elementos móviles que un sistema con algunas clases enormes. en ambos hay que entender lo mismo. la pregunta es si quiere organizar sus herramientas en cajas con muchos pequeños cajones que contengan componentes bien definidos y etiquetados, o usar varios cajones grandes en los que mezcle todo. todos los sistemas tienen una gran lógica y complejidad. el objetivo principal para gestionar dicha complejidad es organizarla para que un programador sepa dónde buscar y comprenda la complejidad directamente afectada en cada momento concreto. por el contrario, un sistema con clases 190