considerar de calidad. Y voy a despedazarlo. No es un acto de malicia, ni tampoco me creo mejor que David y con el derecho de juzgar su código. De hecho, si leyera algún código que he creado, seguramente tendría que objetar muchos aspectos del mismo. No es un acto de arrogancia. Lo que voy a hacer no es más que una revisión profesional, algo con lo que todos deberíamos sentirnos cómodos y algo que deberíamos agradecer si alguien lo hace. A través de las críticas es como podemos aprender, como hacen médicos, pilotos o abogados. Y nosotros, como programadores, también tenemos que aprender a hacerlo. Otra cosa más sobre David Gilbert: es más que un buen programador. David ha tenido el valor y la buena voluntad de ofrecer este código al público gratuitamente, para que cualquiera pueda usarlo y examinarlo. ¡Bien hecho! SerialDate  (véase el Listado B-1) es una clase que representa una fecha en Java. ¿Para qué se necesita una clase que represente una fecha si Java ya cuenta con  java.util.Date  y  java.util.Calendar , entre otras? El autor creó esta clase como respuesta a un problema que yo también he padecido. El comentario de su Javadoc inicial (línea 67) lo explica. Podríamos cuestionar su intención, pero yo también he sufrido este problema y se agradece una clase sobre fechas en lugar de horas. Primero, conseguir que funcione Hay varias pruebas de unidad en la clase  SerialDateTests  (véase el Listado  B-2).  Todas son satisfactorias. Desafortunadamente, un rápido examen demuestra que no comprueban todos los aspectos [T1]. Por ejemplo, al realizar una búsqueda de usos en el método  MonthCodeToQuarter  (línea 334) se indica que no se usa [F4]. Por lo tanto, las pruebas de unidad no lo comprueban. Por ello, recurrí a Clover para ver el alcance de las pruebas de unidad. Clover indicó que las pruebas sólo ejecutan 91 de las 185 instrucciones ejecutables de  SerialDate  (aproximadamente el 50 por 100) [T2]. El mapa de alcance muestra grandes fragmentos de código sin ejecutar desperdigados por la clase. Mi objetivo era comprender la clase y refactorizarla, algo que no podía 338