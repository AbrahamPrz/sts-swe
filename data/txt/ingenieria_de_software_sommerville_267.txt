250  Capítulo 9 ■ Evolución del software  hay que limpiar los datos. Esto implica encontrar y corregir errores, eliminar regis- tros duplicados, etcétera. Hay herramientas disponibles para auxiliar en la reingenie- ría de datos.  La reingeniería de programas no necesariamente requiere todos los pasos de la figura 9.11. No se necesita traducción del código fuente, si todavía se usa el lenguaje de progra-mación de la aplicación. Si se logra hacer automáticamente toda la reingeniería, entonces quizá no sea necesaria la recuperación de documentación mediante ingeniería inversa. La reingeniería de datos sólo se requiere cuando las estructuras de datos en el programa cambian durante la reingeniería del sistema. Para hacer que el sistema con reingeniería interopere con el nuevo software, tal vez se tengan que desarrollar servicios adaptadores, como se estudia en el capítulo 19. Éstos ocultan las interfaces originales del sistema de software y presentan las nuevas inter-faces, mejor estructuradas, que pueden usarse con otros componentes. Este proceso de envolvimiento de los sistemas heredados es una importante técnica para desarrollar ser-vicios reutilizables a gran escala. Los costos de la reingeniería dependen evidentemente de la extensión del trabajo que se realiza. Existe un espectro de posibles enfoques a la reingeniería, como se muestra en la figura 9.12. Los costos aumentan de izquierda a derecha, de modo que la traducción del código fuente es la opción más barata. La reingeniería como parte de la migración arqui-tectónica es la más costosa. El problema con la reingeniería de software es que existen límites prácticos a cuánto mejora un sistema gracias a la reingeniería. No es posible, por ejemplo, convertir un sistema escrito con un enfoque funcional, a un sistema orientado a objetos. Los grandes cambios arquitectónicos o la reorganización radical de la gestión de los datos del sistema no pueden realizarse automáticamente, de modo que son muy costosos. Aunque la rein-geniería podría mejorar la mantenibilidad, el sistema con reingeniería probablemente no será tan mantenible como un sistema nuevo desarrollado usando modernos métodos de ingeniería de software.  9.3.3 Mantenimiento preventivo mediante refactorización La refactorización es el proceso de hacer mejoras a un programa para frenar la degrada-ción mediante el cambio (Opdyke y Johnson, 1990). Ello significa modificar un programa para mejorar su estructura, reducir su complejidad o hacerlo más fácil de entender. A veces se considera que la refactorización está limitada al desarrollo orientado a objetos, pero los principios son aplicables a cualquier enfoque de desarrollo. Mientras se refacto-Reestructuración automatizada con cambios manualesConversión automatizada del código fuenteReestructuración más cambios arquitectónicosReestructuración automatizada del programaReestructuración del programa y datos Aumento de costo Figura 9.12 Enfoques  de reingeniería M09_SOMMERVILLE_INGENIERIA_1ED_SE_234-260.indd   250M09_SOMMERVILLE_INGENIERIA_1ED_SE_234-260.indd   250 3/18/11   4:52:25 PM3/18/11   4:52:25 PM