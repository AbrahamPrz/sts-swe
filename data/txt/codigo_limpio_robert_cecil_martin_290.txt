public int getint(char arg) { args.argumentmarshaler am = marshalers .get(arg); try { return am == null ? 0 : (integer) am.get(); } catch (exception e) { return 0; } } … public class args { … private map<character, argumentmarshaler> stringargs = new hashmap<character, argumentmarshaler>(); private map<character, argumentmarshaler> intargs = new hashmap<character, argumentmarshaler>(); private map<character, argumentmarshaler> marshalers = new hashmap<character, argumentmarshaler>(); … seguidamente, dispuse en línea los tres métodos parse ya que no servían para mucho: private void parseschemaelement(string element) throws parseexception { char elementid = element.charat(0); string elementtail = element.substring(1); validateschemaelementid(elementid); if (isbooleanschemaelement(elementtail)) marshalers.put(elementid, new booleanargumentmarshaler()); else if (isstringschemaelement(elementtail)) marshalers.put(elementid, new stringargumentmarshaler()); else if (isintegerschemaelement(elementtail)) { marshalers.put(elementid, new integerargumentmarshaler()); } else { throw new parseexception(string.format( “argument: %c has invalid format: %s.”, elementid, elementtail), 0); } } es el momento de ver la estructura completa. el listado 14-12 muestra la clase args actual. listado 14-12 args.java (tras la primera refactorización) package com.objectmentor.utilities.getopts; import java.text.parseexception; import java.util.*; public class args { private string schema; 291