484 PARTE TRES  ADMINISTRACIÓN DE LA CALIDAD su vez se refinan en constructos condicionales (por ejemplo, if-then-else y do-while). Un mayor  refinamiento continúa hasta que hay suficiente detalle procedural para crear el componente en cuestión. En cada nivel de refinamiento, el equipo de cuarto limpio 1 realiza una verificación formal de  exactitud. Para lograr esto, a los constructos de programación estructurada se une un conjunto de condiciones de exactitud genéricas. Si una función f se expande en una secuencia g y h, la  condición de exactitud para toda entrada a f es • ¿g seguida de h hace f? Cuando una función p se refina en una condicional de la forma “if /H11021c/H11022 then q, else r”, la condi- ción de exactitud para toda entrada a p es • Siempre que la condición /H11021c/H11022 es verdadera, ¿q hace p?; y siempre que /H11021c/H11022 es falsa, ¿r  hace p? Cuando la función m se refina como un ciclo, las condiciones de exactitud para toda entrada a  m son • ¿Está garantizada la finalización? • Siempre que /H11021c/H11022 es verdadera, ¿n seguida por m hace m?; y siempre que /H11021c/H11022 es falsa,  ¿saltar el ciclo todavía hace m? Cada vez que una caja clara se refina al siguiente nivel de detalle, se aplican dichas condiciones de exactitud. 21.3.2  Verificación de diseño Debe observar que el uso de los constructos de programación estructurada restringen el número de pruebas de exactitud que deben realizarse. Una sola condición se verifica para secuencias; dos condiciones se prueban para if-then-elseo y tres condiciones se verifican para ciclo. Para ilustrar la verificación de exactitud para un diseño procedural, use un ejemplo simple,  introducido por primera vez por Linger, Mills y Witt [Lin79]. La intención es diseñar y verificar un pequeño programa que encuentre la parte entera y de una raíz cuadrada de un entero dado x. El diseño procedural se representa usando el diagrama de flujo de la figura 21.6. 2 Para verificar la exactitud de este diseño, las condiciones de entrada y salida se agregan como  se muestra en la figura 21.6. La condición de entrada observa que x debe ser mayor que o igual a 0. La condición de salida requiere que x permanezca invariable y que y satisfaga la expresión  anotada en la figura. Para probar que el diseño es correcto, es necesario probar que las condi-ciones init, loop, cont, yes y exit, que se muestran en la figura 21.6, son verdaderas en todos los  casos. En ocasiones a esto se le conoce como subpruebas.  1. La condición init demanda que [x ≥ 0 y y = 0]. Con base en los requerimientos del pro- blema, la condición de entrada se supone correcta. 3 Por tanto, se satisface la primera  parte de la condición init, x /H11350 0. En el diagrama de flujo, el enunciado inmediatamente anterior a la condición init establece y = 0. Por tanto, la segunda parte de la condición init también se satisface. En consecuencia, init es verdadera.  2. La condición loop puede encontrarse en una de dos formas: 1) directamente de init (en  este caso, la condición loop se satisface directamente) o por medio del flujo de control  1 Puesto que todo el equipo está involucrado en el proceso de verificación, es menos probable que se cometa un  error al realizar la verificación en sí. 2 La figura 21.6 se adaptó de [Lin94]. Utilizada con permiso. 3 En este contexto no tiene validez un valor negativo para la raíz cuadrada.¿Qué condiciones se  aplican para probar la exactitud de los constructos estructurados?? Si se limita sólo a constructos estructurados mientras desarrolla un diseño procedural, la prueba de exactitud es directa. Si viola los constructos, las pruebas de exactitud son difíciles o imposibles.CONSEJO 21Pressman(478-500).indd   48421Pressman(478-500).indd   484 19/1/10   12:43:2419/1/10   12:43:24