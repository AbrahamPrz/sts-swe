266 capítulo 10 ■ sistemas sociotécnicos 2. se entiende cómo las fallas de desarrollo y de operación en las capas, que no son del software, llegan a afectar al software. usted también puede considerar cómo elabo-rar pruebas en el software con la finalidad de ayudar a detectar dichas fallas, y cómo dar soporte para recuperarse de las mismas. puesto que el software es inherentemente flexible, se deja por lo general a los ingenieros de software solucionar los problemas imprevistos del sistema. suponga que una instalación deradar está ubicada de tal modo que pasan espectros en la imagen del radar. no es práctico mover el radar a un sitio con menos interferencia, así que los ingenieros de sistemas deben encontrar otra forma de eliminar tales espectros. la solución puede ser mejorar las capacida-des de procesamiento de imágenes del software para eliminar los espectros de las imágenes. esto quizás haga lento el software, de tal forma que su rendimiento se vuelve inadmisible. el problema se caracterizará entonces como una “falla de operación del software”; mientras que, de hecho, es una falla en el proceso de diseño para el sistema como un todo. es muy común este tipo de situación, donde los ingenieros de software tienen el pro-blema de mejorar las capacidades del software, sin aumentar los costos del hardware. muchas de las llamadas fallas de operación del software no son consecuencia de proble-mas inherentes de software, sino el resultado de buscar cambiar el software para instalar requerimientos modificados de ingeniería del sistema. un buen ejemplo de esto fue la falla del sistema de equipaje del aeropuerto de denver (swartz, 1996), donde se esperaba que el software controlador lidiara con las limitaciones del equipo utilizado. la ingeniería de sistemas (stevens et al., 1998; thayer, 2002; thomé, 1993; white et al., 1993) es el proceso para diseñar sistemas completos, no sólo el software en estos siste-mas. el software es el elemento controlador e integrador en estos sistemas, y los costos de la ingeniería de software con frecuencia son el principal componente de costo en los sis-temas globales de costos. como ingeniero de software, ayuda el hecho de tener un amplio conocimiento de cómo interactúa el software con otros sistemas de hardware y software, y cómo se supone que se usará. este conocimiento es útil para comprender los límites del software, para diseñar mejor software y participar en un grupo de ingeniería de sistemas. 10.1 sistemas complejos el término “sistema” se usa de forma universal. se habla de sistemas de cómputo, siste-mas operativos, sistemas de pago, sistema educativo, sistema de gobierno y cosas por el estilo. indiscutiblemente, se trata de usos muy diferentes de la palabra “sistema”, aunque de algún modo comparten la característica de que el sistema es más que simplemente la suma de sus partes. los sistemas abstractos, como el sistema de gobierno, están fuera del ámbito de este libro. en cambio, el enfoque está en los sistemas que incluyen computadoras y que tienen algún propósito específico, como habilitar la comunicación, soportar la navegación o calcu-lar los salarios. la siguiente es una definición de trabajo útil sobre estos tipos de sistemas: un sistema es una colección intencionada de componentes interrelacionados, de diferentes tipos, que trabajan en conjunto para lograr algún objetivo. esta definición general abarca una amplia gama de sistemas; por ejemplo, un sis-tema simple, como un apuntador láser, que generalmente incluye algunos componentes de hardware, además de una pequeña cantidad de software de control. en contraste, un m10_sommerville_ingenieria_1ed_se_261-288.indd  266m10_sommerville_ingenieria_1ed_se_261-288.indd  266 3/18/11  4:53:18 pm3/18/11  4:53:18 pm