24.3 ■ Revisiones e inspecciones  667 costos adicionales durante el diseño y desarrollo. Quizá no quieran aceptar el riesgo de  que no haya ahorros correspondientes en los costos de prueba del programa. Los procesos ágiles pocas veces usan procesos de inspección formal o revisión de pares. En vez de ello, se apoyan en los miembros del equipo que cooperan para compro-bar mutuamente el código y en lineamientos informales, tales como “comprobar antes de ingresar”, lo que sugiere que los programadores deben comprobar su propio código. Los profesionales de la programación extrema argumentan que la programación en parejas es un sustituto efectivo de la inspección, ya que, en efecto, se trata de un proceso de inspección continuo. Dos personas observan cada línea de código y la comprueban antes de aceptarla. La programación en grupos de dos conduce a un conocimiento profundo de un pro-grama, pues ambos programadores deben entender su funcionamiento a detalle para con-tinuar el desarrollo. En ocasiones es difícil lograr esta profundidad de conocimiento en otros procesos de inspección y, por lo tanto, la programación en grupos de dos permite Clase de falla Comprobación de inspección Fallas de datos  ¿Todas las variables del programa se inician antes de usar sus valores?  ¿Todas las constantes tienen nombre?  ¿La cota superior de los arreglos es igual al tamaño del arreglo o Valor – 1?  Si se usan cadenas de caracteres, ¿se asigna explícitamente un delimitador? ¿Existe alguna posibilidad de desbordamiento de buffer? Fallas de control  Para cada enunciado condicional, ¿la condición es correcta? ¿Hay certeza de que termine cada ciclo?   ¿Los enunciados compuestos están correctamente colocados entre paréntesis?  En caso de enunciados, ¿se justifican todos los casos posibles?  Si después de cada caso en los enunciados se requiere un paréntesis, ¿éste se incluyó? Fallas de entrada/salida  ¿Se usan todas las variables de entrada?   ¿A todas las variables de salida se les asigna un valor antes de que se produzcan?  ¿Entradas inesperadas pueden causar corrupción? Fallas de interfaz   ¿Todas las llamadas a función y método tienen el número correcto de  parámetros?  ¿Los tipos de parámetro formal y real coinciden? ¿Los parámetros están en el orden correcto?  Si los componentes acceden a memoria compartida, ¿tienen el mismo modelo de estructura de memoria compartida? Fallas de gestión de almacenamiento  Si se modifica una estructura vinculada, ¿todos los vínculos se reasignan correctamente?   Si se usa almacenamiento dinámico, ¿el espacio se asignó correctamente? ¿El espacio se cancela explícitamente después de que ya no se requiere? Fallas de gestión de excepción  ¿Se tomaron en cuenta todas las posibles condiciones de error? Figura 24.8 Lista  de verificación de una inspección M24_SOMMERVILLE_INGENIERIA_1ED_SE_651-680.indd   667M24_SOMMERVILLE_INGENIERIA_1ED_SE_651-680.indd   667 3/18/11   5:13:03 PM3/18/11   5:13:03 PM