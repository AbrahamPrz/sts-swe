626 parte cuatro administración de proyectos de software del proceso de software con frecuencia se conoce como la regla 40-20-40. cuarenta por cien- to de todo el esfuerzo se asigna a análisis frontal y diseño. un porcentaje similar se aplica a pruebas traseras. de ahí se infiere correctamente que la codificación pierde el énfasis (20 por ciento de esfuerzo). esta distribución de esfuerzo debe usarse solamente como guía. 6 las características de cada proyecto dictan la distribución del esfuerzo. el trabajo empleado en la planificación del proyecto rara vez representa más de 2 a 3 por ciento de esfuerzo, a menos que el plan comprometa a una organización a realizar más gastos con alto riesgo. la comunicación con el cliente y el análisis de requerimientos pueden comprender de 10 a 25 por ciento del esfuerzo del proyecto. el es-fuerzo que se emplea en análisis o creación de prototipos debe aumentar en proporción directa con el tamaño y la complejidad del proyecto. por lo general, al diseño de software se aplica un rango de 20 a 25 por ciento del esfuerzo. también debe considerarse el tiempo que se emplea para revisión del diseño y su posterior iteración. debido al esfuerzo aplicado al diseño de software, el código debe seguir relativamente con poca dificultad. es posible lograr un esfuerzo global de 15 a 20 por ciento. las pruebas y la pos-terior depuración pueden representar de 30 a 40 por ciento del esfuerzo de desarrollo del soft-ware. lo crucial del software con frecuencia dicta la cantidad de pruebas que se requieren. si el software se clasifica humanamente (es decir, si errores en el software pueden resultar en pér-dida de la vida), incluso son usuales porcentajes más altos. 27.3 d efinición de un conjunto de tareas  para el proyecto de software sin importar el modelo de proceso que se elija, el trabajo que realiza un equipo de software se logra a través de un conjunto de tareas que permiten definir, desarrollar y, a final de cuentas, apoyar el software de computadora. ningún conjunto de tareas es adecuado para todos los proyectos. un conjunto de tareas adecuado para un sistema grande y complejo probablemente se percibirá como excesivo para un producto de software pequeño y relativamente simple. en consecuencia, un proceso de software efectivo debe definir una colección de conjuntos de ta-reas, cada una diseñada para satisfacer las necesidades de diferentes tipos de proyectos. como se anotó en el capítulo 2, un conjunto de tareas es una colección de tareas de trabajo de ingeniería del software, hitos, productos operativos y filtros de aseguramiento de la calidad que deben lograrse para completar un proyecto particular. el conjunto de tareas debe propor-cionar suficiente disciplina a fin de lograr software de alta calidad. pero, al mismo tiempo, no debe abrumar al equipo del proyecto con trabajo innecesario. con la finalidad de desarrollar un calendario del proyecto, en la línea de tiempo del proyecto debe distribuirse un conjunto de tareas. el conjunto de tareas variará dependiendo del tipo de proyecto y el grado de rigor con el que el equipo de software decide hacer su trabajo. aunque es difícil desarrollar una taxonomía exhaustiva de los tipos de proyecto de software, la mayoría de las organizaciones de software encuentran los siguientes proyectos: 1. pro yectos de desarrollo de concepto que inician para explorar algún concepto empresa- rial nuevo o la aplicación de alguna nueva tecnología. 2. los pro yectos de desarrollo de nueva aplicación que se realizan como consecuencia de la solicitud de un cliente específico. 6 en la actualidad, la regla 40-20-40 está bajo ataque. algunos creen que más de 40 por ciento de esfuerzo global debe emplearse durante análisis y diseño. por otro lado, quienes proponen el desarrollo ágil (capítulo 3) argu- mentan que debe emplearse menos tiempo “frontal” y que un equipo debe avanzar rápidamente hacia la cons-trucción.¿cómo debe distribuirse el esfuerzo a través del flujo de trabajo del proceso de software?? webref para auxiliar en la definición de los conjuntos de tareas para varios proyectos de software, se desarrolló un modelo de proceso adaptable (apm, por sus siglas en inglés). en www.rspa.com/apm puede encontrar una descripción completa del mpa en inglés. 27pressman(620-639).indd  62627pressman(620-639).indd  626 26/1/10  19:47:4226/1/10  19:47:42