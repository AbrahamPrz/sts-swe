Hay una razón para que las variables sean privadas. No queremos que nadie más dependa de ellas. Queremos poder cambiar su tipo o implementación cuando deseemos. Entonces, ¿por qué tantos programadores añaden automáticamente métodos de establecimiento y recuperación que muestran sus variables privadas como si fueran públicas? Abstracción de datos Fíjese en la diferencia entre los listados 6-1 y 6-2. Ambos representan los datos de un punto cartesiano, pero uno muestra su implementación y otro la oculta totalmente. Listado 6-1 Punto concreto. public class Point { public double x; public double y; } Listado 6-2 Punto abstracto. public interface Point { double getX(); double getY(); void setCartesian(double x, double y); double getR(); double getTheta(); void set Polar(double r, double theta); } Lo mejor del Listado 6-2 es que no hay forma de saber si la implementación está en coordenadas rectangulares o polares. ¡Puede que en ninguna! Y aun así la interfaz representa sin lugar a dudas una estructura de datos. Pero representa algo más que una estructura de datos. Los métodos refuerzan una política de acceso. Puede leer las coordenadas de forma 135