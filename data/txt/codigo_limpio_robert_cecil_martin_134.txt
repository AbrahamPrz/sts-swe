hay una razón para que las variables sean privadas. no queremos que nadie más dependa de ellas. queremos poder cambiar su tipo o implementación cuando deseemos. entonces, ¿por qué tantos programadores añaden automáticamente métodos de establecimiento y recuperación que muestran sus variables privadas como si fueran públicas? abstracción de datos fíjese en la diferencia entre los listados 6-1 y 6-2. ambos representan los datos de un punto cartesiano, pero uno muestra su implementación y otro la oculta totalmente. listado 6-1 punto concreto. public class point { public double x; public double y; } listado 6-2 punto abstracto. public interface point { double getx(); double gety(); void setcartesian(double x, double y); double getr(); double gettheta(); void set polar(double r, double theta); } lo mejor del listado 6-2 es que no hay forma de saber si la implementación está en coordenadas rectangulares o polares. ¡puede que en ninguna! y aun así la interfaz representa sin lugar a dudas una estructura de datos. pero representa algo más que una estructura de datos. los métodos refuerzan una política de acceso. puede leer las coordenadas de forma 135