8.1 ■ pruebas de desarrollo 215 las particiones se identifican mediante la especificación del programa o la documen- tación del usuario y a partir de la experiencia, de donde se predicen las clases de valor de entrada que es probable que detecten errores. por ejemplo, digamos que la especificación de un programa establece que el programa acepta de 4 a 8 entradas que son cinco dígitos enteros mayores que 10 000. usted usa esta información para identificar las particiones de entrada y los posibles valores de entrada de prueba. esto se muestra en la figura 8.6. cuando se usa la especificación de un sistema para reconocer particiones de equivalen-cia, se llama “pruebas de caja negra”. aquí no es necesario algún conocimiento de cómo funciona el sistema. sin embargo, puede ser útil complementar las pruebas de caja negra con “pruebas de caja blanca”, en las cuales se busca el código del programa para encontrar otras posibles pruebas. por ejemplo, su código puede incluir excepciones para manejar las entradas incorrectas. este conocimiento se utiliza para identificar “particiones de excep-ción”: diferentes rangos donde deba aplicarse el mismo manejo de excepción. la partición de equivalencia es un enfoque efectivo para las pruebas, porque ayuda a explicar los errores que cometen con frecuencia los programadores al procesar entradas en los bordes de las particiones. usted también puede usar lineamientos de prueba para ayudarse a elegir casos de prueba. los lineamientos encapsulan conocimiento sobre qué tipos de casos de prueba son efectivos para la detección de errores. por ejemplo, cuando se prueban programas con secuencias, arreglos o listas, los lineamientos que pueden ayu-dar a revelar defectos incluyen: 1. probar software con secuencias que tengan sólo un valor único. los programadores naturalmente consideran a las secuencias como compuestas por muchos valores y, en ocasiones, incrustan esta suposición en sus programas. en consecuencia, si se presenta una secuencia de un valor único, es posible que un programa no funcione de manera adecuada. 2. usar diferentes secuencias de diversos tamaños en distintas pruebas. esto dismi-nuye las oportunidades de que un programa con defectos genere accidentalmente una salida correcta, debido a algunas características accidentales de la entrada. 3. derivar pruebas de modo que se acceda a los elementos primero, medio y último de la secuencia. este enfoque revela problemas en las fronteras de la partición.entre 10 000 y 99 999 menos de 10 000 más de 99 9999 999 10 000 50 000100 000 99 999 valores de entradaentre 4 y 10 menos de 4 más de 1031 1 10 47 número de valores de entrada figura 8.6 particiones de equivalencia m08_sommerville_ingenieria_1ed_se_205-233.indd  215m08_sommerville_ingenieria_1ed_se_205-233.indd  215 3/18/11  5:39:59 pm3/18/11  5:39:59 pm