argumentos, nombres arbitrarios y código duplicado, pero también cuento con una serie de pruebas de unidad que abarcan todas y cada una de las líneas de código. por tanto, retoco el código, divido las funciones, cambio los nombres y elimino los duplicados. reduzco los métodos y los reordeno. en ocasiones, elimino clases enteras, mientras mantengo las pruebas. al final, consigo funciones que cumplen las reglas detalladas en este capítulo. no las escribo al comenzar y dudo que nadie pueda hacerlo. conclusión todo sistema se crea a partir de un lenguaje específico del dominio diseñado por los programadores para describir dicho sistema. las funciones son los verbos del lenguaje y las clases los sustantivos. no es volver a la noción de que los sustantivos y verbos de un documento de requisitos son las clases y funciones de un sistema. es una verdad mucho más antigua. el arte de la programación es, y ha sido siempre, el arte del diseño del lenguaje. los programadores experimentados piensan en los sistemas como en historias que contar, no como en programas que escribir. recurren a las prestaciones del lenguaje de programación seleccionado para crear un lenguaje expresivo mejor y más completo que poder usar para contar esa historia. parte de ese lenguaje es la jerarquía de funciones que describen las acciones que se pueden realizar en el sistema. dichas acciones se crean para usar el lenguaje de dominio concreto que definen para contar su pequeña parte de la historia. en este capítulo hemos visto la mecánica de la creación de funciones correctas. si aplica estas reglas, sus funciones serán breves, con nombres correctos, y bien organizadas, pero no olvide que su verdadero objetivo es contar la historia del sistema y que las funciones que escriba deben encajar en un lenguaje claro y preciso que le sirva para contar esa historia. setupteardownincluder 83