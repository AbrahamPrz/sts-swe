13.4 ■ programación conﬁ able 359 2. realizar algún procesamiento alternativo al que originalmente se pretendía. así, el manejador de excepciones realiza algunas acciones para recuperarse del problema. entonces es capaz de continuar el procesamiento normal, o bien, el manejador de excepciones indica que ocurrió una excepción, de modo que un componente solici-tante está al tanto del problema. 3. pasar el control a un sistema de apoyo en tiempo de ejecución que maneje la excep-ción. con frecuencia esto sucede cuando ocurren fallas en un programa (por ejem-plo, cuando se desborda un valor numérico). la acción común del sistema en tiempo de ejecución es detener el procesamiento. sólo debe usarse este enfoque cuando sea posible llevar al sistema a un estado seguro e inactivo, antes de guiar el control al sistema en tiempo de ejecución. el manejo de excepciones dentro de un programa posibilita la detección y la recupe-ración de algunos errores de entrada y de eventos externos inesperados. como tal, ofrece un grado de tolerancia a la falla: el programa detecta las fallas y toma acciones para recu-perarse de ellas. como la mayoría de los errores de entrada y eventos externos inespe-rados por lo general son transitorios, a menudo es posible continuar la operación normal después de procesar la excepción. lineamiento 4: minimizar el uso de sentencias proclives a error las fallas en los programas y, por consiguiente, muchas fallas en la operación del pro-grama, comúnmente son consecuencia de un error humano. los programadores cometen errores porque pierden la pista de las numerosas relaciones entre las variables de estado. escriben enunciados de programa que dan como resultado un comportamiento inespe-rado y cambios de estado del sistema. las personas siempre cometerán errores, pero a finales de la década de 1970 quedó claro que algunos enfoques a la programación tenían más probabilidad de introducir errores en un programa que otros. algunos constructos de lenguaje de programación y técnicas de programación son inherentemente proclives a error y, por lo tanto, deben evitarse o, al menos, usarse lo mínimo que sea posible. los constructos potencialmente proclives a error incluyen: 1. enunciados de ramificación incondicional (go-to) los peligros de los enuncia- dos go-to se reconocieron desde 1968 (dijkstra, 1968) y, en consecuencia, se exclu- yen de los lenguajes de programación modernos. sin embargo, todavía se permiten en lenguajes como c. el uso de enunciados go-to conduce a un “código espagueti” que está enmarañado y dificulta la comprensión y la depuración. 2. números con punto flotante la representación de números con punto flotante en una palabra de memoria de longitud fija es inherentemente imprecisa. éste es un problema específico cuando los números se comparan, porque la imprecisión de la representa-ción conduce a comparaciones inválidas. por ejemplo, 3.00000000 puede represen-tarse a veces como 2.99999999 y en ocasiones como 3.00000001. una comparación mostraría que no son iguales. los números con punto fijo, donde un número se repre-senta a un número dado de lugares decimales, por lo general son más seguros porque permiten comparaciones exactas. 3. apuntadores los lenguajes de programación como c y c++ soportan sentencias de bajo nivel llamados apuntadores, que retienen direcciones que se refieren directamente m13_sommerville_ingenieria_1ed_se_341-365.indd  359m13_sommerville_ingenieria_1ed_se_341-365.indd  359 3/18/11  4:59:14 pm3/18/11  4:59:14 pm