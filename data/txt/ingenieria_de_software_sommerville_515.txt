498 capítulo 18 ■ ingeniería de software distribuido datos al sistema sin causar grandes perturbaciones. a cada nueva base de datos se accede simplemente al agregar otro componente distribuido. los componentes de acceso a la base de datos proporcionan una interfaz simplificada que controla el acceso a los datos. las bases de datos a las que se ingresa pueden residir en diferentes máquinas. la arqui-tectura facilita también extraer nuevos tipos de relaciones al agregar nuevos componen-tes integrador. las arquitecturas de componentes distribuidos enfrentan dos grandes desventajas: 1. son más complejas de diseñar que los sistemas cliente-servidor. los sistemas clien- te-servidor multinivel parecen ser una forma bastante intuitiva de pensar en los sis-temas. ellos reflejan muchas transacciones humanas donde las personas solicitan y reciben servicios de otras personas que se especializan en ofrecer dichos servicios. en contraste, para las personas, las arquitecturas de componentes distribuidos son más difíciles de visualizar y entender. 2. el middleware estandarizado para sistemas de componentes distribuidos nunca se ha aceptado por la comunidad. en su lugar, distintos proveedores, como microsoft y sun, han desarrollado un middleware diferente e incompatible. el middleware incrementa la complejidad general en los componentes de los sistemas distribuidos. como resultado de estos problemas, las arquitecturas orientadas a servicios (que se estudian en el capítulo 19) sustituyen a las arquitecturas de componentes distribuidos en muchas situaciones. sin embargo, los sistemas de componentes distribuidos tienen bene-ficios de rendimiento sobre los sistemas orientados a servicios. las comunicaciones rpc, por lo general, son más rápidas que la interacción basada en mensajes que se usa en los sistemas orientados a servicios. por lo tanto, las arquitecturas basadas en componentes son más adecuadas para sistemas de alto rendimiento global en los que un gran número de tran-sacciones debe procesarse rápidamente. 18.3.5 arquitecturas entre pares (peer-to-peer) el modelo cliente-servidor de computación que se analizó en las secciones anteriores del capítulo hace una clara distinción entre servidores, que son los proveedores de servicios, y clientes, que son los receptores de los servicios. este modelo conduce regularmente a una distribución desigual de la carga en el sistema, en el que los servidores realizan más trabajo que los clientes. esto puede conducir a que las organizaciones gasten mucho en capacidad de servidor mientras que existe una capacidad de procesamiento no utilizada en los cientos o miles de pc que se usan para acceder a los servidores del sistema. los sistemas entre pares (o punto a punto, p2p) son sistemas descentralizados en los que los cálculos pueden realizarse en cualquier nodo de la red. al menos en principio, no se hacen distinciones entre clientes y servidores. en las aplicaciones entre pares, el sistema global está diseñado para sacar ventaja del poder computacional y de almace-namiento disponible a través de una red de computadoras potencialmente enorme. los estándares y protocolos que permiten las comunicaciones a través de los nodos se embe-ben en la aplicación en sí y cada nodo debe ejecutar una copia de dicha aplicación. las tecnologías par a par se han usado principalmente para sistemas personales más que empresariales (oram, 2001). por ejemplo, los sistemas para compartir archivos basa- m18_sommerville_ingenieria_1ed_se_479-507.indd  498m18_sommerville_ingenieria_1ed_se_479-507.indd  498 3/18/11  5:03:56 pm3/18/11  5:03:56 pm