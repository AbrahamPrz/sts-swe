incorrecto falle lo antes posible y con frecuencia. hay dos opciones de instrumentación de código: manual. automática. manual puede añadir invocaciones de wait() , sleep() , yield() y priority() manualmente a su código, en especial si tiene que probar un fragmento especialmente escabroso. veamos un ejemplo: public synchronized string nexturlornull() { if (hasnext()) { string url = urlgenerator.next(); thread.yield(); // se añade para pruebas. updatehasnext(); return url; } return null; } la invocación de yield() cambia la ruta de ejecución adoptada por el código y posiblemente hace que el código falla donde no lo hacía antes. si el código falla, no se debe a la invocación de yield() añadida [90] . se debe a que el código es incorrecto y hemos hecho que el fallo sea más evidente. este enfoque presenta varios problemas: tendrá que buscar manualmente los puntos adecuados donde hacerlo. ¿cómo sabe dónde incluir la invocación y qué tipo de invocación usar? la presencia de este código en un entorno de producción ralentiza innecesariamente el código. es un enfoque que puede o no detectar los fallos; de hecho, no las tiene todas consigo. lo que necesitamos es una forma de hacerlo durante la fase de pruebas, no de producción. también debemos poder mezclar configuraciones entre ejecuciones, lo que aumenta las probabilidades de detectar los errores. 251