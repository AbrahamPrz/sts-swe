488 parte tres administración de la calidad lenguaje de especificación (sección 21.7) permite que los requerimientos o el diseño se interpre- ten sólo en una forma, lo que elimina la ambigüedad que con frecuencia ocurre cuando un lector debe interpretar un lenguaje natural (por ejemplo, inglés) o una notación gráfica (por ejemplo, uml). las facilidades descriptivas de la teoría de conjuntos y la notación lógica permiten un enunciado claro de los requerimientos. para ser consistente, los requerimientos enunciados en un lugar dentro de una especificación no deben contradecirse en otro lugar. la consistencia se logra 5 al probar matemáticamente que los hechos iniciales pueden mapearse formalmente (usando reglas de inferencia) en los enunciados ulteriores dentro de la especificación. para presentar los conceptos de los métodos formales básicos, considere algunos ejemplos simples a fin de ilustrar el uso de la especificación matemática, sin empantanarse en demasia-dos detalles matemáticos. ejemplo 1: una tabla simbólica. un programa se usa para mantener una tabla simbólica. dicha tabla se utiliza frecuentemente en muchos tipos diferentes de aplicaciones. consiste de una colección de ítems sin duplicación alguna. en la figura 21.7 se muestra un ejemplo de una tabla simbólica típica. en ella se representa la tabla que utiliza un sistema operativo para con-tener los nombres de los usuarios del sistema. otros ejemplos de tablas incluyen la colección de nombres del personal en un sistema de nómina, la colección de nombres de las computadoras en un sistema de comunicaciones de red y la colección de los destinos en un sistema para pro-ducir horarios de transportes. suponga que la tabla que se presenta en este ejemplo contiene no más de maxids nombres. esta afirmación, que coloca una restricción sobre la tabla, es un componente de una condición conocida como in variante de datos: una condición que es verdadera a lo largo de la ejecución de un sistema que contiene una colección de datos. la invariante de datos que se sostiene para la tabla simbólica recién analizada tiene dos componentes: 1) que la tabla contendrá no más de maxids nombres y 2) que no habrá nombres duplicados en la tabla. en el caso del programa de tabla simbólica, esto significa que en cualquier momento en el que se examine la tabla sim-bólica durante la ejecución del sistema, siempre contendrá no más de maxids nombres y no contendrá duplicados. otro concepto importante es el de estado. muchos lenguajes formales, como el ocl (sección 21.7.1), usan la noción de estado que se estudió en el capítulo 7, es decir, un sistema puede cita: “los métodos formales tienen un tremendo potencial para mejorar la claridad y precisión de las especificaciones de los requerimientos, y para encon-trar errores importantes y sutiles.” steve easterbrook et al. 5 en realidad, la completitud es difícil de garantizar, aun cuando se usen métodos formales. algunos aspectos de un sistema pueden quedar indefinidos conforme se cree la especificación; otras características pueden omitirse a propósito a fin de permitir a los diseñadores cierta libertad para escoger un enfoque de implementación; y, fi-nalmente, es imposible considerar todo escenario operativo en un sistema grande y complejo. las cosas pueden omitirse simplemente por equivocación.1. 2.3.4.5.6.7.8.9. 10.wilsonsimpsonabelfernandez maxids = 10figura 21.7 una tabla simbólicapunto clave una invariante de datos es un conjunto de condiciones que son verdaderas a lo largo de la ejecución del sistema que contiene una colección de datos. 21pressman(478-500).indd  48821pressman(478-500).indd  488 19/1/10  12:43:2619/1/10  12:43:26