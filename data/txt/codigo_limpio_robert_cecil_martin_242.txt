Existen otras clases añadidas para admitir diseño avanzado de concurrencia. Veamos algunos ejemplos: ReentrantLock Bloqueo que se puede adquirir en un método y liberar en otro. semaphore Una implementación del clásico semáforo, un bloqueo con un contador. CountDownLatch Bloqueo que espera un número de eventos antes de liberar todos los subprocesos retenidos. De este modo todos tienen la misma oportunidad de iniciarse al mismo tiempo. Recomendación :  Revise las clases de las que disponga. En el caso de Java, debe familiarizarse con java.util.concurrent, java.util.concurrent.atomic y java.util.concurrent.locks . Conocer los modelos de ejecución Existen diversas formas de dividir el comportamiento de una aplicación concurrente. Para describirlos debe conocer ciertas definiciones básicas. Recursos vinculados Recursos de tamaño o número fijo usados en un entorno concurrente, como por ejemplo conexiones de base de datos y búfer de lectura/escritura de tamaño fijo. Exclusión mutua Sólo un proceso puede acceder a datos o a un recurso compartido por vez. Inanición Se impide que un proceso o grupo de procesos continúen demasiado tiempo o indefinidamente. Por ejemplo, si permite primero la ejecución de los procesos más rápidos, los que se ejecutan durante más tiempo pueden perecer de inanición si los primeros no terminan nunca. Bloqueo Dos o más procesos esperan a que ambos terminen. Cada proceso tiene un recurso y ninguno puede terminar hasta que obtenga el otro recurso. Bloqueo Procesos bloqueados, intentando realizar su labor pero 243