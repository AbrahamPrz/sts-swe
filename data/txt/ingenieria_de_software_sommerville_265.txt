248  Capítulo 9 ■ Evolución del software 1. Número de peticiones para mantenimiento correctivo Un aumento en el número de  reportes de bugs y fallas indicaría que se introdujeron más errores en el programa de los que se repararon durante el proceso de mantenimiento. Esto podría revelar un declive en la mantenibilidad. 2. Tiempo promedio requerido para análisis del impacto Refleja el número de com-ponentes de programa que se ven afectados por la petición de cambio. Si este tiempo aumenta, implica que más componentes resultaron afectados y que la mantenibili-dad decrece. 3. Tiempo promedio tomado para implementar una petición de cambio  Éste no es  el mismo que el tiempo para el análisis del impacto, aunque puede correlacionarse con él, sino más bien es la cantidad de tiempo que se necesita para modificar el sis-tema y su documentación, después de valorar cuáles componentes serán afectados. Un aumento en el tiempo necesario para implementar un cambio puede indicar un declive en la mantenibilidad. 4. Número de peticiones de cambio pendientes  Con el tiempo, un aumento en este  número implicaría un declive en la mantenibilidad.  La información predicha sobre las peticiones de cambio y las predicciones acerca de la mantenibilidad del sistema se usan para predecir los costos de mantenimiento. La mayoría de los gerentes combinan esta información con la intuición y la experiencia para estimar costos. El modelo COCOMO 2 de estimación de costos (Boehm et al., 2000),  que se estudia en el capítulo 24, sugiere que una estimación del esfuerzo de manteni-miento del software puede basarse en el esfuerzo por comprender el código existente, así como en el esfuerzo para desarrollar el nuevo código.  9.3.2 Reingeniería de software Como se estudió en la sección anterior, el proceso de evolución del sistema incluye comprender el programa que debe cambiarse y, luego, implementar dichos cambios. Sin embargo, muchos sistemas, especialmente los sistemas heredados más antiguos, son difí-ciles de entender y de cambiar. Es posible que los programas se hayan optimizado para rendimiento o utilización de espacio a expensas de la claridad o, con el tiempo, la estruc-tura inicial del programa quizá se corrompió debido a una serie de cambios. Para hacer que los sistemas de software heredados sean más sencillos de mantener, se pueden someter a reingeniería para mejorar su estructura y entendimiento. La reingenie-ría puede implicar volver a documentar el sistema, refactorizar su arquitectura, traducir los programas a un lenguaje de programación moderno, y modificar y actualizar la estructura y los valores de los datos del sistema. La funcionalidad del software no cambia y, normal-mente, conviene tratar de evitar grandes cambios a la arquitectura de sistema. Hay dos beneficios importantes de la reingeniería respecto de la sustitución: 1. Reducción del riesgo Hay un alto riesgo en el desarrollo de software empresarial  crítico. Pueden cometerse errores en la especificación del sistema o tal vez haya problemas de desarrollo. Las demoras en la introducción del nuevo software podrían significar que la empresa está perdida y que se incurrirá en costos adicionales. M09_SOMMERVILLE_INGENIERIA_1ED_SE_234-260.indd   248M09_SOMMERVILLE_INGENIERIA_1ED_SE_234-260.indd   248 3/18/11   4:52:25 PM3/18/11   4:52:25 PM