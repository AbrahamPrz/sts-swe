310  Capítulo 12 ■ Especificación de confiabilidad y seguridad En septiembre de 1993, un avión aterrizó en el aeropuerto de Varsovia, Polonia, en  medio de una tormenta. Durante nueve segundos, después del aterrizaje, no funcionaron los frenos en el sistema de frenado controlado por computadora. El sistema de frenado no reconoció que el avión había aterrizado y operó como si la aeronave aún estuviera en el aire. Una característica de seguridad de la aeronave detuvo el despliegue del sistema de empuje inverso, que desacelera la aeronave, lo cual es muy peligroso cuando el avión se encuentra en el aire. El avión salió por el extremo de la pista, golpeó un banco de tierra y se incendió. La investigación del accidente demostró que el software del sistema de frenado operó según su especificación. Por lo tanto, no había errores en el programa. Sin embargo, la especificación del software estaba incompleta y no consideró una situación extraña, que surgió en este caso. El software funcionó, pero el sistema falló. Esto demuestra que la confiabilidad del sistema no sólo depende de buena ingeniería, sino también requiere de la atención a los detalles cuando se derivan los requerimientos del sistema y la inclusión de requerimientos especiales de software que se ajustan para garantizar la confiabilidad y seguridad de un sistema. Estos requerimientos de confiabili-dad y seguridad son de dos tipos: 1. Requerimientos funcionales, definen mecanismos de comprobación y recuperación  que deben incluirse en el sistema y en las características que ofrecen protección contra fallas de sistema y ataques externos. 2. Requerimientos no funcionales, definen la confiabilidad y disponibilidad requeridas del sistema.  El punto de partida para generar requerimientos funcionales de confiabilidad y segu-ridad con frecuencia es un conjunto de reglas, políticas o regulaciones empresariales o de dominio de alto nivel. Se trata de requerimientos de alto nivel que tal vez se describen mejor como requerimientos “no debe”. En contraste con los requerimientos funcionales normales que delimitan la conducta del sistema, los requerimientos “no debe” definen el comportamiento del sistema que es inaceptable. Ejemplos de requerimientos “no debe” son: “El sistema no debe permitir que los usuarios modifiquen los permisos de acceso sobre algún archivo que no hayan creado” (seguridad). “El sistema no debe permitir la selección del modo de empuje inverso cuando la aero- nave está en vuelo” (protección). “El sistema no debe permitir la activación simultánea de más de tres señales de  alarma” (protección).  Estos requerimientos “no debe” no pueden implementarse directamente, sino que tie-nen que descomponerse en requerimientos funcionales de software más específicos, o bien, aplicarse a través de decisiones de diseño de sistema, como una decisión para usar tipos particulares de equipo en el sistema. M12_SOMMERVILLE_INGENIERIA_1ED_SE_309-340.indd   310M12_SOMMERVILLE_INGENIERIA_1ED_SE_309-340.indd   310 3/18/11   4:55:10 PM3/18/11   4:55:10 PM