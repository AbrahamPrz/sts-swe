726 APÉNDICE 1  INTRODUCCIÓN A UML Los elementos principales de un diagrama de clase son cajas, que son los íconos utilizados  para representar clases e interfaces. Cada caja se divide en partes horizontales. La parte superior  contiene el nombre de la clase. La sección media menciona sus atributos. Un atributo es algo que un objeto de dicha clase conoce o puede proporcionar todo el tiempo. Por lo general, los atributos se implementan como campos de la clase, pero no necesitan serlo. Podrían ser valores que la clase puede calcular a partir de sus variables o valores instancia y que puede obtener de otros objetos de los cuales está compuesto. Por ejemplo, un objeto puede conocer siempre la hora actual y regresarla siempre que se le solicite. Por tanto, sería adecuado mencionar la hora actual como un atributo de dicha clase de objetos. Sin embargo, el objeto muy probablemente no tendría dicha hora almacenada en una de sus variables instancia, porque necesitaría actua-lizar de manera continua ese campo. En vez de ello, el objeto probablemente calcularía la hora actual (por ejemplo, a través de consulta con objetos de otras clases) en el momento en el que se le solicite la hora. La tercera sección del diagrama de clase contiene las operaciones o com-portamientos de la clase. Una operación es lo que pueden hacer los objetos de la clase. Por lo general, se implementa como un método de la clase. La figura A1.1 presenta un ejemplo simple de una clase Thoroughbred (pura sangre) que  modela caballos de pura sangre. Muestra tres atributos: mother (madre), father (padre) y birthyear  (año de nacimiento). El diagrama también muestra tres operaciones: getCurrentAge() (obtener  edad actual), getFather() (obtener padre) y getMother() (obtener madre); puede haber otros atri- butos y operaciones suprimidos que no se muestren en el diagrama. Cada atributo puede tener un nombre, un tipo y un nivel de visibilidad. El tipo y la visibilidad  son opcionales. El tipo sigue al nombre y se separa de él mediante dos puntos. La visibilidad se indica mediante un –, #, ~ o + precedente, que indica, respectivamente, visibilidad privada, pro- tegida, paquete o pública. En la figura A1.1, todos los atributos tienen visibilidad privada, como  se indica mediante el signo menos que los antecede (–). También es posible especificar que un atributo es estático o de clase, subrayándolo. Cada operación puede desplegarse con un nivel de visibilidad, parámetros con nombres y tipos, y un tipo de retorno. Una clase abstracta o un método abstracto se indica con el uso de cursivas en el nombre del  diagrama de clase. Vea, por ejemplo, la clase Horse (caballo) en la figura A1.2. Una interfaz se  indica con la frase “<<interface>>” (llamada estereotipo) arriba del nombre. Vea la interfaz Ow-nedObject (objeto posesión) en la figura A1.2. Una interfaz también puede representarse grá-ficamente mediante un círculo hueco. Vale la pena mencionar que el ícono que representa una clase puede tener otras partes op- cionales. Por ejemplo, puede usarse una cuarta sección en el fondo de la caja de clase para mencionar las responsabilidades de la clase. Esta sección es particularmente útil cuando se realiza la transición de tarjetas CRC (capítulo 6) a diagramas de clase, donde las responsabilida-des mencionadas en las tarjetas CRC pueden agregarse a esta cuarta sección en la caja de clase en el diagrama UML antes de crear los atributos y operaciones que llevan a cabo dichas respon-sabilidades. Esta cuarta sección no se muestra en ninguna de las figuras de este apéndice. Thoroughbred -father: Thoroughbred -mother: Thoroughbred-birthyear: int +getFather(): Thoroughbred +getMother(): Thoroughbred+getCurrentAge(currentYear:Date): intFIGURA A1.1 Diagrama de  clase para una clase Thoroughbred 33Pressman(725-742)app1.indd   72633Pressman(725-742)app1.indd   726 20/1/10   19:01:4720/1/10   19:01:47