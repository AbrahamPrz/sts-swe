696  Capítulo 25 ■ Administración de la conﬁ  guración ración. El lenguaje de configuración incluye sentencias para describir los componentes  del sistema a incluir en la construcción y sus dependencias. Puesto que la compilación es un proceso de cómputo intensivo, las herramientas para soportar la construcción de sistemas se diseñan por lo general para minimizar la canti-dad de compilación que se requiere. Esto se hace comprobando si está disponible una versión compilada de un componente. De ser así, no hay necesidad de volver a compilar dicho componente. Por lo tanto, debe haber una forma de vincular sin ambigüedades el código fuente de un componente con su código objeto equivalente. La forma en que se hace esto es asociar una firma única con cada archivo donde se almacene un componente del código fuente. El código objeto correspondiente, que se compiló a partir del código fuente, tiene una firma relacionada que identifica cada ver-sión del código fuente y cambia cuando éste se edita. Al comparar las firmas en los archi-vos de código fuente y objeto, es posible decidir si el componente del código fuente se usó para generar el componente de código objeto. Hay dos tipos de firmas que pueden usarse: 1. Modificación de marca de tiempo (timestamp) La firma en el archivo del código  fuente es la fecha y hora de cuándo éste se modificó. Si el archivo del código fuente de un componente se modifica después del archivo del código objeto relacionado, entonces el sistema supone que se requiere “recompilación” para crear un nuevo archivo del código objeto.  Por ejemplo, suponga que los componentes Comp.java y Comp.class tienen fir- mas de modificación de 17:03:05:02:14:2009 y 16:34:25:02:12:2009, respectiva-mente. Esto significa que el código Java se modificó a las 17 horas con 3 minutos y 5 segundos del 14 de febrero de 2009, y la versión compilada se modificó a las 16 horas con 34 minutos y 25 segundos del 12 de febrero de 2009. En este caso, el sistema recompilaría automáticamente Comp.java porque la versión compilada no incluye los cambios hechos al código fuente desde el 12 de febrero. 2. Sumas de verificación (checksums) de código fuente  La firma en el archivo del  código fuente es una suma de verificación calculada a partir de datos en el archivo. Una función checksum calcula un número único usando el texto fuente como entrada. Si se modifica el código fuente (incluso por un carácter), esto generará una suma diferente. Por lo tanto, usted puede estar seguro de que los archivos de código fuente con diferentes sumas de verificación en realidad son diferentes. La suma de verificación se asigna al código fuente justo antes de la compilación e identifica de manera exclusiva el archivo fuente. Entonces el sistema de construcción etiqueta el archivo de código objeto generado con la firma checksum. Si no hay archivo de código objeto con la misma firma que el archivo de código fuente a incluir en un sistema, entonces es necesario recompilar el código fuente.  Como a menudo los archivos del código objeto no están en versiones, el primer enfoque significa que sólo el archivo del código objeto compilado más recientemente se mantiene en el sistema. Esto, por lo general, se relaciona con el archivo del código fuente por nom-bre (es decir, tiene el mismo nombre que el archivo de código fuente, pero con un sufijo diferente). Por lo tanto, el archivo fuente Comp.java puede generar el archivo objeto Comp.class. Puesto que los archivos fuente y objeto están vinculados por nombre y no por una firma de archivo fuente explícita, por lo general no es posible construir diferentes versiones de un componente de código fuente en el mismo directorio al mismo tiempo, pues ello generaría archivos objeto con el mismo nombre. M25_SOMMERVILLE_INGENIERIA_1ED_SE_681-704.indd   696M25_SOMMERVILLE_INGENIERIA_1ED_SE_681-704.indd   696 3/18/11   5:16:31 PM3/18/11   5:16:31 PM