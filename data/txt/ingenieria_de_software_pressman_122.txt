capítulo 4 principios que guían la práctica 91 requerimientos se modificarán, hay una tendencia a ignorar los modelos. ¿por qué? porque se sabe que de todos modos cambiarán. el problema con esta actitud es que sin un modelo razonablemente completo de los requerimientos, se creará un diseño (modelo de diseño) que de manera invariable carecerá de funciones y características importantes. principio 5. ser capaz de enunciar un propósito explícito para cada modelo que se cree. cada vez que cree un modelo, pregúntese por qué lo hace. si no encuentra una ra-zón sólida para la existencia del modelo, no pierda tiempo en él. principio 6. adaptar los modelos que se desarrollan al sistema en cuestión. tal vez sea necesario adaptar a la aplicación la notación del modelo o las reglas; por ejemplo, una aplicación de juego de video quizá requiera una técnica de modelado distinta que el soft-ware incrustado que controla el motor de un automóvil en tiempo real. principio 7. tratar de construir modelos útiles, pero olvidarse de elaborar modelos perfectos. cuando un ingeniero de software construye modelos de requerimientos y di-seño, alcanza un punto de rendimientos decrecientes. es decir, el esfuerzo requerido para terminar por completo el modelo y hacerlo internamente consistente deja de beneficiarse por tener dichas propiedades. ¿se sugiere que el modelado debe ser pobre o de baja cali-dad? la respuesta es “no”. pero el modelado debe hacerse con la mirada puesta en las si-guientes etapas de la ingeniería de software. las iteraciones sin fin para obtener un modelo “perfecto” no cumplen la necesidad de agilidad. principio 8. no ser dogmático respecto de la sintaxis del modelo. si se tiene éxito para comunicar contenido, la representación es secundaria. aunque cada miembro del equipo de software debe tratar de usar una notación consistente durante el modelado, la característica más importante del modelo es comunicar información que permita la reali-zación de la siguiente tarea de ingeniería. si un modelo tiene éxito en hacer esto, es perdo-nable la sintaxis incorrecta. principio 9. si su instinto dice que un modelo no es el correcto a pesar de que se vea bien en el papel, hay razones para estar preocupado. si usted es un ingeniero de software experimentado, confíe en su instinto. el trabajo de software enseña muchas lec-ciones, algunas en el nivel del inconsciente. si algo le dice que un modelo de diseño está destinado a fracasar (aun cuando esto no pueda demostrarse en forma explícita), hay razo-nes para dedicar más tiempo a su estudio o a desarrollar otro distinto. principio 10. obtener retroalimentación tan pronto como sea posible. todo modelo debe ser revisado por los miembros del equipo. el objetivo de estas revisiones es obtener retroalimentación para utilizarla a fin de corregir los errores de modelado, cambiar las in-terpretaciones equivocadas y agregar las características o funciones omitidas inadvertida-mente. requerimientos de los principios de modelado. en las últimas tres décadas se han desa- rrollado numerosos métodos de modelado de requerimientos. los in vestigadores han identifi- cado los problemas del análisis de requerimientos y sus causas, y han desarrollado varias nota-ciones de modelado y los conjuntos heurísticos correspondientes para resolver aquéllos. cada método de análisis tiene un punto de vista único. sin embargo, todos están relacionados por ciertos principios operacionales: principio 1. debe representarse y entenderse el dominio de información de un problema. el dominio de información incluye los datos que fluyen hacia el sistema (usua-rios finales, otros sistemas o dispositivos externos), los datos que fluyen fuera del sistema (por la interfaz de usuario, interfaces de red, reportes, gráficas y otros medios) y los alma-cenamientos de datos que recaban y organizan objetos persistentes de datos (por ejemplo, aquellos que se conservan en forma permanente). 04pressman(081-100).indd  9104pressman(081-100).indd  91 26/1/10  17:31:5926/1/10  17:31:59