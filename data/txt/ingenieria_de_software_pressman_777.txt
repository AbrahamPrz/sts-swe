746 APÉNDICE 2  CONCEPTOS ORIENTADOS A OBJETO usa el software. Las clases frontera se diseñan con la responsabilidad de gestionar la forma en  la que los objetos entidad se presentan a los usuarios. Las clases controlador  se diseñan para gestionar: 1) la creación o actualización de objetos  entidad, 2) la instanciación de objetos frontera conforme obtienen información de objetos enti-dad, 3) comunicación compleja entre conjuntos de objetos y 4) validación de datos comunicados entre objetos o entre el usuario y la aplicación. Los conceptos analizados en los párrafos que siguen pueden ser útiles en trabajos de análisis  y diseño. Herencia. La herencia es uno de los diferenciadores clave entre sistemas convencionales y  orientados a objeto. Una subclase Y hereda todos los atributos y operaciones asociadas con su  superclase X. Esto significa que todas las estructuras de datos y algoritmos originalmente dise- ñados e implementados para X están disponibles de inmediato para Y; no se necesita hacer más trabajo. La reutilización se logra directamente. Cualquier cambio a los atributos u operaciones contenidos dentro de una superclase se he- reda inmediatamente para todas las subclases. Por tanto, la jerarquía de clase se con vierte en  un mecanismo mediante el cual los cambios (en niveles superiores) pueden propagarse inme-diatamente a través de un sistema. Es importante observar que en cada nivel de la jerarquía de clase pueden agregarse nuevos  atributos y operaciones a las que se heredaron de niveles superiores en la jerarquía. De hecho, siempre que se crea una nueva clase, tendrá algunas opciones: • La clase puede diseñarse y construirse desde cero, es decir, no se usa herencia. • La jerarquía de clase puede revisarse para determinar si una clase superior en la  jerarquía contiene más de los atributos y operaciones requeridos. La nueva clase hereda de la clase superior y entonces pueden agregarse adiciones, según se requiera. • La jerarquía de clase puede reestructurarse de modo que los atributos y operaciones  requeridos pueden heredarse en la nueva clase. • Las características de una clase existente pueden ser excesivas, y diferentes versiones de  atributos u operaciones se implementan para la nueva clase. Como todo concepto de diseño fundamental, la herencia puede proporcionar beneficios signifi-cativos para el diseño, pero si se usa de manera inadecuada, 3 puede complicar un diseño de  manera innecesaria y conducir a software proclive a errores, que es difícil de mantener. Mensajes. Las clases deben interactuar unas con otras para lograr las metas del diseño. Un mensaje estimula la ocurrencia de algunos comportamientos en el objeto receptor  . El compor- tamiento se logra cuando una operación se ejecuta. La interacción entre los objetos se ilustra de manera esquemática en la figura A2.2. Una ope- ración dentro de ObjetoEmisor genera un mensaje de la forma mensaje (<parámetros>) donde  los parámetros identifican ObjetoReceptor con el objeto que se va a estimular mediante el mensaje; la operación dentro de ObjetoReceptor consiste en recibir el mensaje y los ítems de  datos que proporcionan información requerida para que la operación sea exitosa. La colabora-ción definida entre clases como parte del modelo de requerimientos proporciona lineamientos útiles en el diseño de mensajes. Cox [Cox86] describe el intercambio entre clases en la forma siguiente: Un objeto [clase] se solicita para realizar una de sus operaciones al enviarle un mensaje que diga qué  hacer al objeto. El receptor [objeto] responde al mensaje al elegir primero la operación que imple- 3 Por ejemplo, diseñar una subclase que herede atributos y operaciones de más de una superclase (en ocasiones llamada  “herencia múltiple”) es mal vista por la mayoría de los diseñadores. 34Pressman(743-750)app2.indd   74634Pressman(743-750)app2.indd   746 26/1/10   17:32:2826/1/10   17:32:28