CAPÍTULO 10  DISEÑO EN EL NIVEL DE COMPONENTES 263 cos. El objetivo de la programación estructurada es auxiliar al diseñador en la definición de al- goritmos que sean menos complejos y por ello más fáciles de leer, probar y mantener. La ingeniería de software basada en componentes identifica, construye, cataloga y disemina  un conjunto de componentes de software en un dominio particular de aplicación. Después, es-tos componentes se califican, adaptan e integran para usarlos en un sistema nuevo. Los com-ponentes reutilizables deben diseñarse dentro de un ambiente que establezca para cada domi-nio de aplicación estructuras de datos estándar, protocolos de interfaz y arquitecturas de programa.   PROBLEMAS  Y PUNTOS  POR EVALUAR 10.1. En ocasiones resulta difícil definir el término componente. Primero dé una definición general y luego  otras más explícitas para el software orientado a objetos y para el tradicional. Por último, elija tres lenguajes  de programación con los que esté familiarizado e ilustre la manera en la que cada uno define un compo-nente. 10.2. ¿Por qué son necesarios los componentes de control en el software tradicional y por qué en general  no se requieren en el orientado a objetos?10.3. Describa con sus propias palabras el PAC. ¿Por qué es importante crear abstracciones que sirvan como  interfaz entre los componentes?10.4. Describa el PID con sus propias palabras. ¿Qué pasaría si un diseñador dependiera demasiado de las  concreciones?10.5. Seleccione tres componentes que haya desarrollado recientemente y evalúe los tipos de cohesión que  presente cada uno. Si tuviera que definir el beneficio principal de la cohesión, ¿cuál sería?10.6. Elija tres componentes que haya elaborado hace poco y evalúe los tipos de acoplamiento que tenga  cada uno. Si definiera el principal beneficio del poco acoplamiento, ¿qué diría?10.7. ¿Es razonable decir que los componentes del dominio del problema nunca deben tener acoplamiento  externo? Si está de acuerdo, ¿qué tipos de componente tendrían acoplamiento externo?10.8. Desarrolle 1) una clase de diseño elaborada, 2) descripciones de interfaz, 3) un diagrama de activida- des para una de las operaciones dentro de la clase de diseño y 4) un diagrama de estado detallado para una  de las clases de CasaSegura que se estudiaron en los capítulos anteriores. 10.9. ¿Son lo mismo el refinamiento stepwise y el rediseño? Si no es así, ¿en qué difieren? 10.10. ¿Qué es un componente de webapp? 10.11. Seleccione una parte pequeña de un programa existente (de 50 a 75 líneas de código). Separe las  construcciones de programación estructurada con cuadros que dibuje alrededor de ellas en el código fuente.  ¿El extracto de programa tiene construcciones que violan la filosofía de la programación estructurada? Si es así, rediseñe el código para que se apegue a las construcciones de programación estructurada. Si no es así, ¿qué observa en los cuadros que dibujó? 10.12. Todos los lenguajes modernos de programación implementan las construcciones de programación  estructurada. Dé ejemplos de tres lenguajes de programación.10.13. Seleccione un componente codificado pequeño y represéntelo con 1) un diagrama de actividades,  2) un diagrama de flujo, 3) una tabla de decisión y 4) LDP.10.14. ¿Por qué es importante la “lotificación” en el proceso de revisión del diseño en el nivel de compo- nentes?   LECTURAS  ADICIONALES  Y FUENTES  DE INFORMACIÓN En los últimos años se han publicado muchos libros sobre el desarrollo basado en componentes y acerca de  su reutilización. Apperly et al. (Service- and Component-Based Development, Addison-Wesley, 2003), Heine-man y Councill (Component Based Software Engineering , Addison-Wesley, 2001), Brown (Large Scale Compo- 10Pressman(234-264).indd   26310Pressman(234-264).indd   263 26/1/10   17:33:2526/1/10   17:33:25