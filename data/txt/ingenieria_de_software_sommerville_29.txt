12  Capítulo 1 ■ Introducción teléfono. Los sistemas de procesamiento por lotes se usan con frecuencia en conjunción  con sistemas basados en la Web. Por ejemplo, en una compañía, las solicitudes de gastos de viaje se envían mediante una aplicación Web, aunque se procesa en una aplicación batch para pago mensual. Para cada tipo de sistema se usan distintas técnicas de ingeniería de software, por- que el software tiene características muy diferentes. Por ejemplo, un sistema de control embebido en un automóvil es crítico para la seguridad y se quema en la ROM cuando se instala en el vehículo; por consiguiente, es muy costoso cambiarlo. Tal sistema necesita verificación y validación muy exhaustivas, de tal modo que se minimicen las probabili-dades de volver a llamar para revisión a automóviles, después de su venta, para corregir los problemas del software. La interacción del usuario es mínima (o quizás inexistente), por lo que no hay necesidad de usar un proceso de desarrollo que se apoye en el prototipo de interfaz de usuario. Para un sistema basado en la Web sería adecuado un enfoque basado en el desarrollo  y la entrega iterativos, con un sistema de componentes reutilizables. Sin embargo, tal enfoque podría no ser práctico para un sistema de sistemas, donde tienen que definirse por adelantado las especificaciones detalladas de las interacciones del sistema, de modo que cada sistema se desarrolle por separado. No obstante, existen fundamentos de ingeniería de software que se aplican a todos los  tipos de sistema de software: 1. Deben llevarse a cabo usando un proceso de desarrollo administrado y comprendido.  La organización que diseña el software necesita planear el proceso de desarrollo, así  como tener ideas claras acerca de lo que producirá y el tiempo en que estará comple-tado. Desde luego, se usan diferentes procesos para distintos tipos de software. 2. La confiabilidad y el desempeño son importantes para todos los tipos de sistemas.  El software tiene que comportarse como se espera, sin fallas, y cuando se requiera estar disponible. Debe ser seguro en su operación y, tanto como sea posible, también contra ataques externos. El sistema tiene que desempeñarse de manera eficiente y no desperdiciar recursos. 3. Es importante comprender y gestionar la especificación y los requerimientos del  software (lo que el software debe hacer). Debe conocerse qué esperan de él los dife-rentes clientes y usuarios del sistema, y gestionar sus expectativas, para entregar un sistema útil dentro de la fecha y presupuesto. 4. Tiene que usar de manera tan efectiva como sea posible los recursos existentes. Esto  significa que, donde sea adecuado, hay que reutilizar el software que se haya desa-rrollado, en vez de diseñar uno nuevo. Estas nociones fundamentales sobre proceso, confiabilidad, requerimientos, gestión  y reutilización, son temas importantes de este libro. Diferentes métodos los reflejan de formas diversas, pero subyacen en todo el desarrollo de software profesional. Hay que destacar que estos fundamentos no cubren la implementación ni la progra- mación. En este libro no se estudian técnicas específicas de programación, ya que ellas varían drásticamente de un tipo de sistema a otro. Por ejemplo, un lenguaje de guiones (scripts), como Ruby, sirve para programación de sistemas basados en la Web, aunque sería totalmente inadecuado para ingeniería de sistemas embebidos. M01_SOMMERVILLE_INGENIERIA_1ED_SE_001-026.indd   12M01_SOMMERVILLE_INGENIERIA_1ED_SE_001-026.indd   12 3/18/11   4:44:29 PM3/18/11   4:44:29 PM