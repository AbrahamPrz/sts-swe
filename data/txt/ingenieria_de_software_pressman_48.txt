capítulo 1 el software y la ingeniería de software 17 esto facilita conseguir un sistema que sea comprendido más fácilmente y que sea susceptible de recibir mantenimiento, lo que no quiere decir que en nombre de la simplicidad deban des-cartarse características o hasta rasgos internos. en realidad, los diseños más elegantes por lo general son los más simples. simple tampoco significa “rápido y sucio”. la verdad es que con frecuencia se requiere mucha reflexión y trabajo con iteraciones múltiples para poder simplifi-car. la recompensa es un software más fácil de mantener y menos propenso al error. tercer principio: mantener la visión una visión clar a es esencial para el éxito de un proyecto de software. sin ella, casi infalible- mente el proyecto terminará siendo un ser “con dos [o más mentes]”. sin integridad concep- tual, un sistema está amenazado de convertirse en una urdimbre de diseños incompatibles unidos por tornillos del tipo equivocado […] comprometer la visión de la arquitectura de un sistema de software debilita y, finalmente hará que colapsen incluso los sistemas bien diseña-dos. tener un arquitecto que pueda para mantener la visión y que obligue a su cumplimiento garantiza un proyecto de software muy exitoso. cuarto principio: otr os consumirán lo que usted produce rara vez se construye en el vacío un sistema de software con fortaleza industrial. en un modo u otro, alguien más lo usará, mantendrá, documentará o, de alguna forma, dependerá de su capacidad para entender el sistema. así que siempre establezca especificaciones, diseñe e implemente con la seguridad de que alguien más tendr á que entender lo que usted haga . la au- diencia para cualquier producto de desarrollo de software es potencialmente grande. elabore especificaciones con la mirada puesta en los usuarios. diseñe con los implementadores en mente. codifique pensando en aquellos que deben dar mantenimiento y ampliar el sistema. alguien debe depurar el código que usted escriba, y eso lo hace usuario de su código. hacer su trabajo más fácil agrega valor al sistema. quinto principio: ábr ase al futuro un sistema con larga vida útil tiene más valor. en los ambientes de cómputo actuales, donde las especificaciones cambian de un momento a otro y las plataformas de hardware quedan obsoletas con sólo unos meses de edad, es común que la vida útil del software se mida en meses y no en años. sin embargo, los sistemas de software con verdadera “fortaleza industrial” deben durar mucho más tiempo. para tener éxito en esto, los sistemas deben ser fáciles de adaptar a ésos y otros cambios. los sistemas que lo logran son los que se diseñaron para ello desde el principio. nunca diseñe sobre algo iniciado. siempre pregunte: “¿qué pasa si…?” y prepárese para todas las respuestas posibles mediante la creación de sistemas que re-suelvan el problema general, no sólo uno específico. 14 es muy posible que esto lleve a volver a usar un sistema completo. sexto principio: planee por anticipado la r eutilización la reutilización ahorra tiempo y esfuerzo.15 al desarrollar un sistema de software, lograr un alto nivel de reutilización es quizá la meta más difícil de lograr. la reutilización del código y de los diseños se ha reconocido como uno de los mayores beneficios de usar tecnologías orientadas a objetos. sin embargo, la recuperación de esta inversión no es automática. para reforzar las posibilidades de la reutilización que da la programación orientada a objetos [o la cita: “hay cierta majestad en la sen- cillez, que es con mucho todo lo que adorna al ingenio.” papa alejandro (1688-1744) punto clave si el software tiene valor, cambiará durante su vida útil. por esa razón, debe construirse de forma que sea fácil darle mantenimiento. 14 es peligroso llevar este consejo a los extremos. diseñar para resolver “el problema general” en ocasiones requiere compromisos de rendimiento y puede volver ineficientes las soluciones específicas.  15 aunque esto es verdad para aquellos que reutilizan software en proyectos futuros, volver a usar puede ser caro para quienes deben diseñar y elaborar componentes reutilizables. los estudios indican que diseñar y construir componentes reutilizables llega a costar entre 25 y 200% más que el software buscado. en ciertos casos no se justifica la diferencia de costos. 01pressman(001-024).indd  1701pressman(001-024).indd  17 14/1/10  13:31:0214/1/10  13:31:02