17.2 ■ Procesos CBSE  463  Para elaborar componentes de reutilización, deben adaptarse y extenderse componen- tes específicos de aplicación para crear versiones más genéricas y, por lo tanto, más reuti-lizables. Evidentemente, esta adaptación tiene un costo asociado. Así que primero habrá que decidir si es probable que un componente se reutilice y, segundo, si los ahorros de costo de la futura reutilización justifican los costos de hacer reutilizable al componente. Para responder la primera de estas preguntas, se debe decidir si el componente imple-menta o no una o más abstracciones de dominio estables. Las abstracciones de dominio estables son elementos fundamentales del dominio de aplicación que cambian lenta-mente. Por ejemplo, en un sistema bancario, las abstracciones de dominio pueden incluir cuentas, poseedores de cuentas y enunciados. En un sistema de administración de hospi-tales, las abstracciones de dominio pueden incluir pacientes, tratamientos y enfermeros. En ocasiones, a tales abstracciones de dominio se les llama “objetos empresariales”. Si el componente es una implementación de una abstracción de dominio o un grupo de objetos empresariales relacionados comúnmente usados, tal vez puedan reutilizarse. Para responder la pregunta acerca de la efectividad en términos de costo, habrá que valorar los costos de los cambios que se requieren para hacer reutilizable al componente. Éstos son los costos de la documentación y validación del componente, y los asociados con el hecho de hacerlo más genérico. Los cambios que se pueden hacer a un compo-nente para volverlo más reutilizable incluyen:  eliminar métodos específicos de aplicación;  cambiar los nombres para hacerlos más generales; agregar métodos para brindar cobertura funcional más completa; hacer manejadores de excepción consistentes para todos los métodos; adicionar una interfaz de “configuración” para permitir la adaptación de los compo- nentes a diferentes situaciones de uso;  integrar los componentes requeridos para aumentar la independencia.  El problema del manejo de excepción es particularmente difícil. Los componentes no  deben manejar las excepciones por sí mismos, porque cada aplicación tendrá sus propios requerimientos para manejo de excepción. En vez de ello, el componente debe definir qué excepciones pueden surgir y éstas deben publicarse como parte de la interfaz. Por ejemplo, un componente simple que implemente una estructura de datos en pila debe detectar y publicar excepciones de desbordamiento (overflow) de pilas y cuando se quiere extraer de la pila vacía (underflow). Sin embargo, en la práctica, existen dos problemas con esto: 1. Publicar todas las excepciones conduce a interfaces infladas que son difíciles de  entender. Esto podría alejar a usuarios potenciales del componente. 2. La ejecución del componente puede depender del manejo de excepciones locales, y cambiar esto tal vez tenga serias implicaciones para la funcionalidad del compo-nente.  Mili y sus colaboradores (2002) discuten formas de estimar los costos de hacer reuti-lizable un componente y los rendimientos de dicha inversión. Los beneficios de la reu-tilización antes de volver a desarrollar un componente no son simplemente ganancias  M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   463M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   463 3/18/11   5:03:05 PM3/18/11   5:03:05 PM