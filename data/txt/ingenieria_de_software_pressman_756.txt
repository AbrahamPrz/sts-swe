725APÉNDICE 1INTRODUCCIÓN A UML1 CONCEPTOS  CLAVE   canales. . . . . . . . . . . . . . . . 736 diagramas de actividad  . . . . 735diagramas de clase  . . . . . . . 725diagramas de comunicación. . . . . . . . . . . . 734 diagramas de estado . . . . . . 737diagramas de implementación . . . . . . . . . . 729 diagramas de secuencia . . . . 732diagramas de uso de caso  . . 730dependencia  . . . . . . . . . . . . 728estereotipo. . . . . . . . . . . . . 726generalización. . . . . . . . . . . 727lenguaje de restricción de objeto  . . . . . . . . . . . . . . 740 marcos de interacción  . . . . . 733multiplicidad . . . . . . . . . . . . 728El Lenguaje de Modelado Unificado (UML) es “un lenguaje estándar para escribir diseños de  software. El UML puede usarse para visualizar, especificar, construir y documentar los  artefactos de un sistema de software intensivo” [Boo05]. En otras palabras, tal como  los arquitectos de edificios crean planos para que los use una compañía constructora, los arqui-tectos de software crean diagramas de UML para ayudar a los desarrolladores de software a construir el software. Si usted entiende el vocabulario del UML (los elementos pictóricos de los diagramas y su significado) puede comprender y especificar con mucha más facilidad un sis-tema, y explicar su diseño a otros. Grady Booch, Jim Rumbaugh e Ivar Jacobson desarrollaron el UML a mediados de los años  noventa del siglo pasado con mucha realimentación de la comunidad de desarrollo de software. El UML fusionó algunas notaciones de modelado que competían entre sí y que se usaban en la industria del software en la época. En 1997, UML 1.0 se envió al Object Management Group, un consorcio sin fines de lucro involucrado en especificaciones de mantenimiento para su empleo en la industria de la computación. El UML 1.0 se revisó y dio como resultado la adopción del UML 1.1 ese mismo año. El estándar actual es UML 2.0 y ahora es un estándar ISO. Puesto que este estándar es tan nuevo, muchas antiguas referencias, como [Gam95], no usan notación de UML. UML 2.0 proporciona 13 diferentes diagramas para su uso en modelado de software. En este  apéndice se analizarán solamente diagramas de clase, implementación, caso de uso, secuencia,  comunicación, actividad y estado, diagramas que se usan en esta edición de Ingeniería del soft-ware. Un enfoque práctico. Debe observar que existen muchas características opcionales en diagramas de UML. El UML  ofrece dichas opciones (en ocasiones complejas) de modo que pueda expresar todos los aspec-tos importantes de un sistema. Al mismo tiempo, tiene la flexibilidad para suprimir aquellas partes del diagrama que no son relevantes para el aspecto que se va a modelar, con la finalidad de evitar confundir el diagrama con detalles irrelevantes. Por tanto, la omisión de una caracte-rística particular no significa que ésta se encuentre ausente; puede significar que la caracterís-tica se suprimió. En este apéndice, no se presenta la cobertura exhaustiva de todas las caracte- rísticas de los diagramas de UML. El apéndice se enfocará en las opciones estándar, en especial en aquellas que se usaron en este libro. 1 Este apéndice fue una aportación de Dale Skrien y se adaptó de su libro An Introduction to Object-Oriented Design  and Design Patterns in Java (McGraw-Hill, 2008). Todo el contenido se usa con permiso. 2 Si el lector no está familiarizado con los conceptos orientados a objeto, en el apéndice 2 se presenta una breve  introducción.  DIAGRAMAS  DE CLASE Para modelar clases, incluidos sus atributos, operaciones, relaciones y asociaciones con otras clases, 2 el UML proporciona un diagrama de clase, que aporta una visión estática o de estructura  de un sistema, sin mostrar la naturaleza dinámica de las comunicaciones entre los objetos de las clases. 33Pressman(725-742)app1.indd   72533Pressman(725-742)app1.indd   725 20/1/10   19:01:4720/1/10   19:01:47