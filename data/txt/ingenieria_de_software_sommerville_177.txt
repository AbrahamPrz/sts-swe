160 capítulo 6 ■ diseño arquitectónico para aplicaciones en las que un componente genere datos y otro los use. los ejemplos de este tipo de sistema incluyen sistemas de comando y control, sistemas de información administrativa, sistemas cad y entornos de desarrollo interactivo para software. la figura 6.9 ilustra una situación en la que puede usarse un repositorio. este diagrama muestra un ide que incluye diferentes herramientas para soportar desarrollo dirigido por modelo. en este caso, el repositorio puede ser un entorno controlado por versión (como se estudia en el capítulo 25) que hace un seguimiento de los cambios al software y per-mite regresar (rollback) a versiones anteriores. organizar herramientas alrededor de un repositorio es una forma eficiente de compar-tir grandes cantidades de datos. no hay necesidad de transmitir explícitamente datos de un componente a otro. sin embargo, los componentes deben operar en torno a un modelo de repositorio de datos acordado. inevitablemente, éste es un compromiso entre las nece-sidades específicas de cada herramienta y sería difícil o imposible integrar nuevos com-ponentes, si sus modelos de datos no se ajustan al esquema acordado. en la práctica, llega a ser complicado distribuir el repositorio sobre un número de máquinas. aunque es posible distribuir un repositorio lógicamente centralizado, puede haber problemas con la redundancia e inconsistencia de los datos. en el ejemplo que se muestra en la figura 6.9, el repositorio es pasivo, y el control es responsabilidad de los componentes que usan el repositorio. un enfoque alternativo, que se derivó para sistemas ia, utiliza un modelo “blackboard” (pizarrón) que activa com-ponentes cuando los datos particulares se tornan disponibles. esto es adecuado cuando la forma de los datos del repositorio está menos estructurada. las decisiones sobre cuál herramienta activar puede hacerse sólo cuando se hayan analizado los datos. este modelo lo introdujo nii (1986). bosch (2000) incluye un buen análisis de cómo este estilo se relaciona con los atributos de calidad del sistema. 6.3.3 arquitectura cliente-servidor el patrón de repositorio se interesa por la estructura estática de un sistema sin mostrar su organización en tiempo de operación. el siguiente ejemplo ilustra una organización en tiempo de operación, de uso muy común para sistemas distribuidos. en la figura 6.10 se describe el patrón cliente-servidor.repositorio del proyectotraductor de diseñoeditores umlgeneradores de código analizador de diseñogenerador de reporteeditor java editor python figura 6.9 arquitectura de repositorio para un ide m06_sommerville_ingenieria_1ed_se_147-175.indd  160m06_sommerville_ingenieria_1ed_se_147-175.indd  160 3/18/11  4:49:08 pm3/18/11  4:49:08 pm