17.1 ■ Componentes y modelos de componentes  455 La diferencia más significativa entre un componente como servicio y la noción original de  componente es que los servicios son entidades independientes externas a un programa que los usa. Cuando se construye un sistema orientado al servicio, se hace referencia al servicio externo en vez de incluir en su sistema una copia de dicho servicio. Por lo tanto, la ingeniería de software orientada al servicio, que se estudia en el capí-tulo 19, es un tipo de ingeniería de software basada en componentes. Utiliza una noción más simple de componente que el propuesto originalmente en CBSE. Los estándares impulsaron esto desde el comienzo. En situaciones en que no es práctica la reutilización basada en COTS, la CBSE orientada al servicio se convierte en el enfoque dominante para el desarrollo de sistemas empresariales.  1 7.1 Componentes y modelos de componentes En la comunidad CBSE existe un acuerdo general de que un componente es una unidad de software independiente que puede organizarse con otros componentes para crear un sistema de software. Sin embargo, más allá de eso, hay quienes proponen definiciones variables de un componente de software. Council y Heineman (2001) definen un com-ponente como: Un elemento de software que se conforma a un modelo de componentes están-dar y puede desplegarse y componerse independientemente sin modificación, de acuerdo con un estándar de composición.  En esencia, esta definición se basa en estándares, de manera que una unidad de soft-ware conformada a dichos estándares es un componente. No obstante, Szyperski (2002) no menciona estándares en su definición de componente; en vez de ello, se enfoca en características clave de los componentes: Un componente de software es una unidad de composición con interfaces especi-ficadas contractualmente y sólo con dependencias de contexto explícitas. Un com-ponente de software puede implementarse de manera independiente y está sujeto a composición por terceras partes.  Ambas definiciones se basan en la noción de componente como elemento que se incluye en un sistema, más que en un servicio al que hace referencia el sistema. Con todo, también son compatibles con la idea de un servicio como un componente. Szyperski establece además que un componente no tiene estado observable externo. Esto significa que las copias de los componentes son indistinguibles. No obstante, algu-nos modelos de componentes, tales como el modelo Enterprise Java Beans, permiten componentes de estado, así que no corresponden a la definición de Szyperski. Aunque los componentes sin estado son más simples de usar, existen algunos sistemas en que los componentes de estado son más convenientes y reducen la complejidad del sistema. Lo que tienen en común las definiciones anteriores es que concuerdan en que los componentes son independientes, y los consideran la unidad fundamental de composi-ción en un sistema. La visión del autor es que puede obtenerse una mejor definición de  M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   455M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   455 3/18/11   5:03:04 PM3/18/11   5:03:04 PM