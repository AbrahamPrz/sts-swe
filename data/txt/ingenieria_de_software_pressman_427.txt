396 parte tres administración de la calidad • la calidad del producto final mejora. es probable que la prueba de humo descubra errores funcionales así como errores de diseño arquitectónico o en el componente debido a que el enfoque está orientado a la construcción (integración). si tales errores se corrigen temprano, se tendrá una mejor calidad del producto. • el diagnóstico y la corrección de errores se simplifican. como todo enfoque de prueba de integración, es probable que los errores descubiertos durante la prueba de humo se asocien con “nuevos incrementos de software”; es decir, el software que se acaba de agregar a la(s) construcción(es) es causa probable de un error recientemente descu-bierto. • el progreso es más fácil de valorar. con cada día que transcurre, más software se integra y se demuestra que funciona. esto incrementa la moral del equipo y brinda a los gerentes un buen indicio de que se está progresando. opciones estratégicas. ha habido mucha discusión (por ejemplo, [bei84]) acerca de las re- lativas ventajas y desventajas de las pruebas de integración descendente en comparación con las ascendentes. en general, las ventajas de una estrategia tienden a ser desventajas para la otra. la principal desventaja del enfoque descendente es la necesidad de representantes y las dificultades de prueba que pueden asociarse con ellos. los problemas asociados con los repre-sentantes pueden compensarse con la ventaja de probar tempranamente las principales funcio-nes de control. la principal desventaja de la integración ascendente es que “el programa como entidad no existe hasta que se agrega el último módulo” [mye79]. este incon veniente se atem- pera con la mayor facilidad en el diseño de casos de prueba y la falta de representantes. la selección de una estrategia de integración depende de las características del software y, en ocasiones, del calendario del proyecto. en general, un enfoque combinado (a veces llamado prueba sándwich), que usa pruebas descendentes para niveles superiores de la estructura del programa acopladas con pruebas ascendentes para niveles subordinados, puede ser el mejor arreglo. conforme se realiza la integración, quien efectúa la prueba debe identificar los módulos crí- ticos. un módulo crítico tiene una o más de las siguientes características: 1) aborda muchos re-querimientos de software, 2) tiene un alto nivel de control (reside relativamente alto en la es-tructura del programa), 3) es complejo o proclive al error o 4) tiene requerimientos de rendimiento definidos. los módulos críticos deben probarse tan pronto como sea posible. además, las prue-bas de regresión deben enfocarse en la función del módulo crítico. productos de trabajo de las pruebas de integración. un plan global para integración del software y una descripción de las pruebas específicas se documentan en una especificación de pruebas. este producto de trabajo incorpora un plan de prueba y un procedimiento de prueba, y se vuelve parte de la configuración del software. la prueba se divide en fases y construcciones que abordan características del software funcionales y de comportamiento específicas. por ejemplo, la prueba de integración para el sistema de seguridad casasegur a puede dividirse en las siguientes fases de prueba: • interacción con el usuario (entrada y salida de comandos, representación de despliegue, procesamiento y representación de errores) • procesamiento de sensores (adquisición de salida de sensor, determinación de condi-ciones del sensor, acciones requeridas como consecuencia de las condiciones) • funciones de comunicación (capacidad para comunicarse con la estación de monitoreo central) • procesamiento de alarma (pruebas de acciones del software que ocurren cuando se encuentra una alarma)webref en www.qalinks.com pueden encontrarse enlaces a comentarios acerca de estrategias de pruebas. ¿qué es un “módulo crítico” y por qué debe identificársele?? 17pressman(383-410).indd  39617pressman(383-410).indd  396 21/1/10  10:59:2321/1/10  10:59:23