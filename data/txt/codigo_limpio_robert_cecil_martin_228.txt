herramientas con inyección de dependencias, interfaces y abstracción para minimizar dichas conexiones. nuestros diseños mejorarán todavía más. en especial, seguir una sencilla regla que afirme que debemos realizar pruebas y ejecutarlas continuamente afecta el cumplimiento por parte de nuestro sistema de los principales objetivos de la programación orientada a objetos de baja conexión y elevada cohesión. la creación de pruebas conduce a obtener mejores diseños. reglas 2 a 4 del diseño sencillo: refactorizar una vez creadas las pruebas, debemos mantener limpio el código y las clases. para ello, refactorizamos el código progresivamente. tras añadir unas líneas, nos detenemos y reflejamos el nuevo diseño. ¿ha empeorado? en caso afirmativo, lo limpiamos y ejecutamos las pruebas para comprobar que no hay elementos afectados. la presencia de las pruebas hace que perdamos el miedo a limpiar el código y que resulte dañado . en la fase de refactorización, podemos aplicar todos los aspectos del diseño de software correcto. podemos aumentar la cohesión, reducir las conexiones, separar las preocupaciones, modularizar aspectos del sistema, reducir el tamaño de funciones y clases, elegir nombres más adecuados, etc. aquí también aplicamos las tres últimas reglas del diseño correcto: eliminar duplicados, garantizar la capacidad de expresión y minimizar el número de clases y métodos. eliminar duplicados los duplicados son los mayores enemigos de un sistema bien diseñado. suponen un esfuerzo adicional, riesgos añadidos y una complejidad a mayores innecesaria. los duplicados se manifiestan de diversas formas. las líneas de código similar pueden modificarse para que parezcan refactorizadas, y hay otras formas de duplicación como la de implementación. por ejemplo, podríamos tener dos métodos en una clase de colección: 229