capítulo 14 conceptos de calidad 345 describió esta paradoja del conocimiento del modo siguiente: “año con año desarrollamos instrumen- tos más precisos para observar la naturaleza con más nitidez. y cuando vemos las observaciones, nos decepcionamos porque son borrosas y sentimos que son tan inciertas como siempre”. en el capítulo 23 se presenta un conjunto de unidades de medida aplicables a la evaluación cuantitativa de la calidad del software. en todos los casos, las unidades representan mediciones indirectas, es decir, nunca miden realmente la calidad, sino alguna manifestación de ella. el factor que complica todo es la relación precisa entre la variable que se mide y la calidad del software. 14.3 e l dilema de la calidad del software en una entrevista [ven03] publicada en la web, bertrand meyer analiza lo que se denomina el dilema de la calidad: si produce un sistema de software de mala calidad, usted pierde porque nadie lo querrá comprar. por otro lado, si dedica un tiempo infinito, demasiado esfuerzo y enormes sumas de dinero para obtener un elemento perfecto de software, entonces tomará tanto tiempo terminarlo y será tan caro de produ-cir que de todos modos quedará fuera del negocio. en cualquier caso, habrá perdido la ventana de mercado, o simplemente habrá agotado sus recursos. de modo que las personas de la industria tratan de situarse en ese punto medio mágico donde el producto es suficientemente bueno para no ser re-chazado de inmediato, no en la evaluación, pero tampoco es un objeto perfeccionista ni con dema-siado trabajo que lo convierta en algo que requiera demasiado tiempo o dinero para ser terminado. es correcto afirmar que los ingenieros de software deben tratar de producir sistemas de alta calidad. es mejor aplicar buenas prácticas al intento de lograrlo. pero la situación descrita por meyer proviene de la vida real y representa un dilema incluso para las mejores organizaciones de ingeniería de software. 14.3.1 software “suficientemente bueno” en palabras sencillas, si damos por válido el argumento de meyer, ¿es aceptable producir soft-ware “suficientemente bueno”? la respuesta a esta pregunta debe ser “sí”, porque las principa-les compañías de software lo hacen a diario. crean software con errores detectados y lo distri-buyen a una gran población de usuarios finales. reconocen que algunas de las funciones y características de la versión 1.0 tal vez no sean de la calidad más alta y planean hacer mejoras en la versión 2.0. hacen esto, sabiendo que algunos clientes se quejarán; reconocen que el tiempo para llegar al mercado actúa contra la mejor calidad, y liberan el software, siempre y cuando el producto entregado sea “suficientemente bueno”. exactamente, ¿qué significa “suficientemente bueno”? el software suficientemente bueno contiene las funciones y características de alta calidad que desean los usuarios, pero al mismo tiempo tiene otras más oscuras y especializadas que contienen errores conocidos. el vendedor de software espera que la gran mayoría de usuarios finales perdone los errores gracias a que estén muy contentos con la funcionalidad de la aplicación. esta idea resulta familiar para muchos lectores. si usted es uno de ellos, le pido que considere algunos de los argumentos contra lo “suficientemente bueno”. es verdad que lo “suficientemente bueno” puede funcionar en ciertos dominios de aplicación y para unas cuantas compañías grandes de software. después de todo, si una empresa tiene un presupuesto enorme para mercadotecnia y convence a suficientes personas de que compren la versión 1.0, habrá tenido éxito en capturarlos. como ya se dijo, puede sostener que en las ver-siones posteriores mejorará la calidad. al entregar la versión 1.0 suficientemente buena, habrá capturado al mercado.cuando se enfrente al dilema de la calidad (y todos lo hacen en un momento u otro), trate de alcanzar el balance: suficiente esfuerzo para producir una calidad aceptable sin que sepulte al proyecto.consejo 14pressman(337-353).indd  34514pressman(337-353).indd  345 14/1/10  16:51:3014/1/10  16:51:30