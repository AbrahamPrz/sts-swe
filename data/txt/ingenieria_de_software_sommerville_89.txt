72 capítulo 3 ■ desarrollo ágil de software la mitad del código que dos individuos que trabajen solos. hay varios estudios de la productividad de los programadores en pares con resultados mixtos. al usar estudiantes voluntarios, williams y sus colaboradores (cockburn y williams, 2001; williams et al., 2000) descubrieron que la productividad con la programación en pares es comparable con la de dos individuos que trabajan de manera independiente. las razones sugeridas son que los pares discuten el software antes de desarrollarlo, de modo que probablemente tengan menos salidas en falso y menos rediseño. más aún, el número de errores que se evitan por la inspección informal es tal que se emplea menos tiempo en reparar los bugs descubiertos durante el proceso de pruebas. sin embargo, los estudios con programadores más experimentados (arisholm et al., 2007; parrish et al., 2004) no replican dichos resultados. hallaron que había una pérdida de productividad significativa comparada con dos programadores que trabajan indivi-dualmente. hubo algunos beneficios de calidad, pero no compensaron por completo los costos de la programación en pares. no obstante, el intercambio de conocimiento que ocurre durante la programación en pares es muy importante, pues reduce los riesgos glo-bales de un proyecto cuando salen miembros del equipo. en sí mismo, esto hace que la programación de este tipo valga la pena. 3.4 administración de un proyecto ágil la responsabilidad principal de los administradores del proyecto de software es dirigir el proyecto, de modo que el software se entregue a tiempo y con el presupuesto planeado para ello. supervisan el trabajo de los ingenieros de software y monitorizan el avance en el desarrollo del software. el enfoque estándar de la administración de proyectos es el basado en un plan. como se estudia en el capítulo 23, los administradores se apoyan en un plan para el proyecto que muestra lo que se debe entregar y cuándo, así como quién trabajará en el desarrollo de los entregables del proyecto. un enfoque basado en un plan requiere en realidad que un admi-nistrador tenga una visión equilibrada de todo lo que debe diseñarse y de los procesos de desarrollo. sin embargo, no funciona bien con los métodos ágiles, donde los requerimien-tos se desarrollan incrementalmente, donde el software se entrega en rápidos incrementos cortos, y donde los cambios a los requerimientos y el software son la norma. como cualquier otro proceso de diseño de software profesional, el desarrollo ágil tiene que administrarse de tal modo que se busque el mejor uso del tiempo y de los recursos dis-ponibles para el equipo. esto requiere un enfoque diferente a la administración del proyecto, que se adapte al desarrollo incremental y a las fortalezas particulares de los métodos ágiles. aunque el enfoque de scrum (schwaber, 2004; schwaber y beedle, 2001) es un método ágil general, su enfoque está en la administración iterativa del desarrollo, y no en enfoques técnicos específicos para la ingeniería de software ágil. la figura 3.8 representa un diagrama del proceso de administración de scrum. este proceso no prescribe el uso de prácticas de programación, como la programación en pares y el desarrollo de primera prueba. por lo tanto, puede usarse con enfoques ágiles más técnicos, como xp, para ofre-cer al proyecto un marco administrativo. existen tres fases con scrum. la primera es la planeación del bosquejo, donde se establecen los objetivos generales del proyecto y el diseño de la arquitectura de software. m03_sommerville_ingenieria_1ed_se_056-081.indd  72m03_sommerville_ingenieria_1ed_se_056-081.indd  72 3/18/11  4:46:25 pm3/18/11  4:46:25 pm