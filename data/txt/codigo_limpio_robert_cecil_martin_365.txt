corregirse por medio del patrón de método de plantilla [107] o estrategia [108] . en realidad, la mayoría de patrones de diseño aparecidos en los últimos 15 años son formas de eliminar la duplicación. las formas normales de codd también son una estrategia para eliminar la duplicación en esquemas de base de datos. incluso la programación orientada a objetos es una estrategia para organizar módulos y eliminar la duplicación. no debería sorprenderle, ya que se trata de programación estructurada. creo que el objetivo es evidente: localice los elementos duplicados y elimínelos siempre que pueda. g6: código en un nivel de abstracción incorrecto es importante crear abstracciones que separen conceptos generales de nivel superior de conceptos detallados de nivel inferior. para ello, en ocasiones creamos clases abstractas que contengan los conceptos de nivel superior y variantes los de nivel inferior. si lo hacemos, debemos asegurarnos de que la separación sea completa. todos los conceptos de nivel inferior deben estar en las variantes y los de nivel superior en la clase base. por ejemplo, constantes, variables o funciones de utilidad que solamente pertenezcan a la implementación detallada no deben aparecer en la clase base. la clase base no debe saber nada al respecto de estos elementos. esta regla también se aplica a archivos fuente, componentes y módulos. el diseño correcto de software requiere la separación de conceptos en distintos niveles y su inclusión en contenedores diferentes. en ocasiones, dichos contenedores son clases base o variantes, y en otros casos son archivos fuente, módulos o componentes. independientemente del caso, la separación debe ser completa. no queremos que conceptos de nivel inferior y superior se mezclen. fíjese en este código: public interface stack { object pop() throws emptyexception; void push(object o) throws fullexception; double percentfull(); class emptyexception extends exception {} class fullexception extends exception {} } la función percentfull se encuentra en el nivel de abstracción 366