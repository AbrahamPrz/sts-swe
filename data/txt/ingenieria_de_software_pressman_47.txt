16 CAPÍTULO 1  EL SOFTWARE Y LA INGENIERÍA DE SOFTWARE • ¿Es capaz de representar una solución en una forma que lleve a su implementación eficaz?  ¿Es posible crear un modelo del diseño? Ejecutar el plan. El diseño que creó sirve como un mapa de carreteras para el sistema que  quiere construir . Puede haber desviaciones inesperadas y es posible que descubra un camino  mejor a medida que avanza, pero el “plan” le permitirá proceder sin que se pierda. • ¿Se ajusta la solución al plan? ¿El código fuente puede apegarse al modelo del diseño? • ¿Es probable que cada parte componente de la solución sea correcta? ¿El diseño y código se  han revisado o, mejor aún, se han hecho pruebas respecto de la corrección del algoritmo? Examinar el resultado. No se puede estar seguro de que la solución sea perfecta, pero sí de  que se ha diseñado un número suficiente de pruebas para descubrir tantos errores como sea posible. •  ¿Puede probarse cada parte componente de la solución? ¿Se ha implementado una estra- tegia razonable para hacer pruebas? • ¿La solución produce resultados que se apegan a los datos, funciones y características que se requieren? ¿El software se ha validado contra todos los requerimientos de los partici-pantes? No debiera sorprender que gran parte de este enfoque tenga que ver con el sentido común. En realidad, es razonable afirmar que un enfoque de sentido común para la ingeniería de software hará que nunca se extravíe. 1.5.2 Principios generales El diccionario define la palabra principio como “una ley importante o suposición que subyace y  se requiere en un sistema de pensamiento”. En este libro se analizarán principios en muchos niveles distintos de abstracción. Algunos se centran en la ingeniería de software como un todo, otros consideran una actividad estructural general específica (por ejemplo, comunicación),  y otros más se centran en acciones de la ingeniería de software (por ejemplo, diseño de la ar-quitectura) o en tareas técnicas (escribir un escenario para el uso). Sin importar su nivel de enfoque, los principios lo ayudarán a establecer un conjunto de herramientas mentales para una práctica sólida de la ingeniería de software. Ésa es la razón de que sean importantes. David Hooker [Hoo96] propuso siete principios que se centran en la práctica de la ingeniería  de software como un todo. Se reproducen en los párrafos siguientes: 13 Primer principio: La razón de que exista todo Un sistema de software existe por una razón: dar valor a sus usuarios. T odas las decisiones  deben tomarse teniendo esto en mente. Antes de especificar un requerimiento del sistema,  antes de notar la funcionalidad de una parte de él, antes de determinar las plataformas del hardware o desarrollar procesos, plantéese preguntas tales como: “¿Esto agrega valor real al sistema?” Si la respuesta es “no”, entonces no lo haga. Todos los demás principios apoyan a éste. Segundo principio: MSE (Mantenlo sencillo, estúpido…) El diseño de software no es un proceso caprichoso. Hay muchos factores por considerar en  cualquier actividad de diseño. T odo diseño debe ser tan simple como sea posible, pero no más .  13 Reproducido con permiso del autor [Hoo96]. Hooker define algunos patrones para estos principios en http:// c2.com/cgi/wiki?SevenPrinciplesOfSoftwareDevelopment.Antes de comenzar un proyecto de  software, asegúrese de que el software tenga un propósito para el negocio y que los usuarios perciben valor en él.CONSEJO 01Pressman(001-024).indd   1601Pressman(001-024).indd   16 14/1/10   13:31:0114/1/10   13:31:01