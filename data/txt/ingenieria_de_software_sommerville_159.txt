142 capítulo 5 ■ modelado del sistema 5.5.2 uml ejecutable la noción fundamental detrás de la ingeniería dirigida por modelo es que debe ser posible la transformación completamente automatizada de modelos a código. para lograr esto, usted tiene que ser capaz de construir modelos gráficos, cuya semántica esté bien defi-nida. también necesita una forma de agregar a los modelos gráficos, información sobre la forma en que se implementan las operaciones definidas en el modelo. esto es posible usando un subconjunto de uml 2 llamado uml ejecutable o xuml (mellor y balcer, 2002). aquí no hay espacio para describir los detalles del xuml, así que simplemente se presentará un breve panorama de sus principales características. el uml se desarrolló como un lenguaje para soportar y documentar diseño de soft-ware, no como un lenguaje de programación. los diseñadores del uml no estaban pre-ocupados por los detalles semánticos del lenguaje, sino con su expresividad. introdujeron nociones útiles como los diagramas de caso de uso, que ayudan con el diseño, pero que son demasiado informales para soportar la ejecución. por ende, para crear un subcon-junto ejecutable de uml, el número de tipos de modelo se redujo drásticamente a tres tipos de modelo clave: 1. modelos de dominio que identifican las principales preocupaciones en el sistema. se definen usando diagramas de clase uml que incluyen objetos, atributos y asocia- ciones. 2. modelos de clase, en los que se definen clases, junto con sus atributos y operaciones. 3. modelos de estado, en los que un diagrama de estado se asocia con cada clase y se usa para describir el ciclo de vida de la clase. el comportamiento dinámico del sistema puede especificarse de manera declarativa usando el lenguaje de restricción de objeto (ocl) o puede expresarse mediante el len-guaje de acción de uml. el lenguaje de acción es como un lenguaje de programación de muy alto nivel, donde es posible referirse a los objetos y sus atributos, así como especifi-car acciones a realizar. puntos clave ■ un modelo es una visión abstracta de un sistema que ignora algunos detalles del sistema. pueden desarrollarse modelos complementarios del sistema para mostrar el contexto, las interacciones, la estructura y el comportamiento del sistema. ■ los modelos de contexto muestran cómo un sistema a modelar se coloca en un entorno con otros sistemas y procesos. ayudan a definir las fronteras del sistema a desarrollar. ■ los diagramas de caso de uso y los diagramas de secuencia se emplean para describir las interacciones entre usuario/sistema a diseñar y usuarios/otros sistemas. los casos de uso describen interacciones entre un sistema y actores externos; los diagramas de secuencia agregan más información a éstos al mostrar las interacciones entre objetos del sistema. m05_sommerville_ingenieria_1ed_se_118-146.indd  142m05_sommerville_ingenieria_1ed_se_118-146.indd  142 3/18/11  4:48:18 pm3/18/11  4:48:18 pm