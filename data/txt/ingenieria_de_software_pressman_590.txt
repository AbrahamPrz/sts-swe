capítulo 24 conceptos de administración de proyecto 559 constantine [con93] sugiere cuatro “paradigmas organizacionales” para los equipos de inge- niería de software: 1. un par adigma cerrado estructura un equipo conforme a una jerarquía de autoridad tradi- cional. tales equipos pueden trabajar bien cuando producen software muy similar al de esfuerzos anteriores, pero será menos probable que sean innovadores cuando trabajen dentro de este paradigma. 2. un par adigma aleatorio estructura un equipo de manera holgada y depende de la inicia- tiva individual de los miembros del equipo. cuando se requiere innovación o avance tecnológico, destacarán los equipos que siguen este paradigma, pero pueden batallar cuando se requiera “desempeño ordenado”. 3. un par adigma abierto intenta estructurar un equipo de manera que logre algunos de los controles asociados con el paradigma cerrado, pero también mucha de la innova- ción que ocurre cuando se usa el paradigma aleatorio. el trabajo se realiza de manera colaboradora; la gran comunicación y la toma de decisiones consensuadas constituyen las características de los equipos de paradigma abierto. las estructuras de equipo de este paradigma son muy adecuadas para la solución de problemas complejos, pero pue- den no desempeñarse tan eficazmente como otros equipos. 4. un par adigma síncrono se apoya en la compartimentalización natural de un problema y organiza a los miembros del equipo para trabajar en trozos del problema con poca co-municación activa entre ellos. como acotación histórica, cabe decir que una de las primeras organizaciones de equipo de software fue una estructura de paradigma cerrado originalmente llamado equipo de programador jefe. esta estructura la propuso por primera ocasión harlan mills y la describió baker [bak72]. el núcleo del equipo estaba compuesto de: un ingeniero ejecutivo (el programador jefe), quien pla- neaba, coordinaba y revisaba todas las actividades técnicas del equipo; personal técnico (por lo general de dos a cinco personas), quienes realizaban análisis y desarrollaban actividades; y un ingeniero de respaldo, quien apoyaba al ingeniero ejecutivo en sus actividades y podía sustituirlo con mínima pérdida en la continuidad del proyecto. el programador jefe puede auxiliarse con uno o más especialistas (por ejemplo, experto en telecomunicaciones, diseñador de bases de datos), personal de apoyo (por ejemplo, escritores técnicos, oficinistas) y un bibliotecario de software. como contrapunto a la estructura del equipo del programador jefe, el paradigma aleatorio de constantine [con93] sugiere un equipo de software con independencia creativa cuyo enfoque para trabajar pueda denominarse de mejor manera como anarquía innovadora. aunque el enfo-que de espíritu libre en el trabajo de software es atractivo, canalizar la energía creativa hacia un equipo de alto rendimiento debe ser una meta central de una organización de ingeniería de software. para lograr un equipo de alto rendimiento: • los miembros del equipo deben tenerse confianza entre sí. • la distribución de habilidades debe ser adecuada para el problema. • es posible que tenga que excluirse del equipo a los inconformes si debe mantenerse la cohesión del equipo. sin importar el tipo de organización del equipo, el objetivo para todo gerente de proyecto es ayudar a crear un equipo que muestre cohesión. en su libro peopleware, demarco y lister [dem98] analizan este tema: tendemos a usar la palabra equipo con mucha holgura en el mundo empresarial, y llamamos así a cualquier grupo de personas asignadas para trabajar juntas. pero muchos de estos grupos simple-¿qué opciones se tienen cuando se define la estructura de un equipo de software?? cita: “si quieres ser incrementalmen-te mejor: sé competitivo. si quieres ser exponencialmente mejor: sé cooperativo.” autor desconocido 24pressman(553-570).indd  55924pressman(553-570).indd  559 19/1/10  23:34:4219/1/10  23:34:42