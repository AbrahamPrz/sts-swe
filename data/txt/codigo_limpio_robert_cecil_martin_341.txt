Pero esto supone un problema. Por un lado, el término «número de serie» no es realmente correcto. Puede ser un detalle menor pero la representación es más un desplazamiento relativo que un número de serie. El término «número de serie» tiene que ver más con marcadores de identificación de productos que con fechas. Por ello, no lo considero especialmente descriptivo [N1]. Un término más descriptivo sería «ordinal». El segundo problema es más significativo. El nombre  SerialDate  implica una implementación. Esta clase es abstracta. No es necesario que implique nada sobre la implementación; de hecho, es aconsejable ocultarla. Por ello, creo que el nombre se encuentra en un nivel de abstracción incorrecto [N2]. En mi opinión, el nombre de esta clase debería ser simplemente  Date . Desafortunadamente, hay demasiadas clases con el nombre  Date  en la biblioteca de Java, de modo que no es el más adecuado. Como esta clase trabaja con días y no horas, podríamos usar  Day , pero ya se usa en otros muchos puntos. Al final, opté por  DayDate  como mejor opción. A partir de ahora, usaremos  DayDate . Recuerde que los listados que va a leer siguen usando  SerialDate . Entiendo porque  DayDate  se hereda de  Comparable  y  Serializable . ¿Pero de  MonthConstants ? La clase  MonthConstants  (véase el Listado  B-3) es una serie de constantes finales estáticas que definen los meses. Heredar de clases con constantes es un viejo truco que los programadores de Java usan para evitar expresiones como  MonthConstants.January , pero es una mala idea [J2].  MonthConstants  debería ser una enumeración. public abstract class DayDate implements Comparable, Serializable { public static enum Month { JANUARY(1), FEBRUARY(2), MARCH(3), APRIL(4), MAY(5), JUNE(6), JULY(7), AUGUST(8), SEPTEMBER(9), OCTOBER(10), NOVEMBER(11), DECEMBER(12); 342