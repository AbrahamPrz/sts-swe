ya tenemos suficientes codificaciones como para tener que añadir otras nuevas. al codificar información de tipos o ámbitos en un nombre se dificulta la descodificación. no parece razonable que todos los nuevos empleados tengan que aprender otro lenguaje de codificación además del código con el que van a trabajar. es una carga mental innecesaria a la hora de intentar solucionar un problema. los nombres codificados resultan impronunciables y suelen escribirse de forma incorrecta. notación húngara antiguamente, cuando trabajábamos con lenguajes en los que la longitud de los nombres era un reto, incumplíamos esta regla a nuestro pesar. fortran forzaba las codificaciones convirtiendo la primera letra de un tipo en código. en sus primeras versiones, basic sólo se permitía una letra y un dígito. la notación húngara (hn) lo llevó a un nuevo nivel. hn se consideraba muy importante en el api c de windows, donde todo era un control entero, un puntero long , un puntero void o una de varias implementaciones de string (con diferentes usos y atributos). por aquel entonces, el compilador no comprobaba los tipos, de modo que los programadores tenían que recordarlos. en los lenguajes modernos disponemos de sistemas de tipos más completos y los compiladores recuerdan los tipos y los aplican. es más, existe una tendencia a usar clases y funciones más breves para que los usuarios aprecien la declaración de las variables que usan. los programadores de java no tienen que codificar tipos. los objetos son de tipos fuertes y los entornos de edición han avanzado tanto que detectan un error de tipo antes de ejecutar la compilación. por ello, en la actualidad hn y otras formas de codificación de tipos no son más que un impedimento. hacen que sea más complicado cambiar el nombre o el tipo de una variable o clase. dificultan la legibilidad del código y pueden hacer que el sistema de codificación confunda al lector: phonenumber phonestring; // el nombre no cambia cuando cambia el tipo 49