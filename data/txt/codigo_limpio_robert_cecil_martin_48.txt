Ya tenemos suficientes codificaciones como para tener que añadir otras nuevas. Al codificar información de tipos o ámbitos en un nombre se dificulta la descodificación. No parece razonable que todos los nuevos empleados tengan que aprender otro lenguaje de codificación además del código con el que van a trabajar. Es una carga mental innecesaria a la hora de intentar solucionar un problema. Los nombres codificados resultan impronunciables y suelen escribirse de forma incorrecta. Notación húngara Antiguamente, cuando trabajábamos con lenguajes en los que la longitud de los nombres era un reto, incumplíamos esta regla a nuestro pesar. Fortran forzaba las codificaciones convirtiendo la primera letra de un tipo en código. En sus primeras versiones, BASIC sólo se permitía una letra y un dígito. La notación húngara (HN) lo llevó a un nuevo nivel. HN se consideraba muy importante en el API C de Windows, donde todo era un control entero, un puntero  long , un puntero  void  o una de varias implementaciones de  string  (con diferentes usos y atributos). Por aquel entonces, el compilador no comprobaba los tipos, de modo que los programadores tenían que recordarlos. En los lenguajes modernos disponemos de sistemas de tipos más completos y los compiladores recuerdan los tipos y los aplican. Es más, existe una tendencia a usar clases y funciones más breves para que los usuarios aprecien la declaración de las variables que usan. Los programadores de Java no tienen que codificar tipos. Los objetos son de tipos fuertes y los entornos de edición han avanzado tanto que detectan un error de tipo antes de ejecutar la compilación. Por ello, en la actualidad HN y otras formas de codificación de tipos no son más que un impedimento. Hacen que sea más complicado cambiar el nombre o el tipo de una variable o clase. Dificultan la legibilidad del código y pueden hacer que el sistema de codificación confunda al lector: PhoneNumber phoneString; // el nombre no cambia cuando cambia el tipo 49