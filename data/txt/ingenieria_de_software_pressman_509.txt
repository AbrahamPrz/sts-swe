478capítulo 21modelado y verificación formal conceptos clave  certificación . . . . . . . . . . . . 487 diseño de cuarto limpio . . . . 483especificación de estructura de caja . . . . . . . . . . . . . . . . 479 especificación funcional . . . . 480lenguaje de especificación z . . . . . . . . . . . . . . . . . . . . 495 lenguaje de restricción de objeto (ocl). . . . . . . . . . 492 lenguajes de especificación formal . . . . . . . . . . . . . . . . 492 modelo de proceso de cuarto limpio. . . . . . . . . . . . . . . . . 480 refinamiento de diseño . . . . 483verificación de exactitud . . . 479 ¿qué es? ¿cuántas veces ha escuchado a alguien decir “hazlo bien desde la primera vez”? si esto se lograra en el software, habría considerablemente menos esfuerzo empleado en lo innecesario. dos métodos avanzados de ingeniería del software (ingeniería del software de cuarto limpio y métodos formales) ayudan al equipo de software a “hacer-lo bien desde la primera vez” al proporcionar un enfoque basado en matemáticas para programar el modelado y la capacidad de verificar que el modelo es correcto. la inge-niería del software de cuarto limpio enfatiza la verificación matemática de la exactitud antes de que comience la cons-trucción del programa y la certificación de la confiabilidad del software como parte de la actividad de prueba. los métodos formales usan teoría de conjuntos y notación lógica para crear un enunciado claro de los hechos (reque-rimientos) que pueden analizarse para mejorar (o incluso probar) la exactitud y la consistencia. la línea de base para ambos métodos es la creación de software con tasas de falla extremadamente bajas. ¿quién lo hace? un ingeniero del software especialmente capacitado. ¿por qué es importante? los errores obligan a que haya revisiones. las revisiones toman tiempo y aumentan los costos. ¿no sería bueno si pudiera reducir dramáticamen-te el número de errores (bugs) introducidos mientras el software se diseña y construye? ésa es la premisa del modelado y de la verificación formales. ¿cuáles son los pasos? los modelos de requerimientos y de diseño se crean usando notación especializada que es susceptible de verificación matemática. la ingeniería de software de cuarto limpio usa representación de estructura de cajas que encapsulan el sistema (o algún aspecto del mismo) en un nivel específico de abstracción. la verifica-ción de la exactitud se aplica cuando está completo el diseño de la estructura de caja. una vez verificada la exactitud para cada estructura de caja, comienza la prue-ba de uso estadístico. los métodos formales traducen los requerimientos de software en una representación más formal al aplicar la notación y la heurística de conjuntos a fin de definir el invariante de datos, estados y operaciones para una función de sistema. ¿cuál es el producto final? se desarrolla un modelo for- mal especializado de requerimientos. se registran los re-sultados de las pruebas de exactitud y de uso estadístico. ¿cómo me aseguro de que lo hice bien? la prueba de exactitud formal se aplica al modelo de requerimientos. la prueba de uso estadístico ejercita los escenarios de uso para garantizar que se descubren y corrigen los errores en la funcionalidad del usuario. una mirada  rápidaa diferencia de las revisiones y pruebas que comienzan una vez desarrollados los mode- los y códigos de software, el modelado y la verificación formales incorporan métodos de modelado especializados que se integran con enfoques de verificación prescritos. sin el enfoque de modelado adecuado, la verificación no puede lograrse. en este capítulo se analizan dos métodos de modelado y verificación formales: el método de ingeniería del software de cuarto limpio y los métodos formales. ambos requieren un enfoque de especificación especializado y cada uno aplica un método de verificación único. los dos son bastante rigurosos y la comunidad de ingeniería del software no usa ninguno de ellos amplia-mente. pero si intenta construir software a prueba de balas, dichos métodos pueden ayudarle de manera inconmensurable. vale la pena aprenderlos. la ingeniería del software de cuarto limpio es un enfoque que enfatiza la necesidad de construir con exactitud el software conforme éste se desarrolla. en lugar de análisis, diseño, código, prueba y ciclo de depuración clásicos, el enfoque de cuarto limpio sugiere un punto de vista diferente [lin94b]: la filosofía que hay detrás de la ingeniería del software de cuarto limpio consiste en evitar la depen- dencia de costosos procesos de remoción de defectos, al escribir incrementos de código justo la pri-mera vez y verificar su exactitud antes de examinarlo. su modelo de proceso incorpora la certificación de calidad estadística de los incrementos de código conforme se acumulan en un sistema. 21pressman(478-500).indd  47821pressman(478-500).indd  478 19/1/10  12:43:2019/1/10  12:43:20