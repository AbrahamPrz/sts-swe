independiente, pero debe establecerlas de forma conjunta como operación atómica. el listado 6-1, por su parte, se implementa claramente en coordenadas rectangulares y nos obliga a manipularlas de forma independiente, lo que muestra la implementación. de hecho, la mostraría igualmente, aunque las variables fueran privadas y usáramos métodos variables de establecimiento y recuperación. para ocultar la implementación no basta con añadir una capa de funciones entre las variables. se basa en la abstracción. una clase no fuerza sus variables a través de métodos de establecimiento y recuperación. por el contrario, muestra interfaces abstractas que permiten a sus usuarios manipular la esencia de los datos sin necesidad de conocer su implementación. fíjese en los listados 6-3 y 6-4. el primero usa términos concretos para indicar el nivel de combustible de un vehículo mientras que el segundo lo hace con la abstracción del porcentaje. en el caso concreto, podemos estar seguros de que se trata de métodos de acceso de variables. en el caso abstracto, desconocemos la forma de los datos. listado 6-3 vehículo concreto. public interface vehicle { double getfueltankcapacityingallons(); double getgallonsofgasoline(); } listado 6-4 vehículo abstracto. public interface vehicle { double getpercentfuelremaining(); } en ambos casos, la segunda opción es preferible. no queremos mostrar los detalles de los datos, sino expresarlos en términos abstractos. esto no se consigue simplemente mediante interfaces o métodos de establecimiento y recuperación. hay que meditar seriamente la forma óptima de representar los datos que contiene un objeto. la peor opción es añadir métodos de 136