capítulo 25 métricas de proceso y de proyecto 583 pueden usarse para calcular la eficiencia de remoción de defecto (erd) para cada actividad de marco conceptual del proceso. la erd se estudia en la sección 25.3.3. 25.3.1  medición de la calidad aunque existen muchas medidas de calidad del software,8 la exactitud, capacidad de manteni- miento, integridad y usabilidad proporcionan útiles indicadores para el equipo del proyecto. gilb [gil88] sugiere definiciones y medidas para cada una. exactitud. un programa debe operar correctamente o proporcionará poco valor a sus usuarios. la exactitud es el grado en el cual el software realiza la función requerida. la me-dida más común de la exactitud son los defectos por kloc, donde un defecto se define como una falta verificada de acuerdo con los requerimientos. cuando se considera la cali-dad global de un producto de software, los defectos son aquellos problemas reportados por un usuario del programa después de que el programa se liberó para su uso general. con propósitos de valoración de calidad, los defectos se cuentan sobre un periodo estándar, por lo general un año. capacidad de mantenimiento. el mantenimiento y soporte del software representan más esfuerzo que cualquiera otra actividad de ingeniería del software. la capacidad de manteni- miento es la facilidad con la que un programa puede corregirse si se encuentra un error, la facilidad con que se adapta si su entorno cambia o de mejorar si el cliente quiere un cambio en requerimientos. no hay forma de medir directamente la capacidad de mantenimiento; por tanto, deben usarse medidas indirectas. una métrica simple orientada a tiempo es el tiempo medio al cambio (tmc), el tiempo que tarda en analizarse la petición de cambio, di-señar una modificación adecuada, implementar el cambio, probarlo y distribuirlo a todos los usuarios. en promedio, los programas con capacidad de mantenimiento tendrán un tmc más bajo (para tipos de cambios equivalentes) que los que no tienen dicha capacidad. integridad. la integridad del software se ha vuelto cada vez más importante en la era de los ciberterroristas y hackers. este atributo mide la habilidad de un sistema para resistir ataques (tanto accidentales como intencionales) a su seguridad. los ataques pueden ha-cerse en los tres componentes de software: programas, datos y documentación. para medir la integridad, deben definirse dos atributos adicionales: amenaza y seguri- dad. amenaza es la probabilidad (que puede estimarse o derivarse de evidencia empírica) de que un ataque de un tipo específico ocurrirá dentro de un tiempo dado. seguridad es la probabilidad (que puede estimarse o derivarse de evidencia empírica) de que el ataque de un tipo específico se repelerá. la integridad de un sistema puede definirse entonces como: integridad /h11005 /h20858[1 /h11002 (amenaza /h11003 (1 /h11002 seguridad))]por ejemplo, si la amenaza (la probabilidad de que un ataque ocurrirá) es de 0.25 y la segu- ridad (la probabilidad de repeler un ataque) es de 0.95, la integridad del sistema es 0.99 (muy alta). si, por otra parte, la probabilidad de amenaza es 0.50 y la probabilidad de repe-ler un ataque es de solamente 0.25, la integridad del sistema es 0.63 (inaceptablemente baja). usabilidad. si un programa no es fácil de usar, con frecuencia está condenado al fracaso, incluso si las funciones que realiza son valiosas. la usabilidad es un intento por cuantificar la facilidad de uso y puede medirse en términos de las características que se presentaron en el capítulo 11. 8 en el capítulo 23 se presentó un análisis detallado de los factores que influyen en la calidad y en las métricas del software que pueden usarse para valorar la calidad del software.webref una excelente fuente de información acerca de la calidad del software y sobre temas relacionados (incluidas métricas) puede encontrarse en www.qualityworld.com 25pressman(571-592).indd  58325pressman(571-592).indd  583 19/1/10  23:39:5619/1/10  23:39:56