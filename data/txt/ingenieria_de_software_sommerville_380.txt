Lineamiento 8: Nombrar todas las constantes que representan  valores del mundo real Todos los programas no triviales incluyen un número de valores constantes que represen- tan los valores de entidades del mundo real. Dichos valores no se modifican conforme se ejecuta el programa. En ocasiones, se trata de constantes absolutas que nunca cambian (por ejemplo, la velocidad de vuelo), sino que con más frecuencia son valores que cam-bian con relativa lentitud en el tiempo. Por ejemplo, un programa para calcular impuestos personales incluirá constantes que son las tasas impositivas actuales. Esto cambia de un año a otro y, por consiguiente, el programa debe actualizarse con los nuevos valores constantes. Siempre se debería incluir en el programa una sección donde se mencionen todos los valores constantes que se usan del mundo real. Cuando se utilizan las constantes, hay que referirse a éstas por sus nombres y no por su valor. Esto tiene dos ventajas, en cuanto concierne a la confiabilidad: 1. Existe menos probabilidad de cometer errores y de usar el valor equivocado. Es fácil  escribir mal un número y el sistema con frecuencia no podrá detectar un error. Por ejem-plo, suponga que una tasa fiscal es del 34 por ciento. Un error de transposición simple llevaría a que esto se escribiera mal como 43 por ciento. Sin embargo, si se escribe mal un nombre (como el de tasa fiscal estándar), esto usualmente lo detecta el compilador como una variable sin declarar. 2. Cuando cambia un valor, no hay que buscar a través de todo el programa para des-cubrir dónde tiene que usar dicho valor. Todo lo que se necesita es cambiar el valor asociado con la declaración constante. Entonces, el nuevo valor se incluye automá-ticamente en todas las partes donde se necesite. PUNTOS CLAVE ■ La confiabilidad en un programa puede lograrse al evitar la introducción de fallas, al detectar  y eliminar éstas antes de la implementación del sistema, y al incluir mecanismos de tolerancia a fallas que permitan al sistema permanecer operacional después de que una falla en el desarrollo causó una falla en la operación del sistema. ■ El empleo de redundancia y diversidad en el hardware, los procesos de software y los sistemas de software es esencial para el desarrollo de sistemas confiables. ■ El uso de un proceso repetible bien definido es esencial si las fallas en un sistema tienen que minimizarse. El proceso debe incluir en todas las etapas actividades de verificación y validación, desde la definición de requerimientos hasta la implementación del sistema. ■ Las arquitecturas de sistema confiable son aquellas que se diseñan para tolerancia a fallas. Existen algunos estilos arquitectónicos que soportan tolerancia a fallas e incluyen sistemas de protección, arquitecturas de automonitorización y programación de n-versión. ■ La diversidad de software es difícil de lograr, ya que es prácticamente imposible garantizar que cada versión del software sea en verdad independiente.Capítulo 13 ■ Puntos clave  363 M13_SOMMERVILLE_INGENIERIA_1ED_SE_341-365.indd   363M13_SOMMERVILLE_INGENIERIA_1ED_SE_341-365.indd   363 3/18/11   4:59:14 PM3/18/11   4:59:14 PM