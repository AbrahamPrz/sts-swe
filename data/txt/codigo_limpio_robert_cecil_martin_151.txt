excepciones. mencione la operación fallida y el tipo de fallo. si guarda registros en su aplicación, incluya información suficiente para poder registrar el error en la cláusula catch . definir clases de excepción de acuerdo a las necesidades del invocador existen varias formas de clasificar los errores. podemos hacerlo por origen (¿provienen de uno u otro componente?) o por tipo (¿son fallos del dispositivo, de la red o errores de programación?). sin embargo, al definir clases de excepción en una aplicación, debemos preocuparnos principalmente en cómo se capturan . veamos un pobre ejemplo de clasificación de excepciones. es una instrucción try-catch-finally de la invocación de una biblioteca de terceros. abarca todas las excepciones que las invocaciones pueden generar: acmeport port = new acmeport(12); try { port.open(); } catch (deviceresponseexception e) { reportporterror(e); logger.log{“device response exception”, e); } catch (atm1212unlockedexception e) { reportporterror(e); logger.log(“unlock exception”, e); } catch (gmxerror e) { reportporterror(e); logger.log(“device response exception”); } finally { … } esta instrucción contiene elementos duplicados, algo que no debería sorprendernos. en muchos casos de control de excepciones, el trabajo que realizamos es relativamente estándar independientemente de la causa real. debemos registrar un error y asegurarnos de poder continuar. en este caso, como sabemos que el trabajo es el mismo independientemente de la excepción, podemos simplificar el código si incluimos la api invocada y nos aseguramos de que devuelve un tipo de 152