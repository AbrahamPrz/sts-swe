2.2 ■ actividades del proceso 41 y dejan hasta el último los componentes familiares, porque saben cómo diseñarlos. a algunos desarrolladores les agrada definir con anticipación datos en el proceso, que luego usan para impulsar el desarrollo del programa; otros dejan datos sin especificar tanto como sea posible. por lo general, los programadores realizan algunas pruebas del código que desarrolla-ron. esto revela con frecuencia defectos del programa que deben eliminarse del programa. a esta actividad se le llama depuración ( debugging). la prueba de defectos y la depuración son procesos diferentes. la primera establece la existencia de defectos, en tanto que la segunda se dedica a localizar y corregir dichos defectos. cuando se depura, uno debe elaborar una hipótesis sobre el comportamiento observable del programa y, luego, poner a prueba dichas hipótesis con la esperanza de encontrar la falla que causó la salida anómala. poner a prueba las hipótesis quizá requiera rastrear manual-mente el código del programa; o bien, tal vez se necesiten nuevos casos de prueba para localizar el problema. con la finalidad de apoyar el proceso de depuración, se deben utilizar herramientas interactivas que muestren valores intermedios de las variables del programa, así como el rastro de las instrucciones ejecutadas. 2.2.3 validación de software la validación de software o, más generalmente, su verificación y validación (v&v), se crea para mostrar que un sistema cumple tanto con sus especificaciones como con las expectativas del cliente. las pruebas del programa, donde el sistema se ejecuta a través de datos de prueba simulados, son la principal técnica de validación. esta última también puede incluir procesos de comprobación, como inspecciones y revisiones en cada etapa del proceso de software, desde la definición de requerimientos del usuario hasta el desa-rrollo del programa. dada la predominancia de las pruebas, se incurre en la mayoría de los costos de validación durante la implementación y después de ésta. con excepción de los programas pequeños, los sistemas no deben ponerse a prueba como una unidad monolítica. la figura 2.6 muestra un proceso de prueba en tres etapas, donde los componentes del sistema se ponen a prueba; luego, se hace lo mismo con el sistema integrado y, finalmente, el sistema se pone a prueba con los datos del cliente. de manera ideal, los defectos de los componentes se detectan oportunamente en el proceso, en tanto que los problemas de interfaz se localizan cuando el sistema se integra. sin embargo, conforme se descubran los defectos, el programa deberá depurarse y esto quizá requiera la repetición de otras etapas en el proceso de pruebas. los errores en los compo-nentes del programa pueden salir a la luz durante las pruebas del sistema. en consecuen-cia, el proceso es iterativo, con información retroalimentada desde etapas posteriores hasta las partes iniciales del proceso. las etapas en el proceso de pruebas son: 1. prueba de desarrollo las personas que desarrollan el sistema ponen a prueba los componentes que constituyen el sistema. cada componente se prueba de manera independiente, es decir, sin otros componentes del sistema. éstos pueden ser simples prueba de componentesprueba del sistemaprueba de aceptación figura 2.6 etapas de pruebas m02_sommerville_ingenieria_1ed_se_027-055.indd  41m02_sommerville_ingenieria_1ed_se_027-055.indd  41 3/18/11  4:45:31 pm3/18/11  4:45:31 pm