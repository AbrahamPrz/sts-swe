8.2 ■ desarrollo dirigido por pruebas 221 desde luego, en la figura 8.8 se simplificó el diagrama de secuencia para que no muestre excepciones. asimismo, una prueba completa de caso/escenario de uso consi-dera esto y garantiza que los objetos manejen adecuadamente las excepciones. para la mayoría de sistemas es difícil saber cuántas pruebas de sistemas son esencia-les y cuándo hay que dejar de hacer pruebas. las pruebas exhaustivas, donde se pone a prueba cada secuencia posible de ejecución del programa, son imposibles. por lo tanto, las pruebas deben basarse en un subconjunto de probables casos de prueba. de manera ideal, para elegir este subconjunto, las compañías de software cuentan con políticas, las cuales pueden basarse en políticas de prueba generales, como una política de que todos los enunciados del programa se ejecuten al menos una vez. como alternativa, pueden basarse en la experiencia de uso de sistema y, a la vez, enfocarse en probar las caracterís-ticas del sistema operativo. por ejemplo: 1. tienen que probarse todas las funciones del sistema que se ingresen a través de un menú. 2. debe experimentarse la combinación de funciones (por ejemplo, formateo de texto) que se ingrese por medio del mismo menú. 3. donde se proporcione entrada del usuario, hay que probar todas las funciones, ya sea con entrada correcta o incorrecta. por experiencia con los principales productos de software, como procesadores de texto u hojas de cálculo, es claro que lineamientos similares se usan por lo general durante la prueba del producto. usualmente funcionan cuando las características del software se usan en aislamiento. los problemas se presentan, dice whittaker (2002), cuando las com-binaciones de características de uso menos común no se prueban en conjunto. él da el ejemplo de cómo, en un procesador de texto de uso común, el uso de notas al pie de página con una plantilla en columnas múltiples causa la distribución incorrecta del texto. las pruebas automatizadas del sistema suelen ser más difíciles que las pruebas auto-matizadas de unidad o componente. las pruebas automatizadas de unidad se apoyan en la predicción de salidas y, luego, en la codificación de dichas predicciones en un pro-grama. en tal caso, se compara el pronóstico con el resultado. sin embargo, el punto de aplicar un sistema puede ser generar salidas que sean grandes o no logren predecirse con facilidad. se tiene que examinar una salida y demostrar su credibilidad sin crearla nece-sariamente por adelantado. 8.2 desarrollo dirigido por pruebas el desarrollo dirigido por pruebas (tdd, por las siglas de test-driven development) es un enfoque al diseño de programas donde se entrelazan el desarrollo de pruebas y el de código (beck, 2002; jeffries y melnik, 2007). en esencia, el código se desarrolla incre-mentalmente, junto con una prueba para ese incremento. no se avanza hacia el siguiente incremento sino hasta que el código diseñado pasa la prueba. el desarrollo dirigido por pruebas se introdujo como parte de los métodos ágiles como la programación extrema. no obstante, se puede usar también en los procesos de desarrollo basados en un plan. m08_sommerville_ingenieria_1ed_se_205-233.indd  221m08_sommerville_ingenieria_1ed_se_205-233.indd  221 3/18/11  5:40:00 pm3/18/11  5:40:00 pm