CAPÍTULO 18  PRUEBA DE APLICACIONES CONVENCIONALES 423  18.6 P RUEBAS  DE CAJA  NEGRA Las pruebas de caja negra, también llamadas pruebas de comportamiento, se enfocan en los re- querimientos funcionales del software; es decir, las técnicas de prueba de caja negra le permiten  derivar conjuntos de condiciones de entrada que revisarán por completo todos los requerimien-tos funcionales para un programa. Las pruebas de caja negra no son una alternativa para las técnicas de caja blanca. En vez de ello, es un enfoque complementario que es probable que descubra una clase de errores diferente que los métodos de caja blanca. Las pruebas de caja negra intentan encontrar errores en las categorías siguientes: 1) funcio- nes incorrectas o faltantes, 2) errores de interfaz, 3) errores en las estructuras de datos o en el acceso a bases de datos externas, 4) errores de comportamiento o rendimiento y 5) errores de inicialización y terminación. A diferencia de las pruebas de caja blanca, que se realizan tempranamente en el proceso de  pruebas, la prueba de caja negra tiende a aplicarse durante las últimas etapas de la prueba (vea el capítulo 17). Puesto que, a propósito, la prueba de caja negra no considera la estructura de control, la atención se enfoca en el dominio de la información. Las pruebas se diseñan para responder a las siguientes preguntas: • ¿Cómo se prueba la validez funcional? • ¿Cómo se prueban el comportamiento y el rendimiento del sistema? • ¿Qué clases de entrada harán buenos casos de prueba? • ¿El sistema es particularmente sensible a ciertos valores de entrada? • ¿Cómo se aíslan las fronteras de una clase de datos? • ¿Qué tasas y volumen de datos puede tolerar el sistema? • ¿Qué efecto tendrán sobre la operación del sistema algunas combinaciones específicas  de datos? Al aplicar las técnicas de caja negra, se deriva un conjunto de casos de prueba que satisfacen los siguientes criterios [Mye79]: 1) casos de prueba que reducen, por una cuenta que es mayor que uno, el número de casos de prueba adicionales que deben diseñarse para lograr pruebas razonables y 2) casos de prueba que dicen algo acerca de la presencia o ausencia de clases de errores, en lugar de un error asociado solamente con la prueba específica a mano. 18.6.1  Métodos de prueba basados en gráficos El primer paso en la prueba de caja negra es entender los objetos5 que se modelan en software  y las relaciones que conectan a dichos objetos. Una vez logrado esto, el siguiente paso es definir una serie de pruebas que verifiquen “que todos los objetos tengan la relación mutua esperada” [Bei95]. Dicho de otra forma, la prueba de software comienza con la creación de un gráfico de objetos importantes y sus relaciones, y luego diseña una serie de pruebas que cubrirán el gráfico, de modo que cada objeto y relación se revise y se descubran errores. Para lograr estos pasos, comience por crear un gráfico: una colección de nodos que represen- ten objetos, enlaces que representen las relaciones entre objetos, nodos ponderados  que descri- ban las propiedades de un nodo (por ejemplo, un valor de datos o comportamiento de estado específicos) y enlaces ponderados que describan alguna característica de un enlace. En la figura 18.8a) se muestra la representación simbólica de un gráfico. Los nodos se repre- sentan como círculos conectados mediante ligas que tienen algunas formas diferentes. Un en-Cita: “Errar es humano, pero encon- trar un error es divino.” Robert Dunn ¿Qué preguntas  responden las pruebas de caja negra?? PUNTO CLAVE Una gráfica representa las relaciones entre objetos datos y objetos programa, lo que permite derivar casos de prueba que buscan errores asociados con dichas relaciones. 5 En este contexto, debe considerar el término objetos en el contexto más amplio posible. Abarca objetos de datos,  componentes tradicionales (módulos) y elementos orientados a objeto del software de cómputo. 18Pressman(411-436).indd   42318Pressman(411-436).indd   423 21/1/10   10:58:5721/1/10   10:58:57