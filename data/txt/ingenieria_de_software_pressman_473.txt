442 parte tres administración de la calidad 19.3.2 prueba de integración en el contexto oo puesto que el software orientado a objetos no tiene una estructura de control jerárquica, las estrategias de integración tradicionales, descendente y ascendente, tienen poco significado. además, integrar operaciones una a la vez en una clase (el enfoque de integración incremental convencional) con frecuencia es imposible debido a las “interacciones directas e indirectas de los componentes que constituyen la clase” [ber93]. existen dos diferentes estrategias para la prueba de integración de los sistemas oo [bin94a]. la primera, prueba basada en hebra, integra el conjunto de clases requeridas para responder a una entrada o evento del sistema. cada hebra se integra y prueba de manera individual. la prueba de regresión se aplica para asegurar que no ocurran efectos colaterales. el segundo enfoque de integración, prueba basada en uso, comienza la construcción del sistema al probar aquellas clases (llamadas independientes) que usan muy pocas clases de servidor (si es que em- plean alguna). después de probar las clases independientes, se examina la siguiente capa de clases que usan las clases independientes, llamadas dependientes. esta secuencia de pruebas para las capas de clases dependientes continúa hasta que se construye todo el sistema. a dife-rencia de la integración convencional, cuando sea posible debe evitarse el uso de controladores y representantes (proxies) (capítulo 18) como operaciones de reemplazo. la prueba de grupo [mcg94] es un paso en la prueba de integración del software oo. en ella, se ejercita un grupo de clases colaboradoras (determinadas al examinar el crc y el mode-lo objeto-relación) al diseñar casos de prueba que intentan descubrir errores en las colabora-ciones. 19.3.3 prueba de validación en un contexto oo en el nivel de validación o de sistema, desaparecen los detalles de las conexiones de clase. como la validación convencional, la del software oo se enfoca en las acciones visibles para el usuario y en las salidas del sistema reconocibles por él mismo. para auxiliar en la derivación de pruebas de validación, el examinador debe recurrir a casos de uso (capítulos 5 y 6) que sean parte del modelo de requerimientos. el caso de uso proporciona un escenario que tiene una alta probabilidad de descubrir errores en los requerimientos de interacción de usuario. los métodos convencionales de prueba de caja negra (capítulo 18) pueden usarse para acti- var pruebas de validación. además, puede elegirse derivar casos de prueba del modelo de com-portamiento del objeto y de un diagrama de flujo de evento creado como parte del aoo. 19.4 m étodos de prueba orientada a objetos la arquitectura del software orientado a objetos da como resultado una serie de subsistemas en capas que encapsulan clases colaboradoras. cada uno de estos elementos de sistema (subsis-temas y clases) realiza funciones que ayudan a lograr requerimientos de sistema. es necesario probar un sistema oo en varios niveles diferentes con la intención de descubrir errores que puedan ocurrir conforme las clases colaboran unas con otras y conforme los subsistemas se comunican a través de las capas arquitectónicas. los métodos de diseño de casos de prueba para el software orientado a objetos siguen evo- lucionando. sin embargo, berard [ber93] sugiere un enfoque global en el diseño de casos de prueba oo: 1. cada caso de prueba debe identificarse de manera única y explícita asociado con la clase que se va a probar . 2. debe establecerse el propósito de la prueba.punto clave la prueba de integración para software oo examina un conjunto de clases que se requieren para responder a un evento dado. cita: “veo a los examinadores como los guardaespaldas del proyec-to. defendemos del fallo el flanco de nuestros desarrollado-res, mientras ellos se enfocan en crear éxito.” james bach 19pressman(437-452).indd  44219pressman(437-452).indd  442 21/1/10  10:58:3321/1/10  10:58:33