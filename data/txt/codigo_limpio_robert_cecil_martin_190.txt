multipropósito de mayor tamaño nos obliga a buscar entre numerosos elementos que no siempre necesitamos conocer. para reformular los puntos anteriores, diremos que los sistemas deben estar formados por muchas claves reducidas, no por algunas de gran tamaño. cada clase reducida encapsula una única responsabilidad, tiene un solo motivo para cambiar y colabora con algunas otras para obtener los comportamientos deseados del sistema. cohesión las clases deben tener un número reducido de variables de instancia. los métodos de una clase deben manipular una o varias de dichas variables. por lo general, cuantas más variables manipule un método, más cohesión tendrá con su clase. una clase en la que cada variable se usa en cada método tiene una cohesión máxima. por lo general, no es recomendable ni posible crear este tipo de clases pero queremos que la cohesión de nuestras clases sea elevada. si lo logramos, significa que los métodos y variables de la clase dependen unos de otros y actúan como un todo lógico. fíjese en la implementación de stack en el listado 10-4. es una clase muy consistente. de los tres métodos, sólo size() no usa ambas variables. listado 10-4 stack.java, una clase consistente. public class stack { private int topofstack = 0; list<integer> elements = new linkedlist<integer>(); public int size() { return topofstack; } public void push(int element) { topofstack++; elements.add(element); } public int pop() throws poppedwhenempty { 191