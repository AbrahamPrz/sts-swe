} private void parseschemaelement(string element) throws parseexception { char elementid = element.charat(0); string elementtail = element.substring(1); validateschemaelementid(elementid); if (isbooleanschemaelement(elementtail)) parsebooleanschemaelement(elementid); else if (isstringschemaelement(elementtail)) parsestringschemaelement(elementid); } private void validateschemaelementid(char elementid) throws parseexception { if (!character.isletter(elementid)) { throw new parseexception( “bad character:” + elementid + “in args format: ” + schema, 0); } } private void parsestringschemaelement(char elementid) { stringargs.put(elementid, “”); } private boolean isstringschemaelement(string elementtail) { return elementtail.equals(“*”); } private boolean isbooleanschemaelement(string elementtail) { return elementtail.length() == 0; } private void parsebooleanschemaelement(char elementid) { booleanargs.put(elementid, false); } private boolean parsearguments() { for (currentargument = 0; currentargument < args.length; currentargument++) { string arg = args[currentargument]; parseargument(arg); } return true; } private void parseargument(string arg) { if (arg.startswith(“-”)) parseelements(arg); } private void parseelements(string arg) { for (int i = 1; i < arg.length(); i++) parseelement(arg.charat(i)); } 273