186 PARTE DOS  MODELADO  8.2 EL PROCESO  DE DISEÑO El diseño de software es un proceso iterativo por medio del cual se traducen los requerimientos  en un “plano” para construir el software. Al principio, el plano ilustra una visión holística del software. Es decir, el diseño se representa en un nivel alto de abstracción, en el que se rastrea directamente el objetivo específico del sistema y los requerimientos más detallados de datos, funcionamiento y comportamiento. A medida que tienen lugar las iteraciones del diseño, las mejoras posteriores conducen a niveles menores de abstracción. Éstos también pueden ras-trearse hasta los requerimientos, pero la conexión es más sutil. 8.2.1  Lineamientos y atributos de la calidad del software A través del proceso de diseño se evalúa la calidad de éste de acuerdo con la serie de revisiones técnicas que se estudia en el capítulo 15. McGlaughlin [McG91] sugiere tres características que funcionan como guía para evaluar un buen diseño: • Debe implementar todos los requerimientos explícitos contenidos en el modelo de requerimientos y dar cabida a todos los requerimientos implícitos que desean los partici-pantes. • Debe ser una guía legible y comprensible para quienes generan el código y para los que lo prueban y dan el apoyo posterior. • Debe proporcionar el panorama completo del software, y abordar los dominios de los datos, las funciones y el comportamiento desde el punto de vista de la implementación. En realidad, cada una de estas características es una meta del proceso de diseño. Pero, ¿cómo se logran? Lineamientos de la calidad. A fin de evaluar la calidad de una representación del diseño,  usted y otros miembros del equipo de software deben establecer los criterios técnicos de un buen diseño. En la sección 8.3 se estudian conceptos de diseño que también sirven como crite-La escena: El cubículo de Jamie, cuando el equi- po se prepara para traducir a diseño los requeri-mientos. Participantes: Jamie, Vinod y Ed, miembros del equipo de inge-niería de software para CasaSegura. La conversación:Jamie: Ustedes saben, Doug [el gerente del equipo] está obsesiona- do con el diseño. Tengo que ser honesto, lo que realmente amo es codificar. Denme C++ o Java y soy feliz. Ed: No… te gusta diseñar.Jamie: No me estás escuchando; codificar es lo mío.Vinod: Creo que Ed quiere decir que en realidad no es codificar lo  que te gusta; te gusta diseñar y expresarlo en código. El código es el lenguaje que usas para representar el diseño. Jamie: ¿Y qué tiene de malo?Vinod: El nivel de abstracción.Jamie: ¿Qué?Ed: Un lenguaje de programación es bueno para representar deta- lles tales como estructuras de datos y algoritmos, pero no es tan bueno para representar la arquitectura o la colaboración entre com-ponentes… algo así. Vinod: Y una arquitectura complicada arruina al mejor código.Jamie (piensa unos momentos): Entonces, dicen que no  puede representarse la arquitectura con código... eso no es cierto. Vinod: Claro que es posible implicar la arquitectura con el código,  pero en la mayor parte de lenguajes de programación, es muy difícil lograr un panorama rápido y amplio de la arquitectura con el análi-sis del código. Ed: Y eso es lo que queremos hacer antes de empezar a codificar.Jamie: Está bien, tal vez diseñar y codificar sean cosas distintas,  pero aún así me gusta más codificar.CASASEGURA Diseño versus codificación Cita: “…escribir un fragmento inteli- gente de código que funcione es una cosa; diseñar algo que dé apoyo a largo plazo a una empresa es otra muy diferente”. C. Ferguson 08Pressman(183-205).indd   18608Pressman(183-205).indd   186 14/1/10   14:31:0714/1/10   14:31:07