17.1 ■ Componentes y modelos de componentes  457  Los componentes tienen dos interfaces relacionadas, como se muestra en la figura  17.2. Dichas interfaces reflejan los servicios que proveen los componentes y los servicios que el componente requiere para ejecutarse correctamente:  La interfaz “proporciona” define los servicios que ofrece el componente. En esencia,  esta interfaz es el componente API. Define los métodos que puede solicitar el usuario  del componente. En un diagrama de componentes UML, la interfaz “proporciona” para un componente se indica mediante un círculo al final de una línea desde el icono del componente.  La interfaz “requiere” especifica qué servicios deben ofrecer otros componentes en  el sistema para que un componente opere correctamente. Si no están disponibles, entonces el componente no funcionará. Esto no compromete la independencia o el carácter implementable de un componente, porque la interfaz “requiere” no define cómo deben proporcionarse dichos servicios. En el UML, el símbolo para una inter-faz “requiere” es un semicírculo al final de una línea desde el icono del componente. Observe que los iconos de las interfaces “proporciona” y “requiere” pueden encajar como una articulación de rótula.  Para ilustrar estas interfaces, la figura 17.3 muestra un modelo de componente que se diseñó para recopilar e intercalar información desde un arreglo de sensores. Se ejecuta de manera autónoma para recopilar datos durante un cierto tiempo y, a petición, proporciona datos intercalados a un componente que lo solicite. La interfaz “proporciona” incluye méto-dos para agregar, remover, iniciar, detener y probar los sensores. El método report regresa los datos del sensor que se recopilaron, y el método listAll brinda información de los sen-sores unidos. Aunque esto no se muestra aquí, dichos métodos tienen parámetros asociados que especifican los identificadores del sensor, así como sus ubicaciones, etcétera. La interfaz “requiere” se usa para conectar el componente a los sensores. Supone que los sensores tienen una interfaz de datos, a los que se accede a través de sensorData, y Componente y objetos Los componentes se implementan con frecuencia en lenguajes orientados a objetos y, en algunos casos,  el acceso a la interfaz “proporciona” de un componente se realiza a través de solicitudes de método. Sin embargo, los componentes y las clases de objetos no son lo mismo. A diferencia de las clases de objetos, los componentes se implementan de manera independiente, no son tipos definidos, sino independientes del lenguaje y se basan en un modelo de componentes estándar. http://www.SoftwareEngineering-9.com/Web/CBSE/objects.html Interfaz Requiere Define los servicios que se necesitan ydeben proporcionarotros componentesInterfaz Proporciona Define los serviciosque ofreceel componentea otros  ComponenteFigura 17.2  Interfaces de componentes M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   457M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   457 3/18/11   5:03:05 PM3/18/11   5:03:05 PM