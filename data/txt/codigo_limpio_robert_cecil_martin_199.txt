abrir una clase, debemos corregir el diseño. ¿y si optamos por una solución como la del listado 10-10? los métodos públicos de interfaz definidos en sql en el listado 10-9 se refactorizan en sus propias variantes de la clase sql . los métodos privados, como valueslist , se mueven directamente a las posiciones necesarias. el comportamiento privado se reduce a un par de clases de utilidad: where y columnlist . listado 10-10 un grupo de clases cerradas. abstract public class sql { public sql(string table, column[] columns) abstract public string generate(); } public class createsql extends sql { public createsql(string table, column[] columns) @override public string generate() } public class selectsql extends sql { public selectsql(string table, column[] columns) @override public string generate() } public class insertsql extends sql { public selectsql(string table, column[] columns, object[] fields) @override public string generate() private string valueslist(object[] fields, final column[] columns) } public class selectwithcriteriasql extends sql { public selectwithcriteriasql( string table, column[] columns, criteria criteria) @override public string generate() } public class selectwithmatchsql extends sql { public selectwithmatchsql( string table, column[] columns, column column, string pattern) @override public string generate() } public class findbykeysql extends sql { public findbykeysql( string table, column[] columns, string keycolumn, string keyvalue) @override public string generate() } 200