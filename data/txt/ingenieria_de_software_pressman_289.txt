258 PARTE DOS  MODELADO esta razón que cuando se propone el empleo de un componente se aplica una secuencia de  acciones de desarrollo basadas en componentes. Calificación de componentes.  La calificación de componentes garantiza que un compo- nente candidato ejecute la función requerida, “encaje” en forma adecuada en el estilo arquitec- tónico (véase el capítulo 9) especificado para el sistema y tenga las características de calidad (rendimiento, confiabilidad, usabilidad) que se requieren para la aplicación. La descripción de la interfaz proporciona información útil sobre la operación y uso de un  componente de software , pero no toda la que se requiere para determinar si el componente  propuesto es en verdad capaz de reutilizarse con eficacia en una nueva aplicación. Entre los muchos factores que se consideran durante la calificación de un componente se encuentran los que se mencionan a continuación [Bro96]: • Aplicación de programación de la interfaz (API). • Herramientas de desarrollo e integración requeridas por el componente. • Requerimientos durante la puesta en marcha, incluidos el uso de recursos (como la  memoria de almacenamiento), sincronía o velocidad y protocolo de redes. • Requerimientos de servicio, incluidos interfaces del sistema operativo y apoyo de otros  componentes. • Características de seguridad, incluidos controles de acceso y protocolo de autentifica- ción. • Suposiciones incrustadas en el diseño, incluido el empleo de algoritmos, numéricos o  no, específicos. • Manejo de excepciones. Cada uno de estos factores es relativamente fácil de evaluar cuando se proponen componentes reutilizables desarrollados en la propia empresa. Si durante el desarrollo de un componente se aplican buenas prácticas de ingeniería de software, es posible responder las preguntas que están implícitas en la lista. Sin embargo, es mucho más difícil determinar los trabajos internos de los componentes comerciales separados (CCS) o de los adquiridos a terceras personas porque la única información disponible es la especificación de la interfaz en sí misma. Adaptación de componentes.  En la situación ideal, la ingeniería del dominio crea una bi- blioteca de componentes que se integra con facilidad en la arquitectura de una aplicación. La implicación de una “integración fácil” es que 1) se han implementado métodos consistentes de administración de recursos para todos los componentes que hay en la biblioteca; 2) para todos los componentes existen actividades comunes, tales como administración de datos, y 3) se han implementado de manera consistente interfaces dentro de la arquitectura y con el ambiente externo. En realidad, incluso si un componente ha sido calificado para el uso dentro de una aplicación  de arquitectura, surgen conflictos en una o más de las áreas mencionadas. Para evitar estos conflictos, en ocasiones se emplea una técnica de adaptación llamada en voltura de componentes  [Bro96]. Cuando un equipo de software tiene acceso total al diseño y código interno de un com-ponente (que con frecuencia no es el caso a menos que se utilicen componentes CCS de fuente abierta), se aplica la envoltura de caja blanca. Como su contraparte en las pruebas del software  (véase el capítulo 18), la envoltura de caja blanca estudia los detalles del procesamiento interno del componente y hace modificaciones en el nivel de código para eliminar cualquier conflicto. Se aplica la envoltura de caja gris cuando la biblioteca de componentes proporciona un lenguaje  de extensión del componente o API que permite que los conflictos se eliminen o se anulen. La envoltura de caja negra requiere la introducción de procesamiento previo y posterior en la inter-faz del componente para eliminar o anular los conflictos. Debe determinarse si se justifica el ¿Cuáles son los factores  que se consideran durante la calificación de componentes?? Además de evaluar si se justifica el costo de adaptación para la reutilización, también debe analizarse si es posible lograr la funcionalidad que se requiere de manera rentable.CONSEJO 10Pressman(234-264).indd   25810Pressman(234-264).indd   258 26/1/10   17:33:2426/1/10   17:33:24