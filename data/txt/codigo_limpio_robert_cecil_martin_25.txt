Acaba por ceder a las exigencias de los programadores y autoriza el gran cambio de diseño. Se selecciona un nuevo equipo. Todos quieren formar parte del nuevo equipo por ser un lienzo en blanco. Pueden empezar de cero y crear algo realmente bello, pero sólo los mejores serán elegidos para el nuevo equipo. Los demás deben continuar con el mantenimiento del sistema actual. Ahora los dos equipos compiten. El nuevo debe crear un sistema que haga lo que el antiguo no puede. Además, deben asumir los cambios que continuamente se aplican al sistema antiguo. La dirección no sustituirá el sistema antiguo hasta que el nuevo sea capaz de hacer todo lo que hace el antiguo. Esta competición puede durar mucho tiempo. Conozco casos de casi 10 años. Y cuando acaba, los miembros originales del equipo nuevo han desaparecido y los miembros actuales exigen un cambio de diseño del nuevo sistema porque es un desastre. Si ha experimentado alguna fase de esta historia, ya sabrá que dedicar tiempo a que el código sea correcto no sólo es rentable, es una cuestión de supervivencia profesional. Actitud ¿Alguna vez ha tenido que superar un desastre tan grave que ha tardado semanas en lo que normalmente hubiera tardado horas? ¿Ha visto un cambio que debería haberse realizado en una línea, aplicado en cientos de módulos distintos? Son síntomas demasiado habituales. ¿Por qué sucede en el código? ¿Por qué el código de calidad se transforma tan rápidamente en código incorrecto? Hay muchas explicaciones. Nos quejamos de que los requisitos cambian de forma que comprometen el diseño original, de que los plazos de entrega son demasiado exigentes para hacer las cosas bien. Culpamos a directores incompetentes, a usuarios intolerantes y a comerciales sin sentido. Pero la culpa, querido Dilbert, es nuestra. No somos profesionales. Puede que resulte duro escucharlo. ¿Cómo es posible que  seamos responsables  de tales desastres? ¿Qué pasa con los requisitos? ¿Y los plazos de entrega? ¿Y los directores incompetentes y los comerciales sin sentido? 26