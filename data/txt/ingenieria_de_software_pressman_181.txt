150 parte dos modelado 1. la inteligencia del sistema debe estar distribuida entr e las clases para enfren- tar mejor las necesidades del problema. toda aplicación contiene cierto grado de inteligencia, es decir, lo que el sistema sabe y lo que puede hacer. esta inteligencia se distribuye entre las clases de diferentes maneras. las clases “tontas” (aquellas que tie-nen pocas responsabilidades) pueden modelarse para que actúen como subordinadas de ciertas clases “inteligentes” (las que tienen muchas responsabilidades). aunque este enfoque hace directo el flujo del control en un sistema, tiene algunas desventajas: con- centra toda la inteligencia en pocas clases, lo que hace que sea más difícil hacer cam-bios, y tiende a que se requieran más clases y por ello más trabajo de desarrollo. si la inteligencia del sistema tiene una distribución más pareja entre las clases de una aplicación, cada objeto sabe algo, sólo hace unas cuantas cosas (que por lo general están bien identificadas) y la cohesión del sistema mejora. 17 esto facilita el manteni- miento del software y reduce el efecto de los resultados colaterales del cambio. para determinar si la inteligencia del sistema está distribuida en forma apropiada, deben evaluarse las responsabilidades anotadas en cada modelo de tarjeta crc índice a fin de definir si alguna clase tiene una lista demasiado larga de responsabilidades. esto indica una concentración de inteligencia. 18 además, las responsabilidades de cada clase deben tener el mismo nivel de abstracción. por ejemplo, entre las operaciones enlista-das para una clase agregada llamada revisarcuenta, un revisor anota dos responsabi-lidades: hacer el balance de la cuenta y eliminar comprobaciones concluidas. la primera operación (responsabilidad) implica un procedimiento matemático complejo y lógico. la segunda es una simple actividad de oficina. como estas dos operaciones no están en el mismo nivel de abstracción, eliminar comprobaciones concluidas debe colocarse den- tro de las responsabilidades de revisarentrada, clase que está incluida en la clase agregada revisarcuenta. 2. cada r esponsabilidad debe enunciarse del modo más general posible. este li- neamiento implica que las responsabilidades generales (tanto atributos como operacio-nes) deben residir en un nivel elevado de la jerarquía de clases (porque son generales y se aplicarán a todas las subclases). 3. la inf ormación y el comportamiento relacionado con ella deben residir dentro de la misma clase. esto logra el principio orientado a objetos llamado encapsula- miento. los datos y los procesos que los manipulan deben empacarse como una unidad cohesiva. 4. la inf ormación sobre una cosa debe localizarse con una sola clase, y no distri- buirse a través de muchas. una sola clase debe tener la responsabilidad de almace-nar y manipular un tipo específico de información. en general, esta responsabilidad no debe ser compartida por varias clases. si la información está distribuida, es más difícil dar mantenimiento al software y más complicado someterlo a prueba. 5. cuando sea apr opiado, las responsabilidades deben compartirse entre clases relacionadas. hay muchos casos en los que varios objetos relacionados deben tener el mismo comportamiento al mismo tiempo. por ejemplo, considere un juego de video que deba tener en la pantalla las clases siguientes: jugador, cuerpodeljugador, brazos- deljugador, piernasdeljugador y cabezadeljugador. cada una de estas clases tiene sus propios atributos (como posición, orientación, color y velocidad) y todas deben actuali- zarse y desplegarse a medida que el usuario manipula una palanca de juego. las res- 17 la cohesión es un concepto de diseño que se estudia en el capítulo 8. 18 en tales casos, puede ser necesario dividir la clase en una multiplicidad de ellas o completar subsistemas con el objeto de distribuir la inteligencia de un modo más eficaz. 06pressman(126-157).indd  15006pressman(126-157).indd  150 14/1/10  14:29:2114/1/10  14:29:21