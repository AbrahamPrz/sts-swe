código de producción. Sin estas pruebas de límites para facilitar la transición, podríamos conservar la versión antigua más tiempo del necesario. Usar código que todavía no existe Existe otro tipo de límite, que separa lo conocido de lo desconocido. En ocasiones, nuestro conocimiento del código parece desvanecerse. Lo que hay al otro lado del límite es desconocido (al menos por el momento). En ocasiones, decidimos no mirar más allá del límite. Hace años formé parte de un equipo de desarrollo de  software  para un sistema de comunicación por radio. Había un subsistema, el Transmisor, que apenas conocíamos y cuya interfaz todavía no se había diseñado. Como no queríamos quedarnos parados, comenzamos a trabajar alejándonos de la parte desconocida del código. Sabíamos perfectamente dónde acababa nuestro mundo y comenzaba el nuevo. Mientras avanzábamos, en ocasiones nos topábamos con este límite. Aunque la ignorancia ocultaba nuestra visión más allá del límite, sabíamos cómo queríamos que fuera la interfaz. Queríamos decirle al transmisor algo como lo siguiente: Ajustar el transmisor en la frecuencia proporcionada y emitir una representación analógica de los datos que provienen de este flujo. No sabíamos cómo hacerlo ya que todavía no se había diseñado la API. Por ello decidimos determinar después los detalles. Para no quedarnos bloqueados, definimos nuestra propia interfaz. Le dimos un nombre sencillo,  Transmitter . Le asignamos el método  transmit que aceptaba una frecuencia y un flujo de datos. Es la interfaz que deseábamos haber tenido. Lo mejor de escribir la interfaz que deseábamos haber tenido era que la controlábamos. Esto hace que el código cliente sea más legible y se ciña a los objetivos previstos. En la figura 8.1 se aprecia que aislamos las clases 166