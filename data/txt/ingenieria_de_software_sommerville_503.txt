486 capítulo 18 ■ ingeniería de software distribuido el camarero tiene una sola interacción con la cocina, donde el mensaje define la orden completa. la comunicación procedimental en un sistema distribuido se implementa con frecuen-cia usando solicitudes de procedimiento remoto (rpc, por las siglas de remote procedure calls). en rpc, un componente solicita otro componente como si fuera un procedimiento o método local. el middleware en el sistema intercepta esta solicitud y la transmite a un componente remoto. éste realiza la computación requerida y, por medio del middleware, regresa el resultado al componente solicitante. en java, las solicitudes de método remoto (rmi, por las siglas de remote method invocations) son comparables con rpc, aunque no idénticas. el framework rmi maneja la petición de métodos remotos en un programa java. rpc requiere un “stub” (talonario) para que el procedimiento solicitado sea accesible en la computadora que inicia la solicitud. se solicita el stub y éste traduce los paráme-tros del procedimiento en una representación estándar para transmisión al procedimiento remoto. a través del middleware, envía entonces la petición de ejecución al procedi-miento remoto. éste usa funciones de librería para convertir los parámetros en el formato requerido, realiza los cálculos y luego comunica los resultados requeridos vía el “stub” que representa al que solicita. la interacción basada en mensajes implica normalmente un componente que crea un mensaje, el cual detalla los servicios requeridos por otro componente. mediante el sistema middleware, éste se envía al componente de recepción. el receptor analiza el men-saje, efectúa los cálculos y diseña un mensaje para el componente emisor con los resulta-dos requeridos. entonces esto se transmite al middleware para que, a la vez, lo transmita al componente emisor. un problema con el enfoque rpc de interacción es que tanto el solicitante como el solicitado tienen que estar disponibles al momento de la comunicación, y deben saber cómo se refieren el uno al otro. en esencia, una rpc tiene los mismos requerimientos que una solicitud de procedimiento o método local. en contraste, en un enfoque basado en mensajes, puede tolerarse la indisponibilidad, pues el mensaje simplemente perma-nece en una cola hasta que el receptor esté disponible. más aún, no es necesario que emisario y receptor estén al tanto uno del otro. ellos simplemente se comunican con el middleware, que es el responsable de garantizar que los mensajes se transmitan al sistema adecuado.<starter> <dish name = “soup” type = “tomato” /> <dish name = “soup” type = “fish” /> <dish name = “pigeon salad” /></starter><main course> <dish name = “steak” type = “sirloin” cooking = “medium” /> <dish name = “steak” type = “fillet” cooking = “rare” /> <dish name = “sea bass”></main><accompaniment> <dish name = “french fries” portions = “2” /> <dish name = “salad” portions = “1” /></accompaniment>  figura 18.2 interacción basada en mensajes entre un camarero y el personal de cocina m18_sommerville_ingenieria_1ed_se_479-507.indd  486m18_sommerville_ingenieria_1ed_se_479-507.indd  486 3/18/11  5:03:55 pm3/18/11  5:03:55 pm