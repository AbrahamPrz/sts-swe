722 parte cinco temas avanzados • nunca violar la privacidad de un individuo, grupo u organización. • nunca hackear un sistema por deporte o beneficio. • nunca crear o propagar un virus o gusano. • nunca usar tecnología de computación para facilitar la discriminación o el hostiga- miento. durante la década pasada, ciertos miembros de la industria del software acudieron a las autoridades en busca de legislación protectora que [see03]: 1) permita a las compañías liberar software sin revelar defectos conocidos, 2) exentar a los desarrolladores de responsabilidad por cualquier daño que resulte de dichos defectos conocidos, 3) restringir a otros en revelar defectos sin permiso del desarrollador original, 4) permitir la incorporación de software de “autoayuda” dentro de un producto que pueda deshabilitar (mediante comando remoto) la operación del producto y 5) exentar a los desarrolladores de software con “autoayuda” de daños en caso de que el software sea deshabilitado por una tercera persona. como toda legislación, el debate frecuentemente se centra en temas que son políticos, no tecnológicos. sin embargo, muchas personas (incluido el autor) creen que la legislación protec-tora, si se emite de manera inadecuada, entra en conflicto con el código de ética de la ingeniería del software al exentar de manera indirecta a los ingenieros de software de su responsabilidad de producir software de alta calidad. 32.6 u n comentario final hace 30 años comenzó el trabajo en la primera edición de este libro. el autor todavía se recuerda sentado en su escritorio como joven profesor, escribiendo el manuscrito para un libro acerca de una materia por la que pocas personas se preocupaban e incluso aún menos entendían real-mente. recuerda las cartas de rechazo de los editores, quienes argumentaban (cortés, pero firmemente) que nunca habría un mercado para un libro acerca de “ingeniería del software”. por fortuna, mcgraw-hill decidió darle una oportunidad, 4 y el resto, como dicen, es historia. durante los pasados 30 años, este libro cambió dramáticamente: en visión, en tamaño, en estilo y en contenido. como la ingeniería del software, creció y (con fortuna) maduró con los años. un enfoque de ingeniería centrado en el desarrollo del software de computadora ahora es sabiduría convencional. aunque el debate continúa acerca del “paradigma correcto”, la impor-tancia de la agilidad, el grado de automatización y los métodos más efectivos, los principios subyacentes de la ingeniería del software, ahora se aceptan en toda la industria. ¿por qué, en-tonces, se ha visto su adopción amplia sólo recientemente? la respuesta, acaso, se encuentra en la dificultad de la transición tecnológica y el cambio cultural que la acompaña. aun cuando la mayoría de las personas aprecian la necesidad de una disciplina de ingeniería para el software, se lucha contra la inercia de la práctica pasada y se enfrentan nuevos dominios de aplicación (y de los desarrolladores que los trabajan) que parecen listos a repetir los errores del pasado. para facilitar la transición se necesitan muchas cosas: un proceso de software ágil, adaptable y sensible; métodos más efectivos; herramientas más pode-rosas; mejor aceptación por parte de los profesionales y apoyo de los administradores; y no pequeñas dosis de educación. acaso el lector no esté de acuerdo con todos los enfoques descritos en este libro. algunas de las técnicas y opiniones son controvertidas; otras deben afinarse para trabajar bien en diferentes 4 en realidad, el crédito debe ir para peter freeman y eric munson, quienes convencieron a mcgraw-hill de que valía la pena probar. más de un millón de copias después, es justo decir que tomaron una buena decisión. 32pressman(717-724).indd  72232pressman(717-724).indd  722 26/1/10  17:32:1526/1/10  17:32:15