otra forma de expresarse es usar una nomenclatura estándar. los patrones de diseño, por ejemplo, se basan en la comunicación y en la capacidad de expresión. al usar los nombres de patrones estándar, como command o visitor , en los nombres de las clases que implementan dichos patrones puede describir sucintamente su diseño a otros programadores. las pruebas de unidad bien escritas también son expresivas. uno de los principales objetivos de una prueba es servir de documentación mediante ejemplos. los que lean las pruebas deben entender con facilidad para qué sirve una clase. pero la forma más importante de ser expresivo es la práctica. a menudo, conseguimos que el código funcione y pasamos al siguiente problema sin detenernos en facilitar la lectura del código para otros. no olvide que seguramente sea el próximo que lea el código. por tanto, afronte su creación con orgullo. dedique tiempo a sus funciones y clases. seleccione nombres mejores, divida las funciones extensas en otras más reducidas y cuide su obra. el cuidado es un recurso precioso. clases y métodos mínimos incluso conceptos tan básicos como la eliminación de código duplicado, la expresividad del código y srp pueden exagerarse. en un esfuerzo por reducir el tamaño de clases y métodos, podemos crear demasiadas clases y métodos reducidos. esta regla también sugiere minimizar la cantidad de funciones y clases. una gran cantidad de clases y métodos suele indicar un dogmatismo sin sentido. imagine un estándar de código que insista en la creación de una interfaz para todas las clases, o a programadores que insisten en qué campos y comportamientos siempre deben separarse en clases de datos y clases de comportamiento. este dogma debe evitarse y cambiarse por un enfoque más pragmático. nuestro objetivo es reducir el tamaño general del sistema además del tamaño de clases y funciones, pero recuerde que esta regla es la de menor 233