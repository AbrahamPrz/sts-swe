else if ( m instanceof StringArgumentMarshaler ) setStringArg(argChar); else if ( m instanceof IntegerArgumentMarshaler ) setIntArg(argChar); else return false; return true; } Tras ello, empecé a usar la asignación  marshalers  en las funciones  set , dividiendo el uso de las otras tres asignaciones. Comencé por los elementos boolean . private boolean setArgument(char argChar) throws ArgsException { ArgumentMarshaler m = marshalers.get(argChar); if (m instanceof BooleanArgumentMarshaler) setBooleanArg( m ); else if (m instanceof StringArgumentMarshaler) setStringArg(argChar); else if (m instanceof IntegerArgumentMarshaler) setIntArg(argChar); else return false; return true; } … private void setBooleanArg( ArgumentMarshaler m ) { try { m .set(“true”);  // era: booleanArgs.get(argChar).set(“true”); } catch (ArgsException e) { } } Las pruebas seguían siendo correctas de modo que repetí la operación con las cadenas y los enteros. De esta manera se puede integrar parte del desagradable código de gestión de excepciones en la función  setArgument . private boolean setArgument(char argChar) throws ArgsException { ArgumentMarshaler m = marshalers.get(argChar); try { if (m instanceof BooleanArgumentMarshaler) setBooleanArg(m); else if (m instanceof StringArgumentMarshaler) setStringArg( m ); else if (m instanceof IntegerArgumentMarshaler) setIntArg( m ); else return false; } catch (ArgsException e) { valid = false; errorArgumentId = argChar; 288