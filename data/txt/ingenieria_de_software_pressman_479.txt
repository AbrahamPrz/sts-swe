448 parte tres administración de la calidad 19.5.2 prueba de partición en el nivel de clase la prueba de partición reduce el número de casos de prueba requeridos para ejercitar la clase, en una forma muy similar a la partición de equivalencia (capítulo 18) para el software tradicio- nal. las entradas y salidas se categorizan y los casos de prueba se diseñan para ejercitar cada categoría. ¿pero cómo se derivan las categorías de partición? la partición con base en estado categoriza las operaciones de clase a partir de su capacidad para cambiar el estado de la clase. considere de nuevo la clase account, las operaciones de estado incluyen deposit( ) y withdraw( ), mientras que las operaciones de no estado incluyen balance( ), sumaries( ) y creditlimit( ). las pruebas se diseñan para que ejerciten por separado las operaciones que cambian el estado y aquellas que no lo cambian. en consecuencia, caso de prueba p1: opensetupdepositdepositwithdrawwithdrawclose caso de prueba p2: opensetupdepositsummarizecreditlimitwithdrawclose el caso de prueba p1 cambia el estado, mientras que el p2 ejercita las operaciones que no cambian el estado (distintas a las que están en la secuencia de prueba mínima). la partición con base en atributo categoriza las operaciones de clase con base en los atributos que usan. para la clase account, los atributos balance y creditlimit pueden usarse para definir particiones. las operaciones se dividen en tres particiones: 1) operaciones que usan creditlimit, 2) operaciones que modifican creditlimit y 3) operaciones que no usan ni modifican creditlimit. entonces se diseñan secuencias de prueba para cada partición. la partición basada en categoría jerarquiza las operaciones de clase con base en la función genérica que cada una realiza. por ejemplo, las operaciones en la clase account pueden cate- gorizarse en operaciones de inicialización ( open, setup), de cálculo (deposit, withdraw), consultas (balance, summarize, creditlimit) y de terminación (close). 19.6 d iseño de casos de prueba interclase el diseño de casos de prueba se vuelve más complicado conforme comienza la integración del sistema orientado a objetos. en esta etapa debe comenzar la prueba de las colaboraciones entre clases. para ilustrar “la generación de casos de prueba interclase” [kir94], se expande el ejemplo bancario presentado en la sección 19.5 a fin de incluir las clases y colaboraciones anotadas en la figura 19.2. la dirección de las flechas en la figura indica la dirección de los mensajes y las etiquetas indican las operaciones que se involucran como consecuencia de las colaboraciones que implican los mensajes.#1: enable•test•read•disable jamie: eso funcionará, ¡pero tienes que hacer más pruebas que eso! shakira: ya sé, ya sé, aquí hay otras secuencias que encontré. [muestra a jamie las siguientes secuencias]. #2: enable•test*[read]n•test•disable #3: [read]n #4: enable*disable•[test | read] jamie: déjame ver si entiendo la intención de éstos. el número 1 pasa a través de una historia de vida normal, una especie de uso convencional. el número 2 repite la operación leer n veces, y ése es un escenario probable. el número 3 intenta leer el sensor antes de que esté habilitado... eso produciría un mensaje de error de algún tipo, ¿cierto? el número 4 habilita y deshabilita el sensor y luego intenta leerlo. ¿no es lo mismo que la prueba 2? shakira: en realidad, no. en el número 4, el sensor se habilitó. lo que realmente prueba el número 4 es si la operación deshabilitar funciona como debe. un read( ) o test( ) después de disable( ) gene- raría el mensaje de error. si no lo hace, entonces hay un error en la operación deshabilitar. jamie: bien. sólo recuerda que las cuatro pruebas tienen que apli- carse para cada tipo de sensor, pues todas las operaciones pueden tener diferencias sutiles dependiendo del tipo de sensor. shakira: no hay que preocuparse. ése es el plan. ¿qué opciones de prueba están disponibles en el nivel de clase?? 19pressman(437-452).indd  44819pressman(437-452).indd  448 21/1/10  10:58:3521/1/10  10:58:35