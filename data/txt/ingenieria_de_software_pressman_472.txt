CAPÍTULO 19  PRUEBA DE APLICACIONES ORIENTADAS A OBJETOS 441 sistema contra los subsistemas diseñados para lograr este comportamiento. La concurrencia y  la asignación de tarea también se revisan en el contexto del comportamiento del sistema. Los estados de comportamiento del sistema se evalúan para determinar cuál existe de manera con-currente. Los casos de uso se utilizan para ejercitar el diseño de la interfaz de usuario. El modelo de objetos debe ponerse a prueba contra la red de relación de objetos a fin de  asegurar que todos los objetos diseñados contienen los atributos y operaciones necesarios para implementar las colaboraciones definidas para cada tarjeta índice CRC. Además, se revisa la especificación minuciosa de los detalles de operación (es decir, los algoritmos que implementan las operaciones).  19.3 E STRATEGIAS  DE PRUEBAS  ORIENTADAS  A OBJETOS Como se anotó en el capítulo 18, la estrategia clásica de prueba de software comienza “pro-bando en lo pequeño” y funciona hacia afuera, “probando en lo grande”. Dicho en el lenguaje de las pruebas de software (capítulo 18), comienza con la prueba de unidad, luego avanza hacia  la prueba de integración y culmina con las pruebas de validación y sistema. En aplicaciones con- vencionales, la prueba de unidad se enfoca en la unidad de programa compatible más pequeña: el subprograma (por ejemplo, componente, módulo, subrutina, procedimiento). Una vez que cada una de estas unidades se prueba de manera individual, se integra en una estructura de programa mientras se aplica una serie de pruebas de regresión para descubrir errores debidos a la puesta en interfaz de los módulos y los efectos colaterales que se generan al sumar nuevas unidades. Finalmente, el sistema como un todo se prueba para garantizar que se descubren los errores en los requerimientos. 19.3.1  Prueba de unidad en el contexto OO Cuando se piensa en software orientado a objetos, cambia el concepto de unidad. La encapsu-lación impulsa la definición de clases y objetos. Esto significa que cada clase y cada instancia de una clase (objeto) encapsulan los atributos (datos) y las operaciones (también conocidas como métodos o servicios) que manipulan dichos datos. En lugar de probar un módulo indivi-dual, la unidad comprobable más pequeña es la clase encapsulada. Puesto que una clase puede contener algunas operaciones diferentes y una operación particular puede existir como parte de un número de clases diferentes, el significado de prueba de unidad cambia dramáticamente. Ya no es posible probar una sola operación aislada (la visión convencional de la prueba de  unidad) sino, más bien, como parte de una clase. Para ilustrar lo anterior, considere una jerar-quía de clase en la que se define una operación X( ) para la superclase y la heredan algunas  subclases. Cada subclase usa la operación X( ), pero se aplica dentro del contexto de los atribu- tos y operaciones privados que se definieron para cada subclase. Puesto que el contexto donde se usa la operación X( )  varía en formas sutiles, es necesario probarla en el contexto de cada una  de las subclases. Esto significa que probar la operación X( ) en el vacío (el enfoque tradicional de  la prueba de unidad) no es efectivo en el contexto orientado a objetos. La prueba de clase para el software OO es el equivalente de la prueba de unidad para software  convencional. 3 A diferencia de la prueba de unidad del software convencional, que tiende a  enfocarse en el detalle algorítmico de un módulo y en los datos que fluyen a través de la interfaz de módulo, la prueba de clase para el software OO se activa mediante las operaciones encap-suladas por la clase y por el comportamiento de estado de la misma.PUNTO CLAVE La “unidad” comprobable más  pequeña en el software OO es la clase. La prueba de clase se activa mediante las operaciones encapsuladas por la clase y por el comportamiento de estado de la misma. 3 En las secciones 19.4 a 19.6 se estudian los métodos de diseño de casos de prueba para clases OO. 19Pressman(437-452).indd   44119Pressman(437-452).indd   441 21/1/10   10:58:3321/1/10   10:58:33