constantes a una interfaz y después accede a las mismas heredando dicha interfaz. Fíjese en el siguiente código: public class HourlyEmployee extends Employee { private int tenthsWorked; private double hourlyRate; public Money calculatePay() { int straightTime = Math.min(tenthsWorked, TENTHS_PER_WEEK); int overTime = tenthsWorked - straightTime; return new Money( hourlyRate * (tenthsWorked + OVERTIME_RATE * overTime) ); } … } ¿De dónde salen las constantes  TENTHS_PER_WEEK  y  OVERTIME_RATE ? Puede que provengan de la clase  Employee ; comprobémoslo: public abstract class Employee implements PayrollConstants { public abstract boolean isPayday(); public abstract Money calculatePay(); public abstract void deliverPay(Money pay); } No, de ahí no. ¿Entonces de dónde? Fíjese atentamente en la clase Employee . Implementa  PayrollConstants . public interface PayrollConstants { public static final int TENTHS_PER_WEEK = 400; public static final double OVERTIME_RATE = 1.5; } Es horrible. Las constantes se ocultan en la parte superior de la jerarquía de herencia. No use la herencia para burlar las reglas de ámbito del lenguaje. Use una importación estática: import static PayrollConstants.*; public class HourlyEmployee extends Employee { private int tenthsWorked; private double hourlyRate; public Money calculatePay() { int straightTime = Math.min(tenthsWorked, TENTHS_PER_WEEK); int overTime = tenthsWorked - straightTime; return new Money( hourlyRate * (tenthsWorked + OVERTIME_RATE * overTime) ); } … } 389