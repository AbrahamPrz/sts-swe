Aspect-oriented Software Development. Un libro escrito por diferentes autores en conjunto, quienes  presentan una gran variedad de ensayos sobre el desarrollo de software orientado a aspectos; entre sus autores se encuentran muchos de los investigadores líderes en el campo. (R. E. Filman,T. Elrad, S. Clarke y M. Aksit, Addison-Wesley, 2005.) Aspect-oriented Software Development with Use cases. Éste es un libro práctico para diseñadores  de software. Los autores analizan cómo usar casos de uso para gestionar la separación de competencias y utilizarlos como la base de un diseño orientado a aspectos. (I. Jacobson y P. Ng, Addison-Wesley, 2005.) EJERCICIOS  21.1. ¿Cuáles son los diferentes tipos de competencias de las partes interesadas que pueden surgir en un sistema grande? ¿Cómo pueden los aspectos soportar la implementación de cada uno de estos tipos de competencias?  21.2. Resuma qué se entiende por enredos y dispersión. Con ejemplos, explique por qué los enredos y la dispersión pueden causar problemas cuando cambian los requerimientos del sistema.  21.3. ¿Cuál es la diferencia entre un punto de enlace y un punto de corte? Explique cómo éstos facilitan el tejido de código en un programa para manejar las competencias transversales.  21.4. ¿Qué suposiciones subyacen en la idea de que un sistema debe estar organizado como un sistema central que implemente los requerimientos esenciales, más extensiones que implementen funcionalidad adicional? ¿Puede pensar en sistemas donde este modelo no sería adecuado?  21.5. ¿Cuáles puntos de vista deben considerarse cuando se desarrollan especificaciones de requerimientos para el MHC-PMS? ¿Cuáles son probablemente las competencias transversales más importantes?  21.6. Considerando la funcionalidad para cada punto de vista mostrado en la figura 21.9, identifique seis casos de uso para el sistema de inventario de equipo, además de aquellos que se indican en la figura 21.11. Cuando sea adecuado, indique cómo algunos de éstos podrían organizarse como extensión de casos de uso.  21.7. Con la notación de estereotipo de aspectos que se ilustró en la figura 21.15, desarrolle con más detalle los aspectos Pedido y Monitor, que se muestran en la figura 21.14.  21.8. Explique cómo puede surgir interferencia de aspectos y sugiera lo que debería hacerse durante el proceso de diseño del sistema para reducir los problemas de interferencia de aspectos.  21.9. Explique por qué expresar las especificaciones de punto de corte como patrones aumenta los problemas de probar los programas orientados a aspectos. Para responder, piense en cómo las pruebas de los programas implican generalmente una comparación de la salida esperada con la salida real producida por un programa. 21.10. Sugiera cómo podría usar aspectos para simplificar la depuración de programas.588  Capítulo 21 ■ Ingeniería de software orientada a aspectos M21_SOMMERVILLE_INGENIERIA_1ED_SE_565-590.indd   588M21_SOMMERVILLE_INGENIERIA_1ED_SE_565-590.indd   588 3/18/11   5:38:59 PM3/18/11   5:38:59 PM