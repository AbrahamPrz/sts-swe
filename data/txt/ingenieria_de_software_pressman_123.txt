92 parte dos modelado principio 2. deben definirse las funciones que realizará el software. las funciones del software dan un beneficio directo a los usuarios finales y también brindan apoyo in- terno para las características que son visibles para aquéllos. algunas funciones transfor-man los datos que fluyen hacia el sistema. en otros casos, las funciones activan algún nivel de control sobre el procesamiento interno del software o sobre los elementos externos del sistema. las funciones se describen en muchos y distintos niveles de abstracción, que van de un enunciado de propósito general a la descripción detallada de los elementos del pro-cesamiento que deben invocarse. principio 3. debe representarse el comportamiento del software (como consecuen- cia de eventos externos). el comportamiento del software de computadora está determi- nado por su interacción con el ambiente externo. las entradas que dan los usuarios finales, el control de los datos efectuado por un sistema externo o la vigilancia de datos reunidos en una red son el motivo por el que el software se comporta en una forma específica. principio 4. los modelos que representen información, función y comportamiento deben dividirse de manera que revelen los detalles en forma estratificada (o jerárquica). el modelado de los requerimientos es el primer paso para resolver un pro-blema de ingeniería de software. eso permite entender mejor el problema y proporciona una base para la solución (diseño). los problemas complejos son difíciles de resolver por completo. por esta razón, debe usarse la estrategia de divide y vencerás. un problema grande y complejo se divide en subproblemas hasta que cada uno de éstos sea relativa-mente fácil de entender. este concepto se llama partición o separación de entidades, y es una estrategia clave en el modelado de requerimientos. principio 5. el trabajo de análisis debe avanzar de la información esencial hacia la implementación en detalle. el modelado de requerimientos comienza con la descrip- ción del problema desde la perspectiva del usuario final. se describe la “esencia” del pro-blema sin considerar la forma en la que se implementará la solución. por ejemplo, un juego de video requiere que la jugadora “enseñe” a su protagonista en qué dirección avanzar cuando se mueve hacia un laberinto peligroso. ésa es la esencia del problema. la imple-mentación detallada (normalmente descrita como parte del modelo del diseño) indica cómo se desarrollará la esencia. para el juego de video, quizá se use una entrada de voz, o se es-criba un comando en un teclado, o tal vez un joystick (o mouse) apunte en una dirección es- pecífica, o quizá se mueva en el aire un dispositivo sensible al movimiento. con la aplicación de estos principios, un ingeniero de software aborda el problema en forma sistemática. pero, ¿cómo se aplican estos principios en la práctica? esta pregunta se responderá en los capítulos 5 a 7. principios del modelado del diseño. el modelo del diseño del software es análogo a los planos arquitectónicos de una casa. se comienza por representar la totalidad de lo que se va a construir (por ejemplo, un croquis tridimensional de la casa) que se refina poco a poco para que guíe la construcción de cada detalle (por ejemplo, la distribución de la plomería). de manera similar , el modelo del diseño que se crea para el software da varios puntos de vista distintos del sistema. no escasean los métodos para obtener los distintos elementos de un diseño de software. algunos son activados por datos, lo que hace que sea la estructura de éstos la que determine la arquitectura del programa y los componentes de procesamiento resultantes. otros están moti-vados por el patrón, y usan información sobre el dominio del problema (el modelo de requeri-mientos) para desarrollar estilos de arquitectura y patrones de procesamiento. otros más están orientados a objetos, y utilizan objetos del dominio del problema como impulsores de la crea-ción de estructuras de datos y métodos que los manipulan. no obstante la variedad, todos ellos se apegan a principios de diseño que se aplican sin importar el método empleado.cita: “vea primero que el diseño es sabio y justo: eso comprobado, siga resueltamente; no para uno renunciar a rechazar el propósi-to de que ha resuelto llevar a cabo.” william shakespearepunto clave el modelado del análisis se centra en tres atributos del software: la información que se va a procesar, la función que se va a entregar y el comportamiento que va a suceder. cita: “en cualquier trabajo de diseño, el primer problema del ingenie-ro es descubrir cuál es realmente el problema.” autor desconocido 04pressman(081-100).indd  9204pressman(081-100).indd  92 26/1/10  17:32:0026/1/10  17:32:00