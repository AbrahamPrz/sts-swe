assertEquals(“expected:<a> but was:<null>”, failure); } public void testComparisonErrorWithExpectedNull() { String failure= new ComparisonCompactor(0, null, “a”).compact(null); assertEquals(“expected:<null> but was:<a>”, failure); } public void testComparisonErrorWithExpectedNullContext() { String failure= new ComparisonCompactor(2, null, “a”).compact(null); assertEquals(“expected:<null> but was:<a>”, failure); } public void testBug609972() { String failure= new ComparisonCompactor(10, “S&P500”, “0”).compact(null); assertEquals(“expected:<[S&P50]0> but was:<[]0>”, failure); } } Realicé un análisis de alcance de código en  ComparisonCompactor  con estas pruebas. El código se cubre en un 100 por 100. Cada línea, cada instrucción  if  y cada bucle  for  se ejecuta con las pruebas. De este modo sé que el código funciona y sus autores me merecen el mayor de los respetos. El código  ComparisonCompactor  se reproduce en el Listado 15-2. Examínelo. Creo que lo encontrará bien distribuido, razonablemente expresivo y estructuralmente sencillo. Cuando termine, lo diseccionaremos. Listado 15-2 ComparisonCompactor.java (Original). package junit.framework; public class ComparisonCompactor { private static final String ELLIPSIS = “…”; private static final String DELTA_END = “]”; private static final String DELTA_START = “[”; private int fContextLength; private String fExpected; private String fActual; private int fPrefix; private int fSuffix; public ComparisonCompactor(int contextLength, String expected, String actual) { fContextLength = contextLength; fExpected = expected; 324