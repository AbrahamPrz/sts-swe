666 parte cuatro administración de proyectos de software sos, la organización de datos dentro del código identifica tipos de datos abstractos. por ejemplo, el registro de estructuras, archivos, listas y otras estructuras de datos con frecuencia propor-ciona un indicador inicial de clases. estructura de la base de datos. sin importar su organización lógica y su estructura física, una base de datos permite la definición de objetos de datos y soporta algún método para esta- blecer relaciones entre los objetos. por tanto, la reingeniería de un esquema de base de datos en otro nuevo requiere comprender los objetos existentes y sus relaciones. puede usar los siguientes pasos [pre94] para definir el modelo de extracción de datos como precursor de la reingeniería de un nuevo modelo de base de datos: 1) construir un modelo de objeto inicial, 2) determinar claves candidatas (los atributos se examinan para determinar si se usan para apuntar hacia otro registro o tabla; los que funcionan como punteros se con vierten en clases candidatas), 3) refinar las clases tentativas, 4) definir generalizaciones y 5) descubrir asociaciones usando técnicas que sean análogas al enfoque crc. una vez que se conoce la información definida en los pasos anteriores, puede aplicarse una serie de transformaciones [pre94] para mapear la antigua estructura de la base de datos en una nueva estructura. 29.6.2 ingeniería inversa para entender el procesamiento la ingeniería inversa para entender el procesamiento comienza con un intento por compren-der y luego extraer abstracciones procedimentales representadas mediante el código fuente. para comprender las abstracciones procedimentales se analiza el código en varios niveles de abstracción: sistema, programa, componente, patrón y enunciado. la funcionalidad global de todo el sistema de aplicación debe entenderse antes de que ocurra trabajo de ingeniería inversa más detallado. esto establece el contexto para un mayor análisis y proporciona comprensión acerca de los conflictos de interoperabilidad entre aplicaciones dentro del sistema. cada uno de los programas que constituyen el sistema de aplicación repre-senta una abstracción funcional en un nivel alto de detalle. se crea un diagrama de bloques, que representa la interacción entre dichas abstracciones funcionales. cada componente realiza alguna subfunción y representa una abstracción procedimental definida. se desarrolla una na-rrativa de procesamiento para cada componente. en algunas situaciones, ya existen especifica-ciones de sistema, programa y componente. cuando éste es el caso, las especificaciones se revisan para conformarse con el código existente. 6 las cosas se vuelven más complejas cuando se considera el código dentro de un compo- nente. debe buscar secciones de código que representen patrones procedimentales genéricos. en casi todo componente, una sección de código prepara los datos para procesamiento (dentro del módulo), una sección diferente del código realiza el procesamiento y otra prepara los resul-tados del procesamiento para exportarlos desde el componente. dentro de cada una de esas secciones, pueden encontrarse patrones más pequeños; por ejemplo, validación de datos y comprobación de enlaces que con frecuencia ocurren dentro de la sección de código que pre-para los datos para procesamiento. para sistemas grandes, la ingeniería inversa por lo general se logra usando un enfoque  semiautomatizado. es posible usar herramientas automatizadas para auxiliarse en la compren- sión de la semántica del código existente. la salida de este proceso pasa entonces a reestruc-turación de herramientas de ingeniería hacia adelante a fin de completar el proceso de reinge-niería. 6 con frecuencia, las especificaciones escritas anteriormente, en la historia de vida del programa, nunca se actua- lizan. conforme se realizan cambios, el código ya no es congruente con la especificación.cita: “existe una pasión por la com- prensión, así como existe una pasión por la música. dicha pasión es más bien común en los niños, pero se pierde en la mayoría de la gente tiempo des-pués.” albert einstein 29pressman(655-674).indd  66629pressman(655-674).indd  666 26/1/10  17:33:0126/1/10  17:33:01