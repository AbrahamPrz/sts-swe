482  Capítulo 18 ■ Ingeniería de software distribuido 5. Calidad de servicio  ¿Cómo debe especificarse la calidad del servicio que se  entrega a los usuarios del sistema y cómo debe implementarse el sistema para entre- gar una calidad de servicio aceptable para todos los usuarios? 6. Gestión de fallas ¿Cómo pueden detectarse las fallas del sistema, contenerse (de modo que tengan efectos mínimos sobre otros componentes del sistema) y repararse?  En un mundo ideal, el hecho de que un sistema sea distribuido sería transparente para los usuarios. Esto significa que los usuarios verían el sistema como un solo sistema cuyo comportamiento no resulta afectado por la forma en que se distribuye el sistema. En la práctica, esto es imposible de lograr. Es improbable el control central de un sistema distribuido y, como resultado, las computadoras individuales en un sistema pueden com-portarse de manera diferente en distintos momentos. Más aún, las demoras de red son ineludibles, puesto que el hecho de que las señales viajen a través de la red siempre tiene una duración finita de tiempo. La duración de dichas demoras depende de la ubicación de los recursos en el sistema, la calidad de conexión de la red del usuario y la carga de la red. El enfoque de diseño para lograr transparencia depende de la creación de abstraccio-nes de los recursos en un sistema distribuido, de modo que la realización física de dichos recursos puede cambiar sin tener que realizar variaciones en el sistema de aplicación. El middleware (estudiado en la sección 18.1.2) se usa para trazar un mapa de los recursos lógicos referidos por un programa sobre los recursos físicos reales, y gestionar las inte-racciones entre dichos recursos. En la práctica, es imposible hacer un sistema por completo transparente y los usua-rios, por lo general, están al tanto de que se enfrentan con un sistema distribuido. Por consiguiente, usted puede decidir que es mejor exponer la distribución para los usuarios. Así, ellos podrán prepararse para algunas de las consecuencias de la distribución, como las demoras de red, fallas del nodo remoto, etcétera. Los sistemas distribuidos abiertos son sistemas que se construyen de acuerdo con estándares generalmente aceptados. Esto significa que los componentes de cualquier proveedor pueden integrarse en el sistema e interoperar con los otros componentes del sistema. A nivel de red, los sistemas abiertos se conforman de acuerdo con los protoco-los de Internet, pero a nivel de componente la apertura no es aún universal. La apertura implica que los componentes del sistema pueden desarrollarse de manera independiente en cualquier lenguaje de programación y, si se ajustan a las normas, funcionarán con otros componentes.CORBA (Common Object Request Broker Architecture), Arquitectura Común de  Intermediario de Peticiones de Objetos CORBA es una especificación bien conocida para un sistema middleware que el Object Management  Group desarrolló en la década de 1990. Estaba previsto como un estándar abierto que permitiría el desarrollo de middleware para soporte de comunicaciones y ejecución de componentes distribuidos, además de proporcionar un conjunto de servicios estándar que pudieran usar dichos componentes. Se produjeron varias implementaciones de CORBA, pero el sistema nunca logró masa crítica. Los usuarios  prefirieron sistemas propietarios o se trasladaron a arquitecturas orientadas a servicios. http://www.SoftwareEngineering-9.com/Web/DistribSys/Corba.html M18_SOMMERVILLE_INGENIERIA_1ED_SE_479-507.indd   482M18_SOMMERVILLE_INGENIERIA_1ED_SE_479-507.indd   482 3/18/11   5:03:55 PM3/18/11   5:03:55 PM