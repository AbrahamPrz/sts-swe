CAPÍTULO 4  PRINCIPIOS QUE GUÍAN LA PRÁCTICA 89 Principio 1. Entender el alcance del proyecto.  Es imposible usar el mapa si no se sabe  a dónde se va. El alcance da un destino al equipo de software. Principio 2. Involucrar en la actividad de planeación a los participantes del  software.  Los participantes definen las prioridades y establecen las restricciones del pro-yecto. Para incluir estas realidades, es frecuente que los ingenieros de software deban ne-gociar la orden de entrega, los plazos y otros asuntos relacionados con el proyecto. Principio 3. Reconocer que la planeación es iterativa.  Un plan para el proyecto nunca  está grabado en piedra. Para cuando el trabajo comience, es muy probable que las cosas  hayan cambiado. En consecuencia, el plan deberá ajustarse para incluir dichos cambios. Además, los modelos de proceso iterativo incrementales dictan que debe repetirse la pla-neación después de la entrega de cada incremento de software, con base en la retroalimen-tación recibida de los usuarios. Principio 4. Estimar con base en lo que se sabe.  El objetivo de la estimación es obte- ner un índice del esfuerzo, costo y duración de las tareas, con base en la comprensión que  tenga el equipo sobre el trabajo que va a realizar. Si la información es vaga o poco confia-ble, entonces las estimaciones tampoco serán confiables. Principio 5. Al definir el plan, tomar en cuenta los riesgos.  Si ha identificado riesgos  que tendrían un efecto grande y es muy probable que ocurran, entonces es necesario ela- borar planes de contingencia. Además, el plan del proyecto (incluso la programación de ac-tividades) deberá ajustarse para que incluya la posibilidad de que ocurran uno o más de di-chos riesgos. Principio 6. Ser realista.  Las personas no trabajan 100% todos los días. En cualquier co- municación humana hay ruido. Las omisiones y ambigüedad son fenómenos de la vida. Los  cambios ocurren. Aun los mejores ingenieros de software cometen errores. Éstas y otras realidades deben considerarse al establecer un proyecto. Principio 7. Ajustar la granularidad cuando se defina el plan.  La granularidad se re- fiere al nivel de detalle que se adopta cuando se desarrolla un plan. Un plan con “mucha  granularidad” proporciona detalles significativos en las tareas para el trabajo que se planea, en incrementos durante un periodo relativamente corto (por lo que el seguimiento y control suceden con frecuencia). Un plan con “poca granularidad” da tareas más amplias para el trabajo que se planea, para plazos más largos. En general, la granularidad va de poca a mucha conforme el tiempo avanza. En las siguientes semanas o meses, el proyecto se pla-nea con detalles significativos. Las actividades que no ocurrirán en muchos meses no re-quieren mucha granularidad (hay demasiadas cosas que pueden cambiar). Principio 8. Definir cómo se trata de asegurar la calidad.  El plan debe identificar la  forma en la que el equipo de software busca asegurar la calidad. Si se realizan revisiones  técnicas, 3 deben programarse. Si durante la construcción va a utilizarse programación por  parejas (véase el capítulo 3), debe definirse en forma explícita en el plan. Principio 9. Describir cómo se busca manejar el cambio.  Aun la mejor planeación  puede ser anulada por el cambio sin control. Debe identificarse la forma en la que van a re- cibirse los cambios a medida que avanza el trabajo de la ingeniería de software. Por ejem-plo, ¿el cliente tiene la posibilidad de solicitar un cambio en cualquier momento? Si se soli-cita uno, ¿está obligado el equipo a implementarlo de inmediato? ¿Cómo se evalúan el efecto y el costo del cambio?Cita: “El éxito es más una función del  sentido común coherente que del genio.” An Wang PUNTO CLAVE El término granularidad se refiere al  detalle con el que se representan o efectúan algunos elementos de la planeación. 3 Las revisiones técnicas se estudian en el capítulo 15. 04Pressman(081-100).indd   8904Pressman(081-100).indd   89 26/1/10   17:31:5926/1/10   17:31:59