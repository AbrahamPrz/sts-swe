capítulo 21 modelado y verificación formal 487 ad–t–ad–ad–ad–zs t–ad–ad–ad–q–ad–adad–ad–zs–t–t–ad el equipo de prueba los ejecuta, y verifica el comportamiento del software contrastándolo con la especificación para el sistema. la temporización de las pruebas se registra de modo que pue-dan determinarse los intervalos de tiempo. al usar intervalos de tiempo, el equipo de certifica-ción puede calcular el tiempo medio hasta el fallo (tmhf). si una larga secuencia de pruebas se realiza sin fallas, el tmhf es bajo y la confiabilidad del software puede suponerse alta. 21.4.2 certificación las técnicas de verificación y prueba analizadas anteriormente en este capítulo conducen a componentes de software (e incrementos completos) que pueden certificarse. dentro del con-texto del enfoque de ingeniería del software de cuarto limpio, la certificación implica que la confiabilidad (medida por el tmhf) puede especificarse para cada componente. el impacto potencial de los componentes de software certificables va más allá de un solo proyecto de cuarto limpio. los componentes de software reutilizables pueden almacenarse junto con sus escenarios de uso, estímulos de programa y distribuciones de probabilidad. cada componente tendría una confiabilidad certificada bajo el escenario de uso y el régimen de prue-bas descritos. esta información es invaluable para otros que quieran usar los componentes. el enfoque de certificación involucra cinco pasos [woh94]: 1) se crean escenarios de uso, 2) se especifica un perfil de uso, 3) se generan casos de prueba a partir del perfil, 4) las pruebas se ejecutan y los datos de fallo se registran y analizan, y 5) se calcula la confiabilidad y se certifica. los pasos del 1 al 4 se analizaron en una sección anterior. la certificación para la ingeniería del software de cuarto limpio requiere la creación de tres modelos [poo93]: modelo de muestreo. la prueba de software ejecuta m casos de prueba aleatorios y se certifica si no ocurren fallos o un número específico de ellos. el valor de m se deriva mate- máticamente para asegurar que se logra la confiabilidad requerida. modelo de componente. se certifica un sistema compuesto de n componentes. el mo- delo de componentes permite al analista determinar la probabilidad de que el componente i fallará antes de su conclusión. modelo de certificación. la confiabilidad global del sistema se proyecta y se certifica. al completar las pruebas de uso estadístico, el equipo de certificación tiene la información re- querida para entregar el software que tenga un tmhf certificado, usando cada uno de estos modelos. si tiene más interés, vea [cur86], [mus87] o [poo93], para detalles adicionales. 21.5 c onceptos de métodos formales the encyclopedia of software engineering [mar01] define los métodos formales en la forma si- guiente: los métodos formales utilizados para desarrollar sistemas de cómputo son técnicas con base mate- mática para describir las propiedades del sistema. tales métodos formales proporcionan marcos conceptuales dentro de los cuales las personas pueden especificar, desarrollar y verificar los sistemas en forma sistemática más que ad hoc. las propiedades deseadas de una especificación formal (consistencia, completitud y falta de ambigüedad) son los objetivos de todos los métodos de especificación. sin embargo, el lenguaje de especificación con base matemática que se utiliza para los métodos formales da como resul-tado una probabilidad mucho mayor de lograr dichas propiedades. la sintaxis formal de un ¿cómo se certifica un componente de software?? 21pressman(478-500).indd  48721pressman(478-500).indd  487 19/1/10  12:43:2619/1/10  12:43:26