alguno de ellos se incluya en una clase propia. fíjese en la diferencia entre las dos siguientes declaraciones: circle makecircle (double x, double y, double radius); circle makecircle(point center, double radius); la reducción del número de argumentos mediante la creación de objetos puede parecer una trampa pero no lo es. cuando se pasan grupos de variables de forma conjunta, como x e y en el ejemplo anterior, es probable que formen parte de un concepto que se merece un nombre propio. listas de argumentos en ocasiones tendremos que pasar un número variable de argumentos a una función. fíjese en el método string.format : string.format (“%s worked %.2f hours.”, name, hours); si los argumentos variables se procesan de la misma forma, como en el ejemplo anterior, serán equivalentes a un único argumento de tipo list . por tanto, string.format es en realidad diádico. de hecho, la siguiente declaración de string.format es claramente diádica. public string format(string format, object… args) así pues, se aplican las mismas reglas. las funciones que aceptan argumentos variables pueden ser monádicas, diádicas o incluso triádicas, pero sería un error asignar más argumentos. void monad(integer… args); void dyad(string name, integer… args); void triad(string name, int count, integer… args); verbos y palabras clave la selección de nombres correctos para una función mejora la explicación de su cometido, así como el orden y el cometido de los argumentos. en formato monádico, la función y el argumento deben formar un par de verbo y sustantivo. por ejemplo, write(name) resulta muy evocador. sea lo que sea name , sin duda se escribe (write) . 75