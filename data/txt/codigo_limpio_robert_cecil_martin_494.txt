431 */ 432 private int calcSerial(final int d, final int m, final int y) { 433 final int yy = ((y - 1900) * 365) + SerialDate.leapYearCount(y - 1); 434 int mm = SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[m]; 435 if (m > MonthConstants.FEBRUARY) { 436 if (SerialDate.isLeapYear(y)) { 437 mm = mm + 1; 438 } 439 } 440 final int dd = d; 441 return yy + mm + dd + 1; 442 } 443 444 /** 445 * Calcular el día, mes y año a partir del número de serie. 446 */ 447 private void calcDayMonthYear() { 448 449 // obtener el año a partir del número de serie de la fecha 450 final int days = this.serial - SERIAL_LOWER_BOUND; 451 // sobrevalorado ya que ignoramos los días bisiestos 452 final int overestimatedYYYY = 1900 + (days / 365); 453 final int leaps = SerialDate.leapYearCount(overestimatedYYYY); 454 final int nonleapdays = days - leaps; 455 // subestimado ya que sobrevaloramos los años 456 int underestimatedYYYY = 1900 + (nonleapdays / 365); 457 458 if (underestimatedYYYY == overestimatedYYYY) { 459 this.year = underestimatedYYYY; 460 } 461 else { 462 int ss1 = calcSerial(1, 1, underestimatedYYYY); 463 while (ss1 <= this.serial) { 464 underestimatedYYYY = underestimatedYYYY + 1; 465 ss1 = calcSerial(1, 1, underestimatedYYYY); 466 } 467 this.year = underestimatedYYYY - 1; 468 } 469 470 final int ss2 = calcSerial(1, 1, this.year); 471 472 int[] daysToEndOfPrecedingMonth 473 = AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH; 474 475 if (isLeapYear(this.year)) { 495