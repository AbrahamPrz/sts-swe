444 PARTE TRES  ADMINISTRACIÓN DE LA CALIDAD 19.4.3  Prueba basada en fallo5 El objeto de la prueba basada en fallo dentro de un sistema OO es diseñar pruebas que tengan una  alta probabilidad de descubrir fallos plausibles. Puesto que el producto o sistema debe adecuarse a los requerimientos del cliente, la planificación preliminar requerida para realizar alguna prueba basada en fallo comienza con el modelo de análisis. El examinador busca fallos plausibles, es decir, aspectos de la implementación del sistema que pueden resultar en defectos. Para determi-nar si existen dichos fallos, los casos de prueba se diseñan a fin de ejercitar el diseño o código. Desde luego, la efectividad de dichas técnicas depende de cómo perciben los examinadores  un fallo plausible. Si los fallos reales en un sistema OO se perciben como improbables, entonces este enfoque realmente no es mejor que cualquier técnica de prueba aleatoria. Sin embargo, si los modelos de análisis y diseño pueden proporcionar comprensión acerca de lo que es probable que vaya mal, entonces la prueba basada en fallo puede encontrar un significativo número de errores con gastos de esfuerzo relativamente bajos. La prueba de integración busca fallos plausibles en los llamados de operación y en las conexio- nes de mensaje. En este contexto se encuentran tres tipos de fallos: resultado inesperado, uso de operación/mensaje equivocado e invocación incorrecta. Para determinar fallos plausibles cuando se invocan funciones (operaciones), debe examinarse el comportamiento de la operación. La prueba de integración se aplica a los atributos así como a las operaciones. Los “compor- tamientos” de un objeto están definidos por los valores que le son asignados a sus atributos. Las pruebas deben ejercer los atributos para determinar si los valores adecuados ocurren para los distintos tipos de comportamiento de los objetos. Es importante observar que la prueba de integración intenta encontrar errores en el objeto  cliente, no en el servidor. Dicho en términos convencionales, el foco de la prueba de integración es determinar si existen errores en el código que llama, no en el código llamado. La llamada de operación se usa como pista: es una forma de encontrar requerimientos de prueba que ejerciten el código que llama. 19.4.4  Casos de prueba y jerarquía de clase La herencia no dispensa la necesidad de pruebas amplias de todas las clases derivadas. De he-cho, en realidad puede complicar el proceso de prueba. Considere la siguiente situación. Una clase Base contiene operaciones inherited( ) y redefined( ). Una clase Derived redefine redefi- ned( ) para servir en un contexto local. Hay poca duda de que Derived::redefined( ) tiene que pro- barse porque representa un nuevo diseño y un nuevo código. Pero, ¿ Derived::inherited( ) debe  probarse nuevamente? Si Derived::inherited( ) llama a redefined( ) y el comportamiento de redefined( ) cambió, Derived:: inherited( ) puede manejar mal el nuevo comportamiento. Por tanto, necesita nuevas pruebas aun cuando el diseño y el código no hayan cambiado. No obstante, es importante observar que es posible que sólo se ejecute un subconjunto de todos las pruebas para Derived::inherited( ). Si parte  del diseño y código para inherited( ) no depende de redefined( ) (es decir, no lo llama ni llama a código alguno que lo llama de manera indirecta), dicho código no necesita probarse de nuevo en la clase derivada. Base::redefined( ) y Derived::redefined( ) son dos operaciones diferentes con diferentes especifica- ciones e implementaciones. Cada una tendrá un conjunto de requerimientos de prueba deriva-das de la especificación y la implementación. Dichos requerimientos de prueba sondean fallos plausibles: de integración, de condición, de frontera, etcétera. Pero es probable que las opera- 5 En las secciones 19.4.3 a 19.4.6 se realizó una adaptación de un artículo de Brian Marick publicado en el grupo  de noticias de internet llamado comp.testing. Esta adaptación se incluye con el permiso del autor. Para mayor  información acerca de estos temas, vea [Mar94]. Debe observarse que las técnicas estudiadas en estas secciones también son aplicables a software convencional.PUNTO CLAVE La estrategia para la prueba basada  en fallo es elaborar hipótesis acerca de un conjunto de fallos plausibles y luego derivar pruebas para corroborar o descartar cada hipótesis. ¿Qué tipos de fallos se encuentran en los llamados de operación y en las conexiones de mensaje? ? PUNTO CLAVE Aun cuando una clase base se probó ampliamente, todavía tendrá que probar todas las clases derivadas de ella. 19Pressman(437-452).indd   44419Pressman(437-452).indd   444 21/1/10   10:58:3421/1/10   10:58:34