capítulo 20 ■ software embebido 539 de la estación meteorológica a campo abierto también es un sistema embebido, aunque, de nuevo, no requiere una respuesta rápida a eventos externos. además de la necesidad de respuesta en tiempo real, existen entre los sistemas embe-bidos otras diferencias importantes y otros tipos de sistema de software: 1. los sistemas embebidos por lo general operan de manera continua, es decir, su ope- ración no tiene fin. comienzan cuando el hardware se activa y deben ejecutarse hasta que el hardware se desactiva. esto significa que también pueden usarse técni-cas para ingeniería de software fiable, como se explicó en el capítulo 13, para garan-tizar la operación continua. el sistema de tiempo real puede incluir mecanismos de actualización que soporten reconfiguración dinámica, de forma que el sistema pueda actualizarse mientras se encuentra en servicio. 2. las interacciones con el entorno del sistema son incontrolables e impredecibles. en sistemas interactivos el ritmo de la interacción se controla mediante el sistema y, al limitar las opciones del usuario, los eventos a procesar se conocen por adelantado. en contraste, los sistemas embebidos de tiempo real deben responder en cualquier momento a sucesos inesperados. esto conduce a un diseño de sistemas de tiempo real basado en concurrencia, con algunos procesos que se ejecutan en paralelo. 3. puede haber limitaciones físicas que afecten el diseño de un sistema. ejemplos de esto incluyen las limitaciones en la energía disponible al sistema y al espacio físico que ocupa el hardware. dichas limitaciones pueden generar requerimientos para el software embebido, tal como la necesidad de conservar energía y así prolongar la vida de la batería. las limitaciones de tamaño y peso pueden significar que el soft-ware debe hacerse cargo de algunas funciones de hardware debido a la necesidad de restringir el número de chips usados en el sistema. 4. tal vez se requiera interacción directa con el hardware. en los sistemas interactivos y en los sistemas de información, hay una capa de software (los controladores del dispositivo) que ocultan el hardware del sistema operativo. esto es posible porque sólo se puede conectar ciertos tipos de dispositivos a dichos sistemas, tales como teclados, ratones, pantallas, etcétera. en contraste, los sistemas embebidos deben interactuar con una amplia gama de dispositivos de hardware que no tienen contro-ladores de dispositivos separados. 5. los conflictos de protección y fiabilidad pueden dominar el diseño del sistema. muchos sistemas embebidos controlan dispositivos cuyas fallas pueden tener altos costos humanos o económicos. por lo tanto, la confiabilidad es crítica y el diseño del sistema debe garantizar comportamiento crítico para la protección en todo momento. con frecuencia, esto conduce al diseño a un enfoque conservador, en el que se usan técnicas de probada eficacia en vez de técnicas más recientes que pueden introducir nuevos modos de falla. los sistemas embebidos pueden considerarse como sistemas reactivos; esto es, deben reaccionar ante los eventos a la velocidad de ese entorno (berry, 1989; lee, 2002). a menudo, los tiempos de respuesta se rigen por las leyes de la física en vez de ser elegidos por la conveniencia humana. esto está en contraste con otros tipos de software en que el sistema controla la velocidad de la interacción. por ejemplo, el procesador de texto, m20_sommerville_ingenieria_1ed_se_537-564.indd  539m20_sommerville_ingenieria_1ed_se_537-564.indd  539 3/18/11  5:05:49 pm3/18/11  5:05:49 pm