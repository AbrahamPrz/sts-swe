private boolean isbooleanschemaelement(string elementtail) { return elementtail.length() == 0; } private boolean isintegerschemaelement(string elementtail) { return elementtail.equals(“#”); } private boolean parsearguments() throws argsexception { for (currentargument = 0; currentargument < args.length; currentargument++) { string arg = args[currentargument]; parseargument(arg); } return true; } private void parseargument(string arg) throws argsexception { if (arg.startswith(“-”)) parseelements(arg); } private void parseelements(string arg) throws argsexception { for (int i = 1; i < arg.length(); i++) parseelement(arg.charat(i)); } private void parseelement(char argchar) throws argsexception { if (setargument(argchar)) argsfound.add(argchar); else { unexpectedarguments.add(argchar); errorcode = errorcode.unexpected_argument; valid = false; } } private boolean setargument(char argchar) throws argsexception { if (isbooleanarg(argchar)) setbooleanarg(argchar, true); else if (isstringarg(argchar)) setstringarg(argchar); else if (isintarg(argchar)) setintarg(argchar); else return false; return true; } private boolean isintarg(char argchar) { return intargs.containskey(argchar); } 266