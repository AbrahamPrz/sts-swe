capítulo 18 prueba de aplicaciones convencionales 425 empleado ingresa información conforme toma una orden telefónica) y los enlaces repre- sentan las transiciones que ocurren para moverse de estado a estado (por ejemplo, pedi- doinformación se verifica durante inventariobusquedadisponibilidad, y es seguido de la entrada clientefacturainformación). el diagrama de estado (capítulo 7) puede usarse para auxiliar en la creación de gráficos de este tipo. modelado de flujo de datos. los nodos son objetos datos y los enlaces son las transfor- maciones que ocurren para traducir un objeto datos en otro. por ejemplo, el nodo retención de impuesto fica (ftw) se calcula a partir de los ingresos brutos (ib), usando la relación ftw /h11549 0.62 /h11547 ib. modelado de temporización. los nodos son objetos programa y los enlaces son las co- nexiones secuenciales entre dichos objetos. los enlaces ponderados se usan para espe-cificar los tiempos de ejecución requeridos conforme se ejecuta el programa. un análisis detallado de cada uno de estos métodos de prueba basados en gráfico está más allá del ámbito de este libro. si se tiene mayor interés, consulte [bei95] para conocer una cober- tura más amplia. 18.6.2 partición de equivalencia la partición de equivalencia es un método de prueba de caja negra que divide el dominio de en- trada de un programa en clases de datos de los que pueden derivarse casos de prueba. un caso de prueba ideal descubre de primera mano una clase de errores (por ejemplo, procesamiento incorrecto de todos los datos carácter) que de otro modo podrían requerir la ejecución de mu-chos casos de prueba antes de observar el error general. el diseño de casos de prueba para la partición de equivalencia se basa en una evaluación de las clases de equivalencia para una condición de entrada. con los conceptos introducidos en la sección precedente, si un conjunto de objetos puede vincularse mediante relaciones que son simétricas, transitivas y reflexivas, se presenta una clase de equivalencia [bei95]. una clase de equivalencia representa un conjunto de estados válidos o inválidos para condiciones de entrada. por lo general, una condición de entrada es un valor numérico específico, un rango de valores, un conjunto de valores relacionados o una condición booleana. las clases de equivalencia pue-den definirse de acuerdo con los siguientes lineamientos: 1. si una condición de entrada especifica un rango, se define una clase de equivalencia válida y dos in válidas. 2. si una condición de entrada requiere un valor específico, se define una clase de equiva- lencia válida y dos in válidas. 3. si una condición de entrada especifica un miembro de un conjunto, se define una clase de equivalencia válida y una in válida. 4. si una condición de entrada es booleana, se define una clase válida y una inválida. al aplicar los lineamientos para la derivación de clases de equivalencia, pueden desarrollarse y ejecutarse los casos de prueba para cada ítem de datos del dominio de entrada. los casos de prueba se seleccionan de modo que se revise a la vez el número más grande de atributos de una clase de equivalencia. 18.6.3 análisis de valor de frontera un mayor número de errores ocurre en las fronteras del dominio de entrada y no en el “centro”. por esta razón es que el análisis de valor de frontera (bva, del inglés boundary value analysis) se desarrolló como una técnica de prueba. el análisis de valor de frontera conduce a una selección de casos de prueba que revisan los valores de frontera.las clases de entrada se conocen relativamente pronto en el proceso del software. por esta razón, se debe pensar acerca de la partición de equivalencia conforme se crea el diseño.consejo ¿cómo se definen las clases de equivalencia para pruebas?? cita: “una forma efectiva para pro-bar código es revisarlo en sus fronteras naturales.” brian kernighan 18pressman(411-436).indd  42518pressman(411-436).indd  425 21/1/10  10:58:5821/1/10  10:58:58