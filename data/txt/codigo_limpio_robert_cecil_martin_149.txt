filenotfoundexception : public list<recordedgrip> retrievesection(string sectionname) { try { fileinputstream stream = new fileinputstream(sectionname); stream.close(); } catch (filenotfoundexception e) { throw new storageexception(“retrieval error”, e); } return new arraylist<recordedgrip>(); } ahora que hemos definido el ámbito con una estructura try-catch , podemos usar tdd para diseñar el resto de la lógica necesaria. dicha lógica se añade entre la creación de fileinputstream y el cierre, y podemos pretender que no pasa nada incorrecto. intente crear pruebas que fuercen las excepciones, para después añadir al controlador un comportamiento que satisfaga dichas pruebas. de este modo primero creará el ámbito de transacción del bloque try y podrá mantener la naturaleza de transacción del ámbito. usar excepciones sin comprobar el debate ha terminado. durante años, los programadores de java han debatido las ventajas y los problemas de las excepciones comprobadas. cuando aparecieron en la primera versión de java, parecían una gran idea. la firma de todos los métodos enumeraría todas las excepciones que se podían pasar a su invocador. es más, estas excepciones formaban parte del tipo del método. el código no se compilaría si la firma no coincidía con lo que el código iba a hacer. en aquel momento, pensábamos que las excepciones comprobadas eran una gran idea y sí, ofrecían ciertas ventajas. sin embargo, ahora es evidente que no se necesitan para crear software robusto. c# carece de excepciones comprobadas y, a pesar de los intentos, c++ tampoco, como sucede en python o ruby. y en todos estos lenguajes se puede crear software robusto. por ello, debemos decidir si las excepciones comprobadas valen su precio. ¿qué precio? el precio de las excepciones comprobadas es un 150