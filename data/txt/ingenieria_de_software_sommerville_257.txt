240  Capítulo 9 ■ Evolución del software  Sin embargo, es posible que surjan problemas en situaciones donde haya transferencia  de un equipo de desarrollo a un equipo separado responsable de la evolución. Existen dos situaciones potencialmente problemáticas: 1. Donde el equipo de desarrollo haya usado un enfoque ágil, pero el equipo de evolu- ción no esté familiarizado con los métodos ágiles y prefiera un enfoque basado en un plan. Quizás el equipo de evolución espere documentación detallada para apoyar la evolución, y esto rara vez sucede en los procesos ágiles. Podría no haber un enun-ciado definitivo de los requerimientos del sistema que sea modificable conforme se realizan cambios al sistema. 2. Donde se haya usado un enfoque basado en un plan para el desarrollo, pero el equipo de evolución prefiera usar métodos ágiles. En este caso, el equipo de evolución tal vez deba comenzar desde cero para desarrollar pruebas automatizadas y, además, es posible que el código en el sistema no se haya refactorizado y simplificado como se espera en el desarrollo ágil. En este caso, tal vez se requiera algo de reingeniería para mejorar el código, antes de usarlo en un proceso de desarrollo ágil.  Poole y Huisman (2001) reportan sus experiencias en el uso de programación extrema, para mantener un sistema grande que originalmente se desarrolló usando un enfoque basado en un plan. Después de someter el sistema a reingeniería para mejorar su estruc-tura, XP se usó con mucho éxito en el proceso de mantenimiento.  9.2 Evolución dinámica del programa La dinámica de evolución del programa es el estudio del cambio al sistema. En las décadas de 1970 y 1980, Lehman y Belady (1985) realizaron varios estudios empíricos acerca del cambio al sistema, con una visión para entender más sobre las características de la evolución del software. El trabajo continuó en la década de 1990, conforme Lehman y sus colegas investigaron la importancia de la retroalimentación en los procesos de evolución (Lehman, 1996; Lehman et al., 1998; Lehman et al., 2001). A partir de estos estudios, propusieron las “leyes de Lehman” relacionadas al cambio del sistema (figura 9.7). Lehman y Belady afirman que dichas leyes suelen ser verdaderas para todos los tipos de sistemas de software organizacional grandes (los llamados sistemas tipo E). Se trata de sistemas en los cuales los requerimientos se modifican para reflejar las necesidades cam-biantes de la empresa. Las nuevas versiones del sistema son esenciales para que éste proporcione valor al negocio. La primera ley afirma que el mantenimiento del sistema es un proceso inevitable. A medida que cambia el entorno del sistema, surgen nuevos requerimientos y el sistema debe modificarse. Cuando el sistema modificado se reintroduce al entorno, promueve más cambios ambientales, de manera que el proceso de evolución comienza de nuevo. La segunda ley afirma que, conforme cambia un sistema, su estructura se degrada. La única manera de evitar que esto ocurra es invertir en mantenimiento preventivo. Se invierte tiempo mejorando la estructura del software sin agregar nada a su funcionali-dad. Evidentemente, esto significa costos adicionales, por encima de los asignados para implementar los cambios requeridos al sistema.  M09_SOMMERVILLE_INGENIERIA_1ED_SE_234-260.indd   240M09_SOMMERVILLE_INGENIERIA_1ED_SE_234-260.indd   240 3/18/11   4:52:24 PM3/18/11   4:52:24 PM