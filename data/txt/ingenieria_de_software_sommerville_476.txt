17.1 ■ Componentes y modelos de componentes  459 WSDL, que se estudia en el capítulo 19; EJB es específico de Java, de manera que  se usa Java como el lenguaje de definición de interfaz; en .NET, las interfaces se definen con el Common Intermediate Language (CIL, lenguaje intermedio común). Algunos modelos de componentes requieren interfaces específicas que deben defi-nirse por un componente. Se usan para componer el componente con la infraestruc-tura de modelo de componentes, que ofrece servicios estandarizados, tales como seguridad y gestión de transacción. 2. Uso Para que los componentes se distribuyan y se acceda a ellos de manera remota, deben tener un nombre único asociado. Éste debe ser totalmente único, por ejemplo, en EJB se genera un nombre jerárquico con la raíz basada en un nombre de dominio de Internet. Los servicios tienen un URI único (Uniform Resource Identifier, esto es, un identificador de recursos uniforme).  Los metadatos de componente son datos acerca del componente en sí, tales como  información acerca de sus interfaces y atributos. Los metadatos son importantes por-que permiten a los usuarios del componente determinar qué servicios se proporcio-nan y requieren. Las implementaciones de modelos de componentes por lo general incluyen formas específicas (tales como el uso de una interfaz de reflexión en Java) para acceder a los metadatos de este componente.  Los componentes son entidades genéricas y, cuando se implementan, deben confi- gurarse para ajustarse en un sistema de aplicación. Por ejemplo, se podría configurar el componente recolector de datos (figura 17.3) al definir el número máximo de sen-sores en un arreglo. Por lo tanto, el modelo de componentes puede especificar cómo pueden personalizarse los componentes binarios para un entorno de implementación particular. 3. Implementación  El modelo de componentes incluye una especificación de cómo  deben empacarse los componentes para su implementación como entidades ejecuta-bles independientes. Puesto que los componentes son entidades independientes, deben empacarse con todo el software de soporte que no proporcione la infraestructura de componente, o que no esté definido en una interfaz “requiere”. La información de implementación incluye información sobre el contenido de un paquete y su orga-nización binaria.  Inevitablemente, conforme surjan nuevos requerimientos, los componentes deberán  cambiarse o sustituirse. Por consiguiente, el modelo de componentes puede incluir Modelo de componentesInformación de usoDefinición de interfazInterfaces específicasComposiciónConvención de nomenclatura Acceso a metadatosPersonalización EmpacadoDocumentación Soporte de evolución InterfacesImplementación y uso Figura 17.4 Elementos  básicos de un modelo  de componentes M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   459M17_SOMMERVILLE_INGENIERIA_1ED_SE_452-478.indd   459 3/18/11   5:03:05 PM3/18/11   5:03:05 PM