CAPÍTULO 7  MODELADO DE LOS REQUERIMIENTOS 169  7.4 PATRONES  PARA  EL MODELADO  DE REQUERIMIENTOS Los patrones de software son un mecanismo para capturar conocimiento del dominio, en forma  que permita que vuelva a aplicarse cuando se encuentre un problema nuevo. En ciertos casos, el conocimiento del dominio se aplica a un nuevo problema dentro del mismo dominio de la aplicación. En otros, el conocimiento del dominio capturado por un patrón puede aplicarse por analogía a otro dominio de una aplicación diferente por completo. El autor original de un patrón de análisis no “crea” el patrón, sino que lo descubre a medida  que se realiza el trabajo de ingeniería de requerimientos. Una vez descubierto el patrón, se do-cumenta describiendo “explícitamente el problema general al que es aplicable el patrón, la so-lución prescrita, las suposiciones y restricciones del uso del patrón en la práctica y, con frecuen-cia, alguna otra información sobre éste, como la motivación y las fuerzas que impulsan el empleo del patrón, el análisis de las ventajas y desventajas del mismo y referencias a algunos ejemplos conocidos de su empleo en aplicaciones prácticas” [Dev01]. En el capítulo 5 se presentó el concepto de patrones de análisis y se indicó que éstos repre- sentan una solución que con frecuencia incorpora una clase, función o comportamiento dentro del dominio de aplicación. El patrón vuelve a utilizarse cuando se hace el modelado de los re-querimientos para una aplicación dentro del dominio. 11 Los patrones de análisis se guardan en  un depósito para que los miembros del equipo de software usen herramientas de búsqueda para encontrarlos y volverlos a emplear. Una vez seleccionado un patrón apropiado, se integra en el modelo de requerimientos, haciendo referencia a su nombre. 7.4.1  Descubrimiento de patrones de análisis El modelo de requerimientos está formado por una amplia variedad de elementos: basados en el escenario (casos de uso), orientados a datos (el modelo de datos), basados en clases, orien-tados al flujo y del comportamiento. Cada uno de estos elementos estudia el problema desde Objetivo: Las herramientas de modelado del análisis dan  la capacidad de desarrollar modelos basados en el esce- nario, en la clase y en el comportamiento con el uso de notación UML. Mecánica: Las herramientas en esta categoría dan apoyo a toda la  variedad de diagramas UML requeridos para construir un modelo del análisis (estas herramientas también apoyan el modelado del diseño). Además de los diagramas, las herramientas en esta categoría 1) hacen revisiones respecto de la consistencia y corrección para todos los diagramas UML, 2) proveen vínculos para producir el diseño y generar el código, y 3) construyen una base de datos que permite administrar y evaluar modelos UML grandes requeridos en sistemas complejos. Herramientas representativas: 10 Las herramientas siguientes apoyan toda la variedad de diagramas  UML que se requieren para modelar el análisis:ArgoUML es una herramienta de fuente abierta disponible en  argouml.tigris.org. Enterprise Architect, desarrollada por Sparx Systems (www. sparxsystems.com.au). PowerDesigner, desarrollada por Sybase (www.sybase.com). Rational Rose, desarrollada por IBM (Rational) (www01.ibm. com/software/rational/). System Architect, desarrollada por Popkin Software (www.popkin. com). UML Studio, desarrollada por Pragsoft Corporation (www.  pragsoft.com). Visio, desarrollada por Microsoft (www.microsoft.com). Visual UML, desarrollada por Visual Object Modelers (www. visualuml.com).HERRAMIENTAS  DE SOFTWARE Modelación de análisis generalizado en UML 10 Las herramientas mencionadas aquí no son obligatorias sino una muestra de las que hay en esta categoría. En la  mayoría de casos, los nombres de las herramientas son marcas registradas por sus respectivos desarrolladores. 11 En el capítulo 12 se presenta un análisis a profundidad del uso de patrones durante el diseño del software. 07Pressman(158-182).indd   16907Pressman(158-182).indd   169 14/1/10   14:19:4014/1/10   14:19:40