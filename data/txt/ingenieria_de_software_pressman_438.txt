CAPÍTULO 17  ESTRATEGIAS DE PRUEBA DE SOFTWARE 407 de depuración de fuerza bruta se aplican cuando todo lo demás falla. Al usar una filosofía de  “deje que la computadora encuentre el error”, se toman copias de la memoria ( dumps), se invo- can rastreos en el tiempo de corrida y el programa se carga con enunciados de salida. La espe-ranza es que, en alguna parte del pantano de información que se produzca, se encontrará una pista que pueda conducir a la causa de un error. Aunque la masa de información producida a final de cuentas puede conducir al éxito, con más frecuencia conduce a desperdicio de esfuerzo y tiempo. ¡Piense que primero debe gastarse! El seguimiento hacia atrás o vuelta atrás es un enfoque de depuración bastante común que  puede usarse exitosamente en programas pequeños. Al comenzar en el sitio donde se descubrió un síntoma, el código fuente se rastrea hacia atrás (de manera manual) hasta que se encuentra la causa. Por desgracia, conforme aumenta el número de líneas fuente, el número de rutas po-tenciales hacia atrás puede volverse inmanejable. El tercer enfoque de la depuración, la eliminación de la causa, se manifiesta mediante induc- ción o deducción, e introduce el concepto de partición binaria. Los datos relacionados con la ocurrencia del error se organizan para aislar las causas potenciales. Se plantea una “hipótesis de causa” y los datos anteriormente mencionados se usan para probar o refutar la hipótesis. De manera alternativa, se desarrolla una lista de las posibles causas y se realizan pruebas para eliminar cada una. Si las pruebas iniciales indican que una hipótesis de causa particular se muestra prometedora, los datos se refinan con la intención de aislar el error. Depuración automatizada.  Cada uno de estos enfoques de depuración puede complemen- tarse con herramientas de depuración que puedan proporcionar apoyo semiautomático con-forme se intenten estrategias de depuración. Hailpern y Santhanam [Hai02] resumen el estado de estas herramientas cuando apuntan: “... se han propuesto muchos nuevos enfoques y están disponibles muchos entornos de depuración comerciales. Los entornos de desarrollo integrados (IDE) brindan una forma de capturar algunos de los errores predeterminados específicos del lenguaje (por ejemplo, falta de caracteres de fin de sentencia , variables indefinidas, etc.) sin requerir compilación”. Se dispone de una gran variedad de compiladores de depuración, ayudas dinámicas de depuración (“trazadores”), generadores automáticos de casos de prueba y herra-mientas de mapeo de referencia cruzada. Sin embargo, las herramientas no son un sustituto Cita: “El primer paso para reparar un  programa descompuesto es hacerlo fallar repetidamente (en el ejemplo más simple posible).” T. Duff Objetivo: Estas herramientas proporcionan asistencia  automatizada para quienes deben depurar problemas de  software. La intención es proporcionar conocimiento que puede ser difícil de obtener si se aborda el proceso de depuración de forma manual. Mecánica: La mayoría de las herramientas de depuración son espe- cíficas del lenguaje de programación y del entorno. Herramientas representativas: 6 Borland Gauntlet, distribuido por Borland (www.borland. com),  auxilia tanto en las pruebas como en la depuración. Coverty Prevent SQS, desarrollada por Coverty (www.coverty. com), proporciona asistencia de depuración tanto para C++  como para Java.C++Test, desarrollada por Parasoft (www.parasoft.com), es una  herramienta de prueba de unidad que soporta un rango completo de pruebas en código C y C++. Las características de depuración ayudan en el diagnóstico de errores que se encuentren. CodeMedic, desarrollada por NewPlanet Software (www. newplanetsfotware.com/medic/), proporciona una inter-faz gráfica para el depurador estándar UNIX, gdb, e implementa sus características más importantes. En la actualidad, gdb soporta  C/C++, Java, PalmOS, varios sistemas incrustados, lenguaje ensamblador, FORTRAN y Modula-2. GNATS, una aplicación freeware (www.gnu.org/software/ gnats), es un conjunto de herramientas para rastrear reportes de error.HERRAMIENTAS  DE SOFTWARE Depuración 6 Las herramientas que se mencionan aquí no representan un respaldo, sino una muestra de las herramientas en  esta categoría. En la mayoría de los casos, los nombres de las herramientas son marcas registradas por sus res- pectivos desarrolladores. 17Pressman(383-410).indd   40717Pressman(383-410).indd   407 21/1/10   10:59:2621/1/10   10:59:26