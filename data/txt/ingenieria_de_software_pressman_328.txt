capítulo 12 diseño basado en patrones 297 •  el patrón tiene un componente humano significativo (minimiza la intervención humana). todo el software sirve para el confort humano o la calidad de vida; los mejores patrones recurren ex-plícitamente a la estética y a la utilidad. dicho en forma más clara, un buen patrón de diseño incorpora el conocimiento de diseño prag- mático, ganado con dificultad, en una forma que permite que otros lo reutilicen “un millón de veces sin elaborarla dos veces de la misma forma”. un patrón de diseño evita “reinventar la rueda” o, peor aún, inventar una “nueva rueda” que sea un poco menos redonda, demasiado pequeña para el uso que se pretende y muy angosta para el terreno en el que rodará. si se usan con eficacia, los patrones de diseño invariablemente harán del lector un buen diseñador de software. 12.1.1 clases de patrones una de las razones por las que los ingenieros de software están interesados (e intrigados) por los patrones de diseño es que los seres humanos son inherentemente buenos para reconocer patrones. si no fuera así, estaríamos congelados en el tiempo y el espacio: seríamos incapaces de aprender de nuestras experiencias, sin voluntad para ir más lejos debido a que nuestra inca-pacidad de reconocer situaciones nos haría correr grandes riesgos, estaríamos desarticulados por un mundo que parecería no tener regularidades ni consistencia lógica. por suerte, nada de esto sucede debido a que reconocemos patrones en virtualmente todos los aspectos de nuestras vidas. en el mundo real, los patrones que reconocemos los aprendemos en el tiempo que dura nuestra vida. los reconocemos al instante y comprendemos inherentemente lo que significan y cómo podemos usarlos. algunos de estos patrones nos permiten detectar fenómenos recurren-tes. por ejemplo, imagine que va camino a casa desde su trabajo, por la autopista, cuando su sistema de navegación (o el radio) le informa que en dirección opuesta ocurrió un serio acci-dente. se encuentra a siete kilómetros del accidente, pero ya vio que el tráfico se hace lento, reconoce un patrón que llamamos cuellodebotella. las personas que están en los carriles en la dirección que sigue usted disminuyen su velocidad para ver lo que pasó en el lado opuesto de la carretera. el patrón cuellodebotella produce resultados predecibles (embotellamiento), pero no hace nada más que describir un fenómeno. en el habla de los patrones, éste sería un patrón no generativo debido a que describe un contexto y un problema, pero no ofrece ninguna solución clara. cuando se toman en cuenta los patrones de diseño de software, se intenta identificar los patrones generativos. es decir, se identifica un patrón que describa un aspecto importante y re- petitivo de un sistema, y que provea una manera de construir dicho aspecto dentro de un sis-tema de fuerzas que son únicas en un contexto determinado. idealmente, podría usarse un conjunto de patrones de diseño generativos para “generar” una aplicación o sistema basado en computadora cuya arquitectura permita adaptarlo al cambio. en ocasiones se llama generativi- dad a “la aplicación sucesiva de varios patrones, cada uno de los cuales incluye su propio pro- blema y fuerzas, y que despliega una solución más grande que emerge indirectamente como resultado de soluciones más pequeñas” [app00]. los patrones de diseño abarcan un amplio espectro de abstracción y aplicaciones. los patro- nes arquitectónicos describen problemas de diseño de base amplia que se resuelven con el em-pleo de un enfoque estructural. los patrones de datos describen problemas recurrentes orienta- dos a datos y las soluciones de modelado de datos que pueden emplearse para resolverlos. los patrones de componentes (también llamados patrones de diseño) se enfocan a problemas asocia- dos con el desarrollo de subsistemas y componentes, así como a la manera en la que se comu-nican entre sí y su ubicación dentro de una arquitectura mayor. los patrones de diseño de la in- terfaz describen problemas comunes de interfaz de usuario y su solución con un sistema de fuerzas que incluye las características específicas de los usuarios finales. los patrones de webapp punto clave un patrón “generativo” describe el problema, el contexto y las fuerzas, y también una solución práctica para el problema. 12pressman(295-316).indd  29712pressman(295-316).indd  297 14/1/10  16:23:3514/1/10  16:23:35