para eliminar la duplicación de datos. Imagine también cómo la programación orientada a objetos concentra el código en clases base que en otros casos serian redundantes. La programación estructurada, la programación orientada a aspecto y la orientada a componentes son, en parte, estrategias para eliminar duplicados. Parece que, desde la aparición de las subrutinas, las innovaciones en desarrollo de  software  han sido un intento continuado por eliminar la duplicación de nuestro código fuente. Programación estructurada Algunos programadores siguen las reglas de programación estructurada de Edsger Dijkstra [23] . Dijkstra afirma que todas las funciones y todos los bloques de una función deben tener una entrada y una salida. Estas reglas implican que sólo debe haber una instrucción  return  en una función, que no debe haber instrucciones  break  o  continue  en un bucle y nunca, bajo ningún concepto, debe haber instrucciones  goto . Aunque apreciemos los objetivos y disciplinas de la programación estructurada, no sirven de mucho cuando las funciones son de reducido tamaño. Su verdadero beneficio se aprecia en funciones de gran tamaño. Por tanto, si sus funciones son de tamaño reducido, una instrucción return ,  break  o  continue  no hará daño alguno y en ocasiones puede resultar más expresiva que la regla de una entrada y una salida. Por otra parte,  goto sólo tiene sentido en funciones de gran tamaño y debe evitarse. Cómo crear este tipo de funciones La creación de  software  es como cualquier otro proceso creativo. Al escribir un informe o un artículo, primero se estructuran las ideas y después el mensaje hasta que se lea bien. El primer borrador puede estar desorganizado, de modo que lo retoca y mejora hasta que se lea de la forma adecuada. Cuando creo funciones, suelen ser extensas y complicadas, con abundancia de sangrados y bucles anidados. Con extensas listas de 82