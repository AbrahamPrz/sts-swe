546  Capítulo 20 ■ Software embebido  El sistema de entrega de combustible está diseñado para permitir el funcionamiento  sin atención. El comprador inserta una tarjeta de crédito en un lector de tarjetas colocado en la bomba. Esto provoca una transición a un estado Lectura donde se leen detalles de la tarjeta, y entonces se pide al comprador retirar la tarjeta. Al retirarla se activa una transi-ción hacia un estado Validar donde se valida la tarjeta. Si la tarjeta es válida, el sistema pone en acción la bomba y, cuando la manguera de combustible se retira de su soporte, se traslada hacia el estado Entregar, donde está lista para suministrar el combustible. Al accionar el activador de la boquilla se bombea el combustible; esto se detiene cuando se suelta el activador (por simplicidad, se ignoró el interruptor de presión diseñado para detener el derrame de combustible). Después de completar la entrega de combustible y de que el comprador coloca la manguera en su soporte, el sistema se mueve hacia un estado Pago donde se carga a la cuenta del usuario. Después del pago, el software de la bomba regresa al estado Espera.  20.1.2 Programación en tiempo real Los lenguajes de programación para el desarrollo de sistemas de tiempo real deben incluir instalaciones para acceder al hardware del sistema, y debe ser factible predecir la tem-porización de operaciones particulares en dichos lenguajes. Los sistemas de tiempo real duros se programan todavía en ocasiones en lenguaje ensamblador, de modo que pueda cumplirse con los plazos ajustados. También se usan ampliamente los lenguajes a nivel de sistemas, tales como C, que permiten la generación de un código eficiente. La ventaja de usar un lenguaje de programación de sistemas como C es que permite el desarrollo de programas muy eficientes. Sin embargo, dichos lenguajes no incluyen sen-tencias para soportar concurrencia o la gestión de recursos compartidos. Concurrencia y gestión de recursos se implementan a través de llamadas a primitivas proporcionadas por el sistema operativo de tiempo real, tales como semáforos para exclusión mutua. Dichas llamadas no pueden probarse por el compilador, así que son más probables los errores de programación. Con frecuencia, los programas también son difíciles de comprender, por-que los lenguajes no incluyen características de tiempo real. Además de comprender el pro-grama, el lector debe conocer cómo se brinda el soporte de tiempo real mediante llamadas de sistema. Puesto que los sistemas de tiempo real deben satisfacer sus restricciones de tempori-zación, no podrán usar desarrollo orientado a objetos para sistemas de tiempo real duros. El desarrollo orientado a objetos implica ocultar representaciones de datos y dar acceso a valores de atributos a través de operaciones definidas con el objeto. Esto quiere decir que hay una significativa carga en rendimiento en los sistemas orientados a objetos, debido a que se requiere código adicional para mediar el acceso a los atributos y manejar las lla-madas a las operaciones. La consecuente pérdida de rendimiento puede hacer imposible cumplir con los plazos en tiempo real. Se diseñó una versión de Java para el desarrollo de sistemas embebidos (Dibble, 2008), con implementaciones de diferentes compañías, como IBM y Sun. Este lenguaje incluye un mecanismo de hilo modificado, que permite especificar hilos que no se interrumpi-rán por el mecanismo de recolección de basura del lenguaje. También se deben incluir ma-nejo de eventos asíncronos y especificación de temporización. Sin embargo, al momento de escribir el libro, esto se ha usado principalmente en plataformas con representativa capacidad de procesador y de memoria (por ejemplo, un teléfono celular), y no en siste-mas embebidos más simples, con recursos más limitados. Estos sistemas generalmente se siguen implementando en C. M20_SOMMERVILLE_INGENIERIA_1ED_SE_537-564.indd   546M20_SOMMERVILLE_INGENIERIA_1ED_SE_537-564.indd   546 3/18/11   5:05:49 PM3/18/11   5:05:49 PM