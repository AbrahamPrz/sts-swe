15.1 ■ análisis estático 399 los analizadores estáticos automatizados son herramientas de software que exploran el texto fuente de un programa y detectan posibles fallas en el desarrollo y anomalías. examinan sintácticamente el texto del programa y, además, reconocen los diferentes tipos de enunciados en un programa. de esta forma, pueden detectar si los enunciados están bien formulados o no, hacer inferencias acerca del flujo de control en el programa y, en muchos casos, calcular el conjunto de todos los posibles valores para datos del programa. éstos complementan las instalaciones de detección de error que proporciona el compilador de lenguaje, y pueden usarse como parte del proceso de inspección o como una actividad de proceso v&v separada. el análisis estático automatizado es más rápido y menos costoso que las revisiones de código detalladas. sin embargo, no es capaz de descubrir algunas cla-ses de errores que pudieran identificarse en sesiones de inspección del programa. la intención del análisis estático automatizado es llamar la atención de un lector de código ante anomalías en el programa, tales como variables que se usan sin inicializa-ción, variables que no se emplean o datos cuyo valor pudiera estar fuera de rango. en la figura 15.2 se muestran ejemplos de los problemas susceptibles de detección mediante análisis estático. desde luego, las comprobaciones específicas realizadas son específicas del lenguaje de programación y dependen de qué se permite y qué no se permite en el lenguaje. con frecuencia, las anomalías son resultado de errores u omisiones de pro-gramación, de manera que destacan aquello que pudiera salir mal cuando se ejecuta el programa. sin embargo, debe quedar claro que dichas anomalías no necesariamente son fallas en el desarrollo del programa; pueden ser instrucciones deliberadas introducidas por el programador, o es posible que la anomalía no tenga consecuencias adversas. existen tres niveles de comprobación que pueden implementarse en analizadores estáticos: 1. comprobación de error característico en este nivel, el analizador estático sabe acerca de errores comunes que cometen los programadores en lenguajes como java o c. la herramienta analiza el código en busca de patrones que sean característicos de ese problema y los destaca para el programador. aunque relativamente simple, clase de fallas en el desarrollo comprobación de análisis estático fallas de datos variables usadas antes de inicialización. variables declaradas pero nunca usadas.variables asignadas dos veces pero nunca usadas entre asignaciones.posibles violaciones de límites de arreglo.variables no declaradas. fallas de control código inalcanzable.ramas incondicionales en ciclos. fallas entrada/salida variables de salida dobles sin intervención de asignación. fallas de interfaz incompatibilidad del tipo de parámetro.incompatibilidad del número de parámetro.no se usan resultados de funciones.funciones y procedimientos no llamados. fallas de gestión de almacenamiento apuntadores no asignados.aritmética de apuntadores.fuga de memoria. figura 15.2 comprobaciones de análisis estático automatizado m15_sommerville_ingenieria_1ed_se_393-422.indd  399m15_sommerville_ingenieria_1ed_se_393-422.indd  399 3/18/11  5:01:19 pm3/18/11  5:01:19 pm