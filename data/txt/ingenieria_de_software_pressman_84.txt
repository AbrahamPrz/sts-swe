capítulo 2 modelos del proceso 53 niería de software, desde el desarrollo del concepto hasta el mantenimiento del sistema a largo plazo. el modelo de proceso concurrente permite que un equipo de software represente los elemen- tos iterativos y concurrentes de cualquier modelo de proceso. los modelos especializados in-cluyen el basado en componentes, que pone el énfasis en la reutilización y ensamble de los componentes; el modelo de métodos formales consiste en un enfoque basado en matemáticas para desarrollar y verificar el software; y el modelo orientado a aspectos implica preocupaciones globales que afectan toda la arquitectura del sistema. el proceso unificado es un proceso del software diseñado como estructura para los métodos y herramientas del uml, y está “impulsado por el caso de uso, centrado en la arquitectura, y es iterativo e incremental”. se han propuesto modelos personal y del equipo para el proceso del software. ambos enfa- tizan la medición, planeación y autodirección como los ingredientes clave para un proceso exitoso del software.  problemas y puntos por evaluar 2.1. en la introducción de este capítulo, baetjer afirma que: “el proceso genera interacción entre usuarios y diseñadores, entre usuarios y herramientas cambiantes [tecnología].” enliste cinco preguntas que a) los di- señadores deben responder a los usuarios, b) los usuarios deben plantear a los diseñadores, c) los usuarios deben hacerse a sí mismos sobre el producto de software que ha de elaborarse, d) los diseñadores deben plantearse acerca del producto de software que va a construirse y del proceso que se usará para ello. 2.2. trate de desarrollar un conjunto de acciones para la actividad de comunicación. seleccione una acción y defina un conjunto de tareas para ella.2.3. un problema común durante la comunicación ocurre cuando se encuentra a dos participantes que tienen ideas en conflicto sobre lo que debe ser el software, es decir, que tienen requerimientos mutuamente conflictivos. desarrolle un patrón del proceso (esto sería un patrón de la etapa) con el empleo de la plantilla presentada en la sección 2.1.3 que aborda este problema y sugiera un enfoque eficaz para él. 2.4. investigue un poco sobre el pps y haga una breve presentación que describa los tipos de mediciones que se pide hacer a un ingeniero individual de software y la forma en la que pueden usarse para mejorar la eficacia personal. 2.5. el uso de scripts (mecanismo requerido en el pes) no es apreciado de manera universal en la comuni- dad del software. haga una lista de pros y contras en relación con los scripts y sugiera al menos dos situa- ciones en las que serían útiles, y otras dos en las que generarían menos beneficios. 2.6. lea a [nog00] y escriba un ensayo de dos o tres páginas donde analice el efecto que tiene el “caos” en la ingeniería de software.2.7. dé tres ejemplos de proyectos de software que podrían efectuarse con el modelo de cascada. sea espe- cífico.2.8. proporcione tres ejemplos de proyectos de software que podrían abordarse con el modelo de hacer prototipos. sea específico.2.9. ¿qué adaptaciones del proceso se requerirían si el proyecto evolucionara en un sistema o producto que se entregase?2.10. diga tres ejemplos de proyectos de software que podrían realizarse con el modelo incremental. sea específico.2.11. conforme avanza hacia fuera por el flujo de proceso en espiral, ¿qué puede decirse sobre el software que se está desarrollando o que está en mantenimiento?2.12. ¿es posible combinar modelos de proceso? si es así, diga un ejemplo. 2.13. el modelo de proceso concurrente define un conjunto de “estados”. describa con sus propias palabras qué es lo que representan, y después indique cómo entran en juego dentro del modelo de proceso concu- rrente. 02pressman(025-054).indd  5302pressman(025-054).indd  53 14/1/10  13:36:5314/1/10  13:36:53