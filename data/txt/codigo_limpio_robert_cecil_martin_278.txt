return am != null && am.getboolean(); } argumentos de cadena la inclusión de los argumentos string fue similar a la de los argumentos boolean . tuve que cambiar hashmap y conseguir que funcionaran parse , set y get . no deberían producirse sorpresas posteriores a excepción de que la implementación completa se incluía en la clase argumentmarshaller en lugar de distribuirla en variantes. private map<character, argumentmarshaler > stringargs = new hashmap<character, argumentmarshaler >(); … private void parsestringschemaelement(char elementid) { stringargs.put(elementid, new stringargumentmarshaler()); } … private void setstringarg(char argchar) throws argsexception { currentargument++; try { stringargs. get (argchar). setstring (args[currentargument]); } catch (arrayindexoutofboundsexception e) { valid = false; errorargumentid = argchar; errorcode = errorcode.missing_string; throw new argsexception(); } } … public string getstring (char arg) { args.argumentmarshaler am = stringargs.get(arg); return am == null ? “” : am.getstring(); } … private class argumentmarshaler { private boolean booleanvalue = false; private string stringvalue; public void setboolean(boolean value) { booleanvalue = value; } public boolean getboolean() { return booleanvalue; } public void setstring(string s) { 279