490  Capítulo 18 ■ Ingeniería de software distribuido  18. 3 Patrones arquitectónicos  para sistemas distribuidos Como se explicó en la introducción de este capítulo, los diseñadores de sistemas dis- tribuidos deben organizar sus diseños de sistema para encontrar un equilibrio entre rendimiento, confiabilidad, seguridad y manejabilidad del sistema. No hay un modelo universal de organización de sistemas adecuado a todas las circunstancias, así que han surgido varios estilos arquitectónicos distribuidos. Cuando diseñe una aplicación distri-buida, deberá elegir un estilo arquitectónico que soporte los requerimientos no funciona-les críticos de su sistema. En esta sección se describen cinco estilos arquitectónicos: 1. Arquitectura maestro-esclavo, que se usa en sistemas de tiempo real en los que se  requiere garantía de tiempos de respuesta de interacción. 2. Arquitectura cliente-servidor de dos niveles, que se usa para sistemas cliente-servi-dor simple, y en situaciones donde es importante centralizar el sistema por razones de seguridad. En tales casos, la comunicación entre el cliente y el servidor por lo general está encriptada. 3. Arquitectura cliente-servidor multinivel, que se usa cuando existe un enorme volu-men de transacciones a procesar por el servidor. 4. Arquitectura de componentes distribuidos, que se usa cuando es necesario combinar los recursos de diferentes sistemas y bases de datos, o como un modelo de imple-mentación para sistemas cliente-servidor multinivel. 5. Arquitectura peer-to-peer (entre pares o punto a punto, o par a par), que se usa  cuando los clientes intercambian de manera local la información almacenada, y el papel del servidor es presentar a los clientes entre sí. También puede usarse cuando se deba elaborar un amplio número de cálculos independientes.  18.3.1 Arquitecturas maestro-esclavo Las arquitecturas maestro-esclavo para sistemas distribuidos se usan comúnmente en sistemas de tiempo real donde puede haber procesadores separados asociados con la Capa de procesamiento de aplicaciónCapa de gestión de datosCapa de presentación Capa de base de datosFigura 18.6 Modelo  arquitectónico en capas  para una aplicación cliente-servidor M18_SOMMERVILLE_INGENIERIA_1ED_SE_479-507.indd   490M18_SOMMERVILLE_INGENIERIA_1ED_SE_479-507.indd   490 3/18/11   5:03:55 PM3/18/11   5:03:55 PM