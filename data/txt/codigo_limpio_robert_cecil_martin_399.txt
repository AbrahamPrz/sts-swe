} esta sencilla aplicación espera una conexión, procesa un mensaje entrante y vuelve a esperar a la siguiente solicitud cliente. el código cliente para conectarse al servidor es el siguiente: private void connectsendreceive(int i) { try { socket socket = new socket (“localhost”, port); messageutils.sendmessage(socket, integer.tostring(i)); messageutils.getmessage(socket); socket.close(); } catch (exception e) { e.printstacktrace(); } } ¿cómo se comporta esta combinación de cliente y servidor? ¿cómo podemos describir formalmente ese rendimiento? la siguiente prueba afirma que el rendimiento es aceptable: @test(timeout = 10000) public void shouldruninunder10seconds() throws exception { thread[] threads = createthreads(); startallthreadsw(threads); waitforallthreadstofinish(threads); } se omite la configuración para que el ejemplo sea sencillo (véase “ clienttest.java ” más adelante). esta prueba afirma que debe completarse en 10 000 milisegundos. es un ejemplo clásico de validación del rendimiento de un sistema. este sistema debe completar una serie de solicitudes cliente en 10 segundos. mientras el servidor pueda procesar cada solicitud cliente a tiempo, la prueba será satisfactoria. ¿qué sucede si la prueba falla? aparte de desarrollar algún tipo de bucle de consulta de eventos, no hay mucho que hacer en un único proceso para aumentar la velocidad de este código. ¿se solucionaría el problema con varios procesos? puede, pero necesitamos saber cómo se consume el tiempo. hay dos posibilidades: e/s: con un socket, conectándose a la base de datos, esperando al intercambio de memoria virtual, etc. procesador: cálculos numéricos, procesamiento de expresiones 400