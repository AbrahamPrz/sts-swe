CAPÍTULO 29  MANTENIMIENTO Y REINGENIERÍA 669  29.8 I NGENIERÍA  HACIA  ADELANTE Un programa con flujo de control que sea el equivalente gráfico de una olla de espagueti, con  “módulos” que tienen 2 000 enunciados de largo, con pocas líneas de comentarios significativos en 290 000 enunciados fuente y sin otra documentación, debe modificarse para alojar los cam-biantes requisitos de usuario. Se tienen las siguientes opciones:  1. Para implementar los cambios necesarios puede luchar a través de modificación tras  modificación, combatir al diseño ad hoc y el código fuente enredado.  2. Puede intentar comprender los funcionamientos interiores más amplios del programa  con la intención de hacer modificaciones de manera más efectiva.  3. Puede rediseñar, recodificar y poner a prueba aquellas porciones del software que re- quieran modificación y aplicar un enfoque de ingeniería de software a todos los seg- mentos revisados.  4. Puede rediseñar, recodificar y poner a prueba completamente el programa, y usar herra- mientas de reingeniería para ayudar a comprender el diseño actual. No hay una sola opción “correcta”. Las circunstancias pueden dictar la primera opción incluso  si las otras son más deseables. En lugar de esperar hasta recibir una solicitud de mantenimiento, la organización de desa- rrollo o soporte usa los resultados de un análisis de in ventario para seleccionar un programa: 1)  que permanecerá en uso durante un número preseleccionado de años, 2) que en el momento se use con éxito y 3) que tenga probabilidad de experimentar grandes modificaciones o aumentos en el futuro cercano. Entonces se aplican las opciones 2, 3 o 4. A primera vista, la sugerencia de que redesarrolle un programa grande cuando ya existe una  versión operativa puede parecer muy extravagante. Antes de juzgar, considere los siguientes puntos: 9 Las herramientas que se mencionan aquí no representan un respaldo, sino una muestra de las herramientas que  hay en esta categoría. En la mayoría de los casos, los nombres de las herramientas son marcas registradas por  sus respectivos desarrolladores.Objetivo: El objetivo de las herramientas de reestructura- ción es transformar el software de computadora no estruc- turado más antiguo en lenguajes de programación y estructuras de diseño modernos. Mecánica: En general, se ingresa el código fuente y se transforma  en un programa mejor estructurado. En algunos casos, la transforma-ción ocurre dentro del mismo lenguaje de programación. En otros, un lenguaje de programación más antiguo se transforma en un lenguaje más moderno. Herramientas representativas: 9 DMS Software Reengineering Toolkit, desarrollada por Semantic  Design (www.semdesigns.com), proporciona varias capaci- dades de reestructuración para COBOL, C/C++, Java, Fortran 90 y VHDL.Clone Doctor, desarrollada por Semantic Designs, Inc. (www. semdesigns.com), analiza y transforma programas escritos en C, C++, Java o COBOL o en cualquier otro lenguaje de compu-tadora basado en texto. plusFORT, desarrollada por Polyheddron (www.polyhedron. com), es una suite de herramientas FORTRAN que contiene capa-cidades para reestructurar programas FORTRAN pobremente diseñados en el estándar moderno FORTRAN o C. Indicadores hacia varias herramientas de reingeniería e ingeniería inversa pueden encontrarse en www.csse.monash.edu/~ipeake/reeng/free-swre-tools.html y en www.cs.ual- berta.ca/~kenw/toolsdir/all.htmlHERRAMIENTAS  DE SOFTWARE Reestructuración de software ¿Qué opciones existen  cuando uno se enfrenta con un programa dise-ñado e implementado pobremente?? La reingeniería es un poco como limpiar sus dientes. Puede pensar en miles de razones para demorarla, y la evitará con desidia durante un rato. Pero finalmente, sus tácticas de demora regresarán para causarle dolor.CONSEJO 29Pressman(655-674).indd   66929Pressman(655-674).indd   669 26/1/10   17:33:0226/1/10   17:33:02